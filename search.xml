<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Markdown简单指南</title>
    <url>/%E7%AC%94%E8%AE%B0/Markdown%E7%AE%80%E5%8D%95%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h2 id="MarKDown简单指南"><a href="#MarKDown简单指南" class="headerlink" title="MarKDown简单指南"></a>MarKDown简单指南</h2><h4 id="1-Markdown"><a href="#1-Markdown" class="headerlink" title="1.Markdown"></a>1.Markdown</h4><p>Markdown是一种轻量级标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式，并能转换成有效的 HTML 文档。<br>创始人是<strong>Aaron Swartz</strong>和<strong>John Gruber</strong>。</p>
<a id="more"></a>

<p><strong>优点</strong>  </p>
<ul>
<li><p>易读（看起来舒服）、易写（语法简单）、易更改纯文本，奉行极简主义。</p>
</li>
<li><p>跨平台使用，可以使用任何编辑器打开。</p>
</li>
<li><p>越来越多的网站支持Markdown，简书、知乎、CSDN、Github、Gitlab、Gitbook</p>
</li>
<li><p>可以导出 PDF、Word、HTML、Epub、LaTeX 等文件格式；</p>
</li>
<li><p>摆脱Word</p>
<h4 id="2-基本语法"><a href="#2-基本语法" class="headerlink" title="2.基本语法"></a>2.基本语法</h4><h6 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h6><p>使用=和-标记一级和二级标</p>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="  一级标题"></a>  一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="  二级标题"></a>  二级标题</h2><p>使用#，可表示1-6级标题</p>
<h1 id="一级标题-1"><a href="#一级标题-1" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="2-段落"><a href="#2-段落" class="headerlink" title="2.段落"></a>2.段落</h6><p>Markdown 语法中的段落由一行或多行文本组成的，不同的段落之间使用空行来标记。<br>如果想在段内换行，则需要在上一行的结尾插入两个以上的空格然后回车</p>
<h6 id="3-引用"><a href="#3-引用" class="headerlink" title="3.引用"></a>3.引用</h6><p>在段落的每行或者只在第一行使用符号&gt;,还可使用多个嵌套引用</p>
<blockquote>
<p>引用</p>
<blockquote>
<p>嵌套引用</p>
</blockquote>
</blockquote>
<h6 id="4-分割线"><a href="#4-分割线" class="headerlink" title="4.分割线"></a>4.分割线</h6><p>由三个以上的星号*或减号-或下划线_来标记</p>
<hr>
<h2 id="或"><a href="#或" class="headerlink" title="  或"></a>  或</h2><p>  或</p>
<hr>
<h6 id="5-粗体和斜体"><a href="#5-粗体和斜体" class="headerlink" title="5.粗体和斜体"></a>5.粗体和斜体</h6><p>粗体由两个*<em>或两个__包裹，斜体由一个</em>或_包裹</p>
<p>  <em>斜体</em>，<em>斜体</em><br>  <strong>粗体</strong>，<strong>粗体</strong></p>
<h6 id="6-列表"><a href="#6-列表" class="headerlink" title="6.列表"></a>6.列表</h6><p>无序列表由星号*或加号+或减号-标记<br>有序列表由数字和点.标记<br>嵌套列表使用制表符</p>
<h6 id="7-标记（内嵌代码）"><a href="#7-标记（内嵌代码）" class="headerlink" title="7.标记（内嵌代码）"></a>7.标记（内嵌代码）</h6><p>使用反引号</p>
<p>  <code>ctrl+a</code></p>
<h6 id="8-图片"><a href="#8-图片" class="headerlink" title="8.图片"></a>8.图片</h6><p>  <img src="%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80" alt="图片替代文字"></p>
<h6 id="9-链接"><a href="#9-链接" class="headerlink" title="9.链接"></a>9.链接</h6><p>  行内式链接<br>  <a href="链接地址" title="Title">链接文字</a><br>  参考式链接<br>  [链接文字][链接标记]<br>  [链接标记]: 链接地址  “Title”<br>  自动链接<br>  &lt;URL或邮箱地址&gt;</p>
<h6 id="10-转义"><a href="#10-转义" class="headerlink" title="10.转义"></a>10.转义</h6><p>使用 \（反斜杠）来插入一些特殊符号</p>
<h5 id="3-常用编辑器"><a href="#3-常用编辑器" class="headerlink" title="3.常用编辑器"></a>3.常用编辑器</h5></li>
</ul>
<ul>
<li>Linux<ul>
<li>VSCode</li>
<li>Ato</li>
<li>Typora</li>
<li>ReTex</li>
<li>UberWrite</li>
<li>RStudio</li>
</ul>
</li>
<li>Windows<ul>
<li>VSCod</li>
<li>Ato</li>
<li>CuteMarkE</li>
<li>MarkdownPad</li>
<li>Mi</li>
<li>Typor</li>
<li>RStudio</li>
</ul>
</li>
<li>浏览器插件<ul>
<li>MaDo (Chrome</li>
<li>Marxico（Chrome）</li>
</ul>
</li>
</ul>
<p><strong>推荐：</strong>typora</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>个人博客（一）：HEXO+Github搭建个人博客</title>
    <url>/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9AHEXO-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>该系列博客主要记录使用HEXO + Github Pages搭建个人博客的过程，以及与主题设计、使用技巧、插件推荐等方面相关的内容。</p>
<a id="more"></a>

<h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h2><p>1.1 注册Github</p>
<p>1.2 安装Git</p>
<p>1.3 安装Node.js</p>
<blockquote>
<p>本次搭建基于以下环境：<br>win10<br><span class="exturl" data-url="bWFpbHRvOm5vZGUuanNAMTAuMTYuMA==" title="mailto:node.js@10.16.0">node.js@10.16.0<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="bWFpbHRvOmdpdEAyLjIyLjA=" title="mailto:git@2.22.0">git@2.22.0<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="bWFpbHRvOmhleG9AMi4wLjA=" title="mailto:hexo@2.0.0">hexo@2.0.0<i class="fa fa-external-link"></i></span></p>
</blockquote>
<h2 id="2-创建仓库"><a href="#2-创建仓库" class="headerlink" title="2.创建仓库"></a>2.创建仓库</h2><p>在github上创建名为 <code>用户名.github.io</code>的仓库，作为以后的博客地址 <code>http://用户名.github.io</code></p>
<p>注：每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库</p>
<h2 id="3-创建-HEXO-博客"><a href="#3-创建-HEXO-博客" class="headerlink" title="3. 创建 HEXO 博客"></a>3. 创建 HEXO 博客</h2><h3 id="3-1-全局安装"><a href="#3-1-全局安装" class="headerlink" title="3.1 全局安装"></a>3.1 全局安装</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo</span><br></pre></td></tr></table></figure>

<h3 id="3-2-初始化"><a href="#3-2-初始化" class="headerlink" title="3.2 初始化"></a>3.2 初始化</h3><p>​    切换到目标路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo init</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>

<h3 id="3-3-首次生成"><a href="#3-3-首次生成" class="headerlink" title="3.3 首次生成"></a>3.3 首次生成</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure>

<h3 id="3-4-本地预览"><a href="#3-4-本地预览" class="headerlink" title="3.4 本地预览"></a>3.4 本地预览</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure>

<p>访问： <span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo0MDAwLw==" title="http://localhost:4000/">http://localhost:4000/<i class="fa fa-external-link"></i></span></p>
<h2 id="4-关联Github仓库"><a href="#4-关联Github仓库" class="headerlink" title="4. 关联Github仓库"></a>4. 关联Github仓库</h2><h3 id="4-1-配置文件"><a href="#4-1-配置文件" class="headerlink" title="4.1 配置文件"></a>4.1 配置文件</h3><p>根目录下的_config.yml文件中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:用户名&#x2F;用户名.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<h3 id="4-2-安装部署插件"><a href="#4-2-安装部署插件" class="headerlink" title="4.2 安装部署插件"></a>4.2 安装部署插件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h3 id="4-3-首次运行"><a href="#4-3-首次运行" class="headerlink" title="4.3 首次运行"></a>4.3 首次运行</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g	# 生成</span><br><span class="line">$ hexo d	# 部署</span><br></pre></td></tr></table></figure>

<p>访问：<span class="exturl" data-url="aHR0cHM6Ly9Zb3VyTmFtZS5naXRodWIuaW8v" title="https://YourName.github.io/">https://YourName.github.io/<i class="fa fa-external-link"></i></span></p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>github</tag>
        <tag>HEXO</tag>
      </tags>
  </entry>
  <entry>
    <title>个人博客（二）：HEXO框架基本配置和使用</title>
    <url>/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9AHEXO%E6%A1%86%E6%9E%B6%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="个人博客（二）：HEXO框架基本配置和使用"><a href="#个人博客（二）：HEXO框架基本配置和使用" class="headerlink" title="个人博客（二）：HEXO框架基本配置和使用"></a>个人博客（二）：HEXO框架基本配置和使用</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文仅记录一些初次使用HEXO框架时的基本配置和常用命令。</p>
<p>HEXO框架的详细配置和命令可参考官方文档：</p>
<p>配置：<span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3MvY29uZmlndXJhdGlvbg==" title="https://hexo.io/zh-cn/docs/configuration">https://hexo.io/zh-cn/docs/configuration<i class="fa fa-external-link"></i></span></p>
<p>命令：<span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3MvY29tbWFuZHM=" title="https://hexo.io/zh-cn/docs/commands">https://hexo.io/zh-cn/docs/commands<i class="fa fa-external-link"></i></span></p>
<a id="more"></a>

<h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><p>配置文件即站点根目录下的 <code>_config.yml</code> 文件允许我们对站点进行详细的设置。</p>
<h3 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h3><table>
<thead>
<tr>
<th>字段</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Site</td>
<td>网站的个性化描述</td>
</tr>
<tr>
<td>URL</td>
<td>博客文章 URL 的设置</td>
</tr>
<tr>
<td>Directory</td>
<td>目录设置</td>
</tr>
<tr>
<td>Writing</td>
<td>写作设置</td>
</tr>
<tr>
<td>Home page setting</td>
<td>首页设置</td>
</tr>
<tr>
<td>Category &amp; Tag</td>
<td>时间和日期的显示格式</td>
</tr>
<tr>
<td>Pagination</td>
<td>分页设置</td>
</tr>
<tr>
<td>Extensions</td>
<td>主题和插件设置</td>
</tr>
<tr>
<td>Deployment</td>
<td>网站部署的配</td>
</tr>
</tbody></table>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="hexo-init"><a href="#hexo-init" class="headerlink" title="hexo init"></a>hexo init</h3><p><strong>初始化</strong>本地文件夹为博客的根目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init [folder]</span><br></pre></td></tr></table></figure>

<h3 id="hexo-n"><a href="#hexo-n" class="headerlink" title="hexo n"></a>hexo n</h3><p> <strong>新建文章</strong> ，全名为 <code>hexo new</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>layout 指定文章类型，若无指定则默认由配置文件中的 default_layout 选项决定</p>
</blockquote>
<blockquote>
<p>title 指定文章标题，如果参数值中含有空格，则需要使用双引号包围</p>
</blockquote>
<h3 id="hexo-g"><a href="#hexo-g" class="headerlink" title="hexo g"></a>hexo g</h3><p> *<em>生成静态文件 *</em>，全名为 <code>hexo generate</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g [-d]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>结合-d 表示生成后立即部署，与 <code>hexo d -g</code> 等价</p>
</blockquote>
<h3 id="hexo-s"><a href="#hexo-s" class="headerlink" title="hexo s"></a>hexo s</h3><p><strong>启动本地服务器</strong>，全名为 <code>hexo server</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s [-p&#x2F;-i&#x2F;-s]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>-p    指定服务器端口，默认为 4000</p>
<p>-i     指定服务器 IP 地址，默认为 0.0.0.0 </p>
<p>-s    静态模式 ，提供 public 文件夹中的文件并禁用文件监视</p>
</blockquote>
<p><strong>注：</strong>运行本地服务器需要安装 hexo-server 插件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-server --save</span><br></pre></td></tr></table></figure>

<h3 id="hexo-d"><a href="#hexo-d" class="headerlink" title="hexo d"></a>hexo d</h3><p><strong>部署网站</strong>，全名为<code>hexo deploy</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo d [-g]</span><br></pre></td></tr></table></figure>

<ul>
<li><code>-g</code> 选项，指定生成后部署，与 <code>hexo g -d</code> 等价</li>
</ul>
<p><strong>说明</strong> ：部署前需要修改 _config.yml 配置文件，下面以 部署到 GitHub 为例进行说明</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;YourgithubName&#x2F;YourgithubName.github.io.git</span><br><span class="line">  branch: master</span><br><span class="line">  message: 自定义提交消息，默认为Site updated: &#123;&#123; now(&#39;YYYY-MM-DD HH:mm:ss&#39;) &#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="hexo-clean"><a href="#hexo-clean" class="headerlink" title="hexo clean"></a>hexo clean</h3><p><code>hexo clean</code> 命令用于 清理缓存文件和已生成的静态文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>github</tag>
        <tag>HEXO</tag>
      </tags>
  </entry>
  <entry>
    <title>个人博客（三）：HEXO博客个性化设置</title>
    <url>/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9AHEXO%E5%8D%9A%E5%AE%A2%E4%B8%AA%E6%80%A7%E5%8C%96%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="个人博客（三）：HEXO博客个性化设置"><a href="#个人博客（三）：HEXO博客个性化设置" class="headerlink" title="个人博客（三）：HEXO博客个性化设置"></a>个人博客（三）：HEXO博客个性化设置</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>该系列博客主要记录使用HEXO + Github Pages搭建个人博客的过程，以及与主题设计、使用技巧、插件推荐等方面相关的内容。</p>
<p>本篇是在使用博客过程中个性化的自定义设置，会持续更新并进行改动。</p>
<a id="more"></a>

<h2 id="一-更改主题"><a href="#一-更改主题" class="headerlink" title="一 更改主题"></a>一 更改主题</h2><p>自定义主题只需将主题文件拷贝到站点目录的 <code>themes</code> 文件夹下并修改配置文件，下面以安装设置Next 主题 为例。</p>
<h3 id="1-1-下载Next"><a href="#1-1-下载Next" class="headerlink" title="1.1 下载Next"></a>1.1 下载Next</h3><p>在站点根目录下用Git克隆</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>

<h3 id="1-2-启用Next"><a href="#1-2-启用Next" class="headerlink" title="1.2 启用Next"></a>1.2 启用Next</h3><p>修改站点配置文件<code>_config.yml</code>， 将<code>theme</code> 字段的值更改为 <code>next</code></p>
<h3 id="1-3-验证"><a href="#1-3-验证" class="headerlink" title="1.3 验证"></a>1.3 验证</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">hexo clean 	<span class="comment">//清除缓存</span></span><br><span class="line">hexo g		<span class="comment">//生成文件</span></span><br><span class="line">hexo s		<span class="comment">//运行本地服务</span></span><br></pre></td></tr></table></figure>

<p>访问 <code>http://localhost:4000</code>，检查站点是否正确运行</p>
<h3 id="1-4-更新主题"><a href="#1-4-更新主题" class="headerlink" title="1.4 更新主题"></a>1.4 更新主题</h3><p>在主题目录下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure>

<h2 id="二博客站点配置"><a href="#二博客站点配置" class="headerlink" title="二博客站点配置"></a>二博客站点配置</h2><p>修改站点配置文件<code>_config.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="comment">#网站的标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">''</span> <span class="comment">#网站副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">''</span> <span class="comment">#网站描述</span></span><br><span class="line"><span class="attr">keywords:</span>  <span class="comment">#网站关键字</span></span><br><span class="line"><span class="attr">author:</span> <span class="comment">#网站作者</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span> <span class="comment">#语言 zh-CN简体中文</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">''</span> <span class="comment">#时区，默认就好</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">url:</span>  <span class="comment">#网站地址 比如：https://yourname.github.io</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span> <span class="comment">#网站根目录</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">:category/:title/</span>	<span class="comment">#网站的url格式</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#自动提交到仓库，可以设置多个仓库</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> </span><br><span class="line">    <span class="attr">GitHub:</span> <span class="string">https://github.com/yourname/yourname.github.io.git</span></span><br><span class="line">    <span class="attr">Gitee:</span> <span class="string">https://gitee.com/yourname/blog.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<h2 id="三-Next主题配置"><a href="#三-Next主题配置" class="headerlink" title="三 Next主题配置"></a>三 Next主题配置</h2><p>详细设置请参考Next主题的官方说明</p>
<p>Next：<span class="exturl" data-url="aHR0cDovL3RoZW1lLW5leHQuaWlzc25hbi5jb20vZ2V0dGluZy1zdGFydGVkLmh0bWw=" title="http://theme-next.iissnan.com/getting-started.html">http://theme-next.iissnan.com/getting-started.html<i class="fa fa-external-link"></i></span></p>
<p>以下为Next主题常用的自定义设置，只需修改主题目录下的配置文件<code>_config.yml</code></p>
<h3 id="3-1-选择外观风格"><a href="#3-1-选择外观风格" class="headerlink" title="3.1 选择外观风格"></a>3.1 选择外观风格</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">#scheme: Gemini</span><br></pre></td></tr></table></figure>

<h3 id="3-2-语言设置"><a href="#3-2-语言设置" class="headerlink" title="3.2 语言设置"></a>3.2 语言设置</h3><p>支持的语言可通过 languages 文件夹查看</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">language: zh-CN	&#x2F;&#x2F;简体中文</span><br></pre></td></tr></table></figure>

<h3 id="3-3-菜单设置"><a href="#3-3-菜单设置" class="headerlink" title="3.3 菜单设置"></a>3.3 菜单设置</h3><p>（1）菜单项的文本显示</p>
<p>修改 themes/next/languages/zh-Hans.yml 文件的 menu 字段对应的中文或者新增。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">首页</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">归档</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">分类</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">标签</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">关于</span></span><br><span class="line">  <span class="attr">search:</span> <span class="string">搜索</span></span><br><span class="line">  <span class="attr">schedule:</span> <span class="string">日程表</span></span><br><span class="line">  <span class="attr">sitemap:</span> <span class="string">站点地图</span></span><br><span class="line">  <span class="attr">commonweal:</span> <span class="string">公益</span> <span class="number">404</span></span><br><span class="line">  <span class="comment"># 新增menu</span></span><br><span class="line">  <span class="attr">catalogue:</span> <span class="string">目录</span></span><br></pre></td></tr></table></figure>

<p>（2）菜单项的图标设置</p>
<p>主题配置文件<code>_config.yml</code>的<code>menu</code>字段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: &#x2F; || home</span><br><span class="line">  about: &#x2F;about&#x2F; || user</span><br><span class="line">  tags: &#x2F;tags&#x2F; || tags</span><br><span class="line">  categories: &#x2F;categories&#x2F; || th</span><br><span class="line">  archives: &#x2F;archives&#x2F; || archive</span><br><span class="line">  #schedule: &#x2F;schedule&#x2F; || calendar</span><br><span class="line">  #sitemap: &#x2F;sitemap.xml || sitemap</span><br><span class="line">  #commonweal: &#x2F;404&#x2F; || heartbeat</span><br><span class="line"></span><br><span class="line"># Enable &#x2F; Disable menu icons &#x2F; item badges.</span><br><span class="line">menu_settings:</span><br><span class="line">  icons: true</span><br><span class="line">  badges: false</span><br><span class="line"> &#x2F;&#x2F;这个名称并不直接显示在页面上，而是用于匹配图标以及翻译</span><br></pre></td></tr></table></figure>

<p>（3）创建菜单项对应的页面</p>
<p>除了 <code>home</code>， <code>archives</code> ,其他页面都要手动创建</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#分类</span><br><span class="line">hexo new page &quot;categories&quot;</span><br><span class="line">#标签</span><br><span class="line">hexo new page &quot;tags&quot;</span><br><span class="line">#关于</span><br><span class="line">hexo new page &quot;about&quot;</span><br></pre></td></tr></table></figure>

<p>对应的文件夹会被创建于<code>source</code> 目录下，在里面的 <code>index.md</code> 文件添加描述，如categories</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories </span><br><span class="line">date: 2020-03-20 10:32:05</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h3 id="3-4-头像设置"><a href="#3-4-头像设置" class="headerlink" title="3.4 头像设置"></a>3.4 头像设置</h3><p>将 <code>avatar</code> 的值设置成头像图片的链接地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Sidebar Avatar</span><br><span class="line">avatar:</span><br><span class="line">  # Replace the default image and set the url here.</span><br><span class="line">  url: #&#x2F;images&#x2F;avatar.gif</span><br><span class="line">  # 修改头像边框为圆形</span><br><span class="line">  rounded: true</span><br><span class="line">  # 鼠标放置头像时，头像旋转特效</span><br><span class="line">  rotated: true</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>HEXO</tag>
      </tags>
  </entry>
  <entry>
    <title>廖雪峰Git教程学习笔记</title>
    <url>/uncategorized/%E5%BB%96%E9%9B%AA%E5%B3%B0Git%E6%95%99%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="廖雪峰Git教程学习笔记"><a href="#廖雪峰Git教程学习笔记" class="headerlink" title="廖雪峰Git教程学习笔记"></a>廖雪峰Git教程学习笔记</h1><h2 id="一-Git简介"><a href="#一-Git简介" class="headerlink" title="一.Git简介"></a>一.Git简介</h2><p>Git是目前世界上最先进的分布式版本控制系统（没有之一）。<br><strong>版本控制系统</strong>：自动记录跟踪每次文件的改动，作一个文件快照，形成一个版本。<br>分布式版本控制系统：每个人电脑里都有完整的版本库，不必联网，中央服务器主要用于交换团队的修改。</p>
<a id="more"></a>

<blockquote>
<p>Mercurial、Bazaar、BitKeeper、Git</p>
</blockquote>
<p>集中式的版本控制系统：版本库集中存放在中央服务器，必须联网才能工作。</p>
<blockquote>
<p>CVS、SVN</p>
</blockquote>
<p>历史：linux之父为了更好的管理他自己的开源项目linux系统而自己用C语言开发的分布式版本控制系统Git</p>
<h2 id="二-Git安装"><a href="#二-Git安装" class="headerlink" title="二.Git安装"></a>二.Git安装</h2><h3 id="2-1-Linux上安装"><a href="#2-1-Linux上安装" class="headerlink" title="2.1 Linux上安装"></a>2.1 Linux上安装</h3><p>1.判断是否已安装Git</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ git</span><br></pre></td></tr></table></figure>

<p>2.否则</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git-core（旧）</span><br></pre></td></tr></table></figure>

<p>3.其他：<br>从Git官网下载源码，解压，依次执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;config</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>

<h3 id="2-2-Windows上安装Git"><a href="#2-2-Windows上安装Git" class="headerlink" title="2.2 Windows上安装Git"></a>2.2 Windows上安装Git</h3><p>1.从Git官网下载安装程序,直接安装（或<span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vZ2l0LWluc3RhbGxlci9naXQtZm9yLXdpbmRvd3PvvIk=" title="https://gitee.com/git-installer/git-for-windows）">https://gitee.com/git-installer/git-for-windows）<i class="fa fa-external-link"></i></span><br>2.配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"Your Name"</span><span class="comment">//名字</span></span><br><span class="line">$ git config --global user.email <span class="string">"email@example.com"</span><span class="comment">//邮箱</span></span><br></pre></td></tr></table></figure>

<h2 id="三-创建版本库"><a href="#三-创建版本库" class="headerlink" title="三.创建版本库"></a>三.创建版本库</h2><p>仓库/repository/仓库/目录</p>
<p>1.选择一个合适的地方，创建一个空目录</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ mkdir learngit	<span class="comment">//创建一个空文件夹</span></span><br><span class="line"></span><br><span class="line">$ cd learngit	<span class="comment">//移动到新文件夹</span></span><br><span class="line"></span><br><span class="line">$ pwd	<span class="comment">//显示当前位置的路径</span></span><br></pre></td></tr></table></figure>

<p>2.初始化目录，将其变成Git可以管理的仓库</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ git init	<span class="comment">//初始化</span></span><br><span class="line"></span><br><span class="line">$ git ls -ah 	<span class="comment">//罗列目录下的文件</span></span><br></pre></td></tr></table></figure>

<p>成功会自动创建.git文件夹，Git用来跟踪管理版本库</p>
<p>所有的版本控制系统只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等</p>
<p>无法跟踪图片、视频、Word等二进制文件的变化</p>
<p>Windows自带记事本的文本文件开头有个0xefbbbf，可能编译错误，不推荐</p>
<h2 id="四-添加提交修改"><a href="#四-添加提交修改" class="headerlink" title="四.添加提交修改"></a>四.添加提交修改</h2><h3 id="4-1-把文件添加到仓库"><a href="#4-1-把文件添加到仓库" class="headerlink" title="4.1 把文件添加到仓库"></a>4.1 把文件添加到仓库</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ git add file	<span class="comment">//反复多次使用，添加多个文件，把文件修改添加到暂存区</span></span><br><span class="line">$ git add *	<span class="comment">//将所有更改一次性添加</span></span><br></pre></td></tr></table></figure>

<h3 id="4-2-把文件提交到仓库"><a href="#4-2-把文件提交到仓库" class="headerlink" title="4.2 把文件提交到仓库"></a>4.2 把文件提交到仓库</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ git commit -m <span class="string">"description"</span>	<span class="comment">//一次提交，把暂存区的所有内容提交到当前分支</span></span><br></pre></td></tr></table></figure>

<h2 id="五-版本控制"><a href="#五-版本控制" class="headerlink" title="五.版本控制"></a>五.版本控制</h2><h3 id="5-1-基本概念"><a href="#5-1-基本概念" class="headerlink" title="5.1 基本概念"></a>5.1 基本概念</h3><p>工作区（Working Directory）：存在文件的目录<br>版本库（Repository）：.git文件夹<br>暂存区（stage或index）：<br>分支（branch）：<br>master分支：Git自动创建的唯一一个主分支<br>commit id：版本号<br>HEAD：表示当前版本 HEAD^：上一个版本 HEAD^^：上上一个版本 ……  HEAD~100：上100个版本<br>$ git status    //查看仓库当前的状态<br>$ git diff file    //查看已修改未提交内容与最新版本的不同</p>
<h3 id="5-2-版本回退"><a href="#5-2-版本回退" class="headerlink" title="5.2 版本回退"></a>5.2 版本回退</h3><p>$ git log或$ git log –pretty=oneline    //显示从最近到最远的提交日志<br>$ git reset –hard HEAD^    //回退到上一个版本<br>$ git reset –hard 1094a    //回到1094adb…版本<br>$ git reflog    //查看命令日志<br>原理：Git在内部有个指向当前版本的HEAD指针，当你回退版本的时候，Git仅仅是把HEAD从指向该版本号并更新工作区的文件</p>
<h3 id="5-3-管理修改"><a href="#5-3-管理修改" class="headerlink" title="5.3 管理修改"></a>5.3 管理修改</h3><p>每次修改，如果不用git add到暂存区，那就不会加入到commit中。<br>git diff HEAD – file    //查看工作区和版本库里面最新版本的区别.</p>
<h3 id="5-4-撤销修改"><a href="#5-4-撤销修改" class="headerlink" title="5.4 撤销修改"></a>5.4 撤销修改</h3><p>人工修改<br>$ git checkout – file    //丢弃工作区的修改<br>$ git reset HEAD <file>    //撤销暂存区的修改<br>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout – file。</p>
<p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。</p>
<p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，进行版本回退，不过前提是没有推送到远程库。</p>
<h3 id="5-5-删除文件"><a href="#5-5-删除文件" class="headerlink" title="5.5 删除文件"></a>5.5 删除文件</h3><p>$ rm file    //删除文件管理器的文件<br>$ git rm file    //从版本库中删除文件<br>$ git checkout – file。//恢复错删文件</p>
<h2 id="六-远程仓库"><a href="#六-远程仓库" class="headerlink" title="六.远程仓库"></a>六.远程仓库</h2><p>Github–&gt;Git远程仓库</p>
<h3 id="6-1-配置SSH"><a href="#6-1-配置SSH" class="headerlink" title="6.1 配置SSH"></a>6.1 配置SSH</h3><p>1 检查是否存在SSH Key</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd ~&#x2F;.ssh</span><br><span class="line">$ ls	&#x2F;&#x2F;看是否存在 id_rsa 和 id_rsa.pub文件，如果存在，说明已经有SSH Key</span><br></pre></td></tr></table></figure>

<p>2 创建SSH Key</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"youremail@example.com"</span></span><br></pre></td></tr></table></figure>

<p>3 关联Github</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ cat id_rsa.pub	<span class="comment">//查看密钥并复制</span></span><br></pre></td></tr></table></figure>

<p>登陆GitHub，打开“Account settings”，“SSH Keys”页面，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容。</p>
<p>4 成功验证</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line"><span class="comment">//运行结果出现如下提示</span></span><br><span class="line">Hi xiangshuo1992! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure>

<h3 id="6-2-关联远程库"><a href="#6-2-关联远程库" class="headerlink" title="6.2 关联远程库"></a>6.2 关联远程库</h3><p>1.Github上创建repository</p>
<p>2.本地仓库关联github的远程库</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ git remote add origin git@github.com:用户名/远程仓库名.git</span><br></pre></td></tr></table></figure>

<p>3.把本地仓库的内容推送到GitHub仓库</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure>

<p>4.推送最新修改</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure>

<h3 id="6-3-克隆远程库"><a href="#6-3-克隆远程库" class="headerlink" title="6.3 克隆远程库"></a>6.3 克隆远程库</h3><p>1.确定Github上repository的地址</p>
<p>2.克隆远程库到本地</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git clone git@github.com:用户名&#x2F;仓库名.git</span><br></pre></td></tr></table></figure>

<h2 id="七-分支管理"><a href="#七-分支管理" class="headerlink" title="七.分支管理"></a>七.分支管理</h2><p>每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。</p>
<p>一开始，只有一条时间线，在Git里，这个分支叫主分支，即master分支。</p>
<p>HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支</p>
<p>一开始的时候，master分支是一条线，Git用master指向最新的提交，再用HEAD指向master，就</p>
<p>能确定当前分支，以及当前分支的提交点：</p>
<p>每次提交，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长。</p>
<p>当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，再把</p>
<p>HEAD指向dev，就表示当前分支在dev上：</p>
<p>不过，从现在开始，对工作区的修改和提交就是针对dev分支了，比如新提交一次后，dev指针往前移动一步，而master指针不变</p>
<p>假如我们在dev上的工作完成了，就可以把dev合并到master上。Git怎么合并呢？最简单的方法，</p>
<p>就是直接把master指向dev的当前提交，就完成了合并</p>
<h3 id="7-1-创建与合并分支"><a href="#7-1-创建与合并分支" class="headerlink" title="7.1 创建与合并分支"></a>7.1 创建与合并分支</h3><p>1.创建分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git checkout -b dev</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch dev	&#x2F;&#x2F;创建分支</span><br><span class="line">$ git checkout dev	&#x2F;&#x2F;切换分支</span><br><span class="line">$ git branch	&#x2F;&#x2F;查看分支</span><br></pre></td></tr></table></figure>

<p>2.修改文件后切换回master分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git checkout master</span><br></pre></td></tr></table></figure>

<p>3.把dev分支的工作成果合并到master分支上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git merge dev</span><br></pre></td></tr></table></figure>

<p>4.删除dev分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch -d dev</span><br></pre></td></tr></table></figure>

<h3 id="7-2-解决分支冲突"><a href="#7-2-解决分支冲突" class="headerlink" title="7.2 解决分支冲突"></a>7.2 解决分支冲突</h3><p>分支冲突：要合并的分支在同一提交点上有不同的修改<br>解决方法：把Git合并失败的文件手动编辑为我们希望的内容，再提交。<br>$ git status    //可查看冲突文件<br>$ git log –graph –pretty=oneline –abbrev-commit //查看分支合并图</p>
<p>分支管理策略<br>$ git merge –no-ff -m “merge with no-ff” dev<br>//强制禁用Fast forward模式，，Git就会在merge时生成一个新的commit，从分支历史上就可以看出分支信息</p>
<h3 id="7-3-分支管理策略"><a href="#7-3-分支管理策略" class="headerlink" title="7.3 分支管理策略"></a>7.3 分支管理策略</h3><p>通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。</p>
<p>如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。</p>
<p>下面我们实战一下–no-ff方式的git merge：</p>
<p>首先，仍然创建并切换dev分支：</p>
<p>$ git checkout -b dev<br>Switched to a new branch ‘dev’<br>修改readme.txt文件，并提交一个新的commit：</p>
<p>$ git add readme.txt<br>$ git commit -m “add merge”<br>[dev f52c633] add merge<br> 1 file changed, 1 insertion(+)<br>现在，我们切换回master：</p>
<p>$ git checkout master<br>Switched to branch ‘master’<br>准备合并dev分支，请注意–no-ff参数，表示禁用Fast forward：</p>
<p>$ git merge –no-ff -m “merge with no-ff” dev<br>Merge made by the ‘recursive’ strategy.<br> readme.txt | 1 +<br> 1 file changed, 1 insertion(+)<br>因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。</p>
<p>合并后，我们用git log看看分支历史：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git log --graph --pretty&#x3D;oneline --abbrev-commit</span><br><span class="line"></span><br><span class="line">e1e9c68 (HEAD -&gt; master) merge with no-ff</span><br><span class="line">|\  </span><br><span class="line">| * f52c633 (dev) add merge</span><br><span class="line">|&#x2F;  </span><br><span class="line"></span><br><span class="line">cf810e4 conflict fixed</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>可以看到，不使用Fast forward模式，merge后就像这样：</p>
<p>git-no-ff-mode</p>
<h3 id="7-4-分支策略"><a href="#7-4-分支策略" class="headerlink" title="7.4 分支策略"></a>7.4 分支策略</h3><p>master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；<br>干活都在dev分支上，也就是说，dev分支是不稳定的。<br>到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本<br>团队每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并</p>
<p>BUG分支<br>每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除<br>$ git stash        //把当前工作现场“储藏”起来，等以后恢复现场后继续工作<br>或<br>$ git stash apply stash@{0}        //恢复指定的stash<br>$ git stash list    //查看已存放的工作现场</p>
<p>$ git stash apply    //恢复工作现场<br>$ git stash drop    //删除stash内容<br>或<br>$ git stash pop        //恢复并删除stash内容</p>
<p>Feature分支<br>开发一个新feature，最好新建一个分支；<br>如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除</p>
<p>多人协作<br>$ git remote    //查看远程库的信息<br>$ git remote -v        //示更远程库详细的信息</p>
<p>推送分支<br>把某分支上的所有本地提交推送到远程库。<br>推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上<br>$ git push origin master<br>推送原则：<br>master分支是主分支，因此要时刻与远程同步；</p>
<p>dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</p>
<p>bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；</p>
<p>feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。</p>
<p>抓取分支<br>$ git clone <span class="exturl" data-url="bWFpbHRvOmdpdEBnaXRodWIuY29t" title="mailto:git@github.com">git@github.com<i class="fa fa-external-link"></i></span>:michaelliao/learngit.git    //克隆，只有master分支<br>$ git checkout -b dev origin/dev    //创建与远程origin的相应的分支<br>当其他人已推送的的最新提交和你试图推送的提交有冲突，往往推送失败<br>解决方法：先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送<br>$ git branch –set-upstream-to=origin/dev dev    //指定本地dev分支与远程origin/dev分支的链接<br>$ git pull    //抓取分支</p>
<p>多人协作流程：<br>查看远程库信息，使用git remote -v；</p>
<p>本地新建的分支如果不推送到远程，对其他人就是不可见的；</p>
<p>从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；</p>
<p>在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；</p>
<p>建立本地分支和远程分支的关联，使用git branch –set-upstream branch-name origin/branch-name；</p>
<p>从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。</p>
<p>Rebase<br>把分叉的提交历史“整理”成一条直线，看上去更直观，但本地的分叉提交已经被修改过了<br>$ git rebase    //把本地未push的分叉提交历史整理成直线</p>
<h2 id="八-标签管理"><a href="#八-标签管理" class="headerlink" title="八.标签管理"></a>八.标签管理</h2><p>发布一个版本时，我们通常先在版本库中打一个标签（tag），<br>这样，就唯一确定了打标签时刻的版本。<br>将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。<br>所以，标签也是版本库的一个快照，实质上也是指向某个commit的指针，但不能移动</p>
<p>创建标签<br>切换到需要打标签的分支，敲命令git tag <name>就可以打一个新标签<br>$ git tag    //查看所有标签，按字母排序的<br>$ git tag v0.9 f52c633    //给指定commit id打标签<br>$ git tag -a v0.1 -m “version 0.1 released” 1094adb        //创建带有说明的标签<br>$ git show <tagname>    //查看标签信息</p>
<p>操作标签<br>$ git tag -d v0.1    //删除本地标签<br>git push origin <tagname>    //推送某个标签到远程<br>$ git push origin –tags    //一次性推送全部尚未推送到远程的本地标签</p>
<p>$ git tag -d v0.9<br>$ git push origin :refs/tags/v0.9    //删除远程标签</p>
]]></content>
  </entry>
  <entry>
    <title>jQuery笔记</title>
    <url>/%E7%AC%94%E8%AE%B0/jQuery%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="jQuery笔记"><a href="#jQuery笔记" class="headerlink" title="jQuery笔记"></a>jQuery笔记</h1><h1 id="一、初识jQuery"><a href="#一、初识jQuery" class="headerlink" title="一、初识jQuery"></a>一、初识jQuery</h1><p><strong>简介：</strong>jQuery是一个JS库，封装多种预定义的对象和函数，目的在于简化JS开发人员遍历HTML文档，操作DOM，执行动画和开发Ajax的操作,可兼容不同平台。</p>
<p><strong>本质：</strong>jQuery库就是一个叫jQuery的函数，该函数及其原型中定义了大量的方法，我们使用的就是该函数的方法。</p>
<p><strong>理念：</strong>write less,do more.</p>
<a id="more"></a>

<p><strong>其它js库：</strong>Prototype、Do jo、YUI、Ext JS、 Moo Tools</p>
<p><strong>使用：</strong>下载后在HTML内引入</p>
<script src="jquery-1.12.4/jquery-1.12.4.min.js"></script>
<p><strong>例子 Hello World:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &lt;html&gt;</span><br><span class="line">       &lt;head&gt;</span><br><span class="line">       &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">       &lt;title&gt;dom操作&lt;&#x2F;title&gt;</span><br><span class="line">       &lt;script src&#x3D;&quot;jquery-3.3.1&#x2F;jquery-3.3.1.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">       &lt;script&gt;</span><br><span class="line">          $(function()&#123;</span><br><span class="line">             alert(&#39;Hello World&#39;);</span><br><span class="line">          &#125;);</span><br><span class="line">       &lt;&#x2F;script&gt;</span><br><span class="line">       &lt;&#x2F;head&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h1 id="jQuery的基本概念和操作"><a href="#jQuery的基本概念和操作" class="headerlink" title="jQuery的基本概念和操作"></a>jQuery的基本概念和操作</h1><h2 id="1-jQuery的加载模式"><a href="#1-jQuery的加载模式" class="headerlink" title="1.jQuery的加载模式"></a>1.jQuery的加载模式</h2><p>js中的代码要等所有DOM元素和图片加载完成后才执行，而jQuery在所有DOM元素加载完就执行不用等待其它资源加载完成。</p>
<p>原生JS如果编写了多个入口函数,后面编写的会覆盖前面的<br>jQuery中编写多个入口函数,后面的不会覆盖前面的</p>
<h3 id="2-jQuey的入口函数及其不同写法"><a href="#2-jQuey的入口函数及其不同写法" class="headerlink" title="2.jQuey的入口函数及其不同写法"></a>2.jQuey的入口函数及其不同写法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 第1种写法：</span><br><span class="line">   $(document).ready(function () &#123;</span><br><span class="line">       alert(&quot;hello jquery1&quot;)</span><br><span class="line">   &#125;)</span><br><span class="line">   &#x2F;&#x2F; 第2种写法：</span><br><span class="line">   jQuery(document).ready(function () &#123;</span><br><span class="line">       alert(&quot;hello jquery2&quot;)</span><br><span class="line">   &#125;)</span><br><span class="line">   &#x2F;&#x2F; 第3种写法：（推荐）</span><br><span class="line">   $(function () &#123;</span><br><span class="line">       alert(&quot;hello jquery3&quot;)</span><br><span class="line">   &#125;)</span><br><span class="line">   &#x2F;&#x2F; 第4种写法：</span><br><span class="line">   jQuery(function () &#123;</span><br><span class="line">       alert(&quot;hello jquery4&quot;)</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure>

<h3 id="3-访问标识符-的冲突问题"><a href="#3-访问标识符-的冲突问题" class="headerlink" title="3.访问标识符$的冲突问题"></a>3.访问标识符$的冲突问题</h3><p>jQuery使用$符号来作为选择器，如果其他的框架也通用使用$符号来作为选择器，两者产生冲突，后面引入的框架会覆盖掉前面的</p>
<p>解决方案：</p>
<p>释放$的使用权，释放之后就不能再使用$,改为使用jQuey　　　　</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jQuery.noConflict();</span><br></pre></td></tr></table></figure>

<p>可自定义一个访问符号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var jn &#x3D; jQuery.noConflict();</span><br></pre></td></tr></table></figure>

<h3 id="4-核心函数及其可接受的参数"><a href="#4-核心函数及其可接受的参数" class="headerlink" title="4.核心函数及其可接受的参数"></a>4.核心函数及其可接受的参数</h3><p><strong>核心函数：</strong>$();</p>
<p><strong>四种参数：</strong></p>
<p><strong>1）字符串选择器</strong><br>jQuery函数通过该选择器获取对应的DOM，然后将这些DOM封装成一个jQuery对象中并返回。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var $box &#x3D; $(&quot;.box&quot;);</span><br></pre></td></tr></table></figure>

<p><strong>2）DOM元素</strong><br>jQuery函数将该DOM元素封装成jQuery对象并返回</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var span &#x3D; document.genElementsByTagName(&quot;span&quot;)[0];</span><br><span class="line"></span><br><span class="line">var $span &#x3D; $(span);</span><br></pre></td></tr></table></figure>

<p><strong>3）HTML文本字符串</strong><br>jQuery函数根据传入的文本创建好HTML元素并封装成jQuery对象返回</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var $one &#x3D; $(&quot;&lt;div class&#x3D;&quot;one&quot;&gt;one&lt;&#x2F;div&gt;&quot;);</span><br></pre></td></tr></table></figure>

<p><strong>4）匿名函数</strong></p>
<p>当文档加载完毕之后jQuery函数调用匿名函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(function()&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="5-jQuery对象"><a href="#5-jQuery对象" class="headerlink" title="5.    jQuery对象"></a>5.    jQuery对象</h3><p>jQuery对象是jQuery函数的一个实例，是一个类数组对象(伪数组，具有索引-值形式和length属性），数组中存放的是DOM对象，而DOM对象是Node的实例。</p>
<p>对jQuery对象的操作实际上是对jQuery数组中的DOM对象的批量操作。jQuery对象和DOM对象可以相互转化。</p>
<p> jQuery对象的获取通常是使用选择器来获取的。比如，获取所有clss为one元素:$(“.one”);</p>
<h3 id="6-jQuery选择器"><a href="#6-jQuery选择器" class="headerlink" title="6.    jQuery选择器"></a>6.    jQuery选择器</h3><p><strong>基本选择器：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">所有选择器  *</span><br><span class="line">标签选择器  标签名</span><br><span class="line">ID选择器    #id</span><br><span class="line">类选择器    .className</span><br><span class="line">群组选择器  .one,.two   多个选择器使用**,**分隔，取并集</span><br><span class="line">复合选择器  .one.two   多个选择器组合使用，取交集</span><br></pre></td></tr></table></figure>

<p><strong>层次选择器：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">后代选择器   .one .two   </span><br><span class="line">  两个选择器使用空格隔开，表示可以获取当前元素的子代以及孙子代等等后代元素。</span><br><span class="line">子代选择器   .one&gt;.two</span><br><span class="line">  两个选择器使用&gt;隔开，表示只能获取当前选中元素的子代元素。</span><br></pre></td></tr></table></figure>

<p><strong>兄弟选择器：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下一个兄弟选择器   .one+.two</span><br><span class="line">   两个选择器使用+隔开，表示可以获取当前元素的下一个兄弟元素，下一个兄弟元素要能符合.two</span><br><span class="line">之后所有子代选择器  .one~.two</span><br><span class="line">   两个选择器使用~隔开，表示可以获取当前元素之后的所有兄弟元素，只有所有兄弟元素要能符合.two</span><br></pre></td></tr></table></figure>

<h3 id="7-jQuery过滤器"><a href="#7-jQuery过滤器" class="headerlink" title="7.jQuery过滤器"></a>7.jQuery过滤器</h3><p>jQuery的过滤器必须用在jQuery选择器后，表示对通过前面的jQuery选择器选择到的内容的过滤，建立在前面选择器已经选择到的元素的基础之上。 </p>
<p>语法：selector:过滤器</p>
<p><strong>基本过滤器：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">selector:first  获取所有已选择到的元素中的第一个元素</span><br><span class="line">selector:last   获取所有已选择到的元素中的最后一个元素</span><br><span class="line">selector:even    获取所有已选择到的元素中的索引为偶数的元素</span><br><span class="line">selector:odd     获取所有已选择到的元素中的索引为奇数的元素</span><br><span class="line">selector:eq(index) 获取所有已选择到的元素中的索引为index的元素</span><br><span class="line">selector:lt(num)   获取所有已选择到的元素中的索引值小于num的元素</span><br><span class="line">selector:gt(num)   获取所有已选择到的元素中的索引值大于num的元素</span><br><span class="line">selector1:not(selector2)  获取所有已选择到的元素中的除了selector2的元素</span><br><span class="line">selector:header   获取所有已选择到的元素中的标题元素(h1~h6)</span><br></pre></td></tr></table></figure>

<p><strong>内容过滤器：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">selector:contains(text) </span><br><span class="line">          获取所有已选择到的元素中包含指定文本text的元素</span><br><span class="line">selector:empty   </span><br><span class="line">          获取所有已选择到的元素中的空元素(没有子节点和文本)</span><br><span class="line">selector:parent  </span><br><span class="line">          获取所有已选择到的元素中的非空元素(有子节点或文本)，如$(&quot;div:parent&quot;);</span><br><span class="line">selector1:has(selector2)  </span><br><span class="line">          获取所有已选择到的元素中包含selector2的元素，如$(&quot;div:has(&#39;span&#39;)&quot;);</span><br></pre></td></tr></table></figure>

<p><strong>可见性过滤器：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">隐藏类型分两种：</span><br><span class="line"></span><br><span class="line">  1）不占据屏幕空间</span><br><span class="line">        display:none;</span><br><span class="line">        &lt;input type&#x3D;&quot;hidden&quot;&gt;	</span><br><span class="line">  2）占据屏幕空间</span><br><span class="line">        visibility:hidden;</span><br><span class="line">        opacity:0;&#x2F;&#x2F;透明度为0</span><br><span class="line">   使用：</span><br><span class="line">      :visible   选择所有占据屏幕空间的元素</span><br><span class="line">      :hidden    选择所有不占据屏幕空间的元素</span><br></pre></td></tr></table></figure>

<p><strong>属性过滤器：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">selector[attrKey]  </span><br><span class="line">         获取所有已选择到的元素中具有属性attrKey的元素</span><br><span class="line"> selector[attrKey&#x3D;attrVal]    </span><br><span class="line">         获取所有已选择到的元素中具有属性attrKey，并且属性值为attrVal的元素</span><br><span class="line"> selector[attrKey^&#x3D;attrVal]  </span><br><span class="line">         获取所有已选择到的元素中具有属性attrKey，并且属性值为以attrVal开头的元素</span><br><span class="line"> selector[attrKey$&#x3D;attrVal]  </span><br><span class="line">         获取所有已选择到的元素中具有属性attrKey，并且属性值为以attrVal结尾的元素</span><br><span class="line"> selector[attrKey*&#x3D;attrVal]  </span><br><span class="line">         获取所有已选择到的元素中具有属性attrKey，并且属性值为包含attrVal的元素</span><br><span class="line"> selector[attrKey!&#x3D;attrVal]  </span><br><span class="line">         获取所有已选择到的元素中具有属性attrKey，并且属性值不为以attrVal的元素或者没有属性attrVal的元素</span><br></pre></td></tr></table></figure>

<p><strong>后代选择器：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">selector:nth-child(index)</span><br><span class="line">      获取每个selector元素中索引为index的子元素。【注意】index从1开始</span><br><span class="line">  selector:first-child</span><br><span class="line">      获取每一个selector元素中的第一个子元素（每个父元素的第一个子元素）</span><br><span class="line">  selector:last-child</span><br><span class="line">      获取每一个selector元素中的最后一个子元素（每个父元素的最后一个子元素）</span><br><span class="line">  selector:only-child</span><br><span class="line">      获取每一个selector元素中的独生子子元素（每个父元素如果只有一个孩子元素，获取该元素）</span><br><span class="line">  selector:first-of-type</span><br><span class="line">      获取每个selector元素中每种类型子元素中的第一个</span><br><span class="line">  selector:last-of-type</span><br><span class="line">      获取每个selector元素中每种类型子元素中的最后一个</span><br></pre></td></tr></table></figure>

<p><strong>表单过滤器：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:checked    选取所有被选中的元素，用于复选框、单选框、下拉框</span><br><span class="line">  :selected   选取所有被选中的元素，该选择器只适用于&lt;option&gt;</span><br><span class="line">  :focus   选取当前获取焦点的元素</span><br><span class="line">  :text    选取所有的单行文本框(&lt;input type&#x3D;&quot;text&quot;&gt;)</span><br><span class="line">  :password  选取所有的密码框</span><br><span class="line">  :input     选取所有的&lt;input&gt;,&lt;textarea&gt;,&lt;select&gt;,&lt;button&gt;元素。</span><br><span class="line">    *注意，$(&quot;:input&quot;)是选中可以让用户输入的标签元素；而$(&quot;input&quot;)是选择名字为input的标签元素。*</span><br><span class="line">  :enable   选取所有可用元素，该选择器仅可用于支持disable属性的html元素。(&lt;button&gt;,&lt;input&gt;,&lt;optgruop&gt;,&lt;option&gt;,&lt;select&gt;,&lt;textarea&gt;)</span><br><span class="line">  :disable   选取所有不可用元素，该选择器也仅可用于支持disable属性的html元素。</span><br><span class="line">  :radio      选取所有的单选框</span><br><span class="line">  :checkbox   选取所有的多选框</span><br><span class="line">  :submit     选取所有的提交按钮</span><br><span class="line">  :image      选取所有的input类型为image的表单元素</span><br><span class="line">  :reset   选取所有的input类型为reset的表单元素</span><br><span class="line">  :button  选取所有的input类型为button的表单元素</span><br><span class="line">  :file    选取所有的input类型为file的表单元素</span><br></pre></td></tr></table></figure>

<h3 id="8-jQuery中的Dom操作"><a href="#8-jQuery中的Dom操作" class="headerlink" title="8.jQuery中的Dom操作"></a>8.jQuery中的Dom操作</h3><h4 id="8-1-查找节点"><a href="#8-1-查找节点" class="headerlink" title="8.1 查找节点"></a><strong>8.1 查找节点</strong></h4><p>通过jQuery选择器来完成</p>
<h4 id="8-2-创建节点"><a href="#8-2-创建节点" class="headerlink" title="8.2 创建节点"></a><strong>8.2 创建节点</strong></h4><p>  创建元素节点：var newTd = $(“<td></td>“)<br>  创建文本节点：var newTd = $(“<td>文本内容</td>“)</p>
<h4 id="8-3-插入节点"><a href="#8-3-插入节点" class="headerlink" title="8.3 插入节点"></a><strong>8.3 插入节点</strong></h4><p> <strong>8.3.1 内部插入</strong></p>
<p>  1) $A.<strong>append</strong>(B)<br>       将B追加到A的末尾处，作为它的最后一个子元素</p>
<pre><code>$A.**appendTo**(B)
 将A追加到B的末尾，作为它的最后一个子元素</code></pre><p>  2)  $A.<strong>prepend</strong>(B)<br>       将B追加到A的前面，作为它的第一个子元素</p>
<p>​       $A.<strong>prependTo</strong>(B)<br>​        将A追加到B的前面，作为它的第一个子元素</p>
<p> <strong>8.3.2 外部插入</strong></p>
<p>  1) $A.<strong>after</strong>(B)<br>            在A之后追加B，作为它的兄弟元素<br>       $A.<strong>insertAfter</strong>(B)<br>            在B之后追加A，作为它的兄弟元素<br>   2) $A.<strong>before</strong>(B)<br>            在A之前追加B，作为它的兄弟元素<br>       $A.<strong>insertBefore</strong>(B)<br>             在B之前追加A，作为它的兄弟元素</p>
<h4 id="8-4-删除节点"><a href="#8-4-删除节点" class="headerlink" title="8.4 删除节点"></a><strong>8.4 删除节点</strong></h4><p>   <strong>remove</strong>([selector])<br>       从DOM中删除所有匹配的元素，返回值是一个指向已经被删除的节点的引用，可以在以后再使用这些元素。<br>       该方法会移除元素，同时也会移除元素内部的一切，包括绑定的事件及与该元素相关的jQuery数据。<br>   <strong>detach</strong>([selector])<br>       与remove()类似，但是detach()保存所有jQuery数据和被移走的元素的相关联事件。<br>   <strong>empty</strong>()<br>       无参数。从DOM中清空集合中匹配元素的所有的子节点。</p>
<h4 id="8-5-复制节点"><a href="#8-5-复制节点" class="headerlink" title="8.5 复制节点"></a><strong>8.5 复制节点</strong></h4><p> $(“#id”).<strong>clone</strong>(false|true);<br>  该方法返回的是一个节点的引用</p>
<p>  参数默认为false，为浅复制，只复制元素不复制事件；<br>  参数是true时,为深复制，复制元素的同时复制元素中所绑定的事件。</p>
<h4 id="8-6-替换节点"><a href="#8-6-替换节点" class="headerlink" title="8.6 替换节点"></a><strong>8.6 替换节点</strong></h4><p>   <strong>replaceWith</strong>(newContent);<br>        用新内容替换集合中所有匹配的元素，并且返回被删除的元素的集合。<br>        该方法会删除与节点相关联的所有数据和事件处理程序。<br>   <strong>replaceAll</strong>(target);<br>        用集合的匹配元素替换每个目标元素。</p>
<h4 id="8-7-包裹节点"><a href="#8-7-包裹节点" class="headerlink" title="8.7 包裹节点"></a><strong>8.7 包裹节点</strong></h4><p>   wrap([wrappingElement])<br>        在每个匹配的元素外层包上一个html元素<br>   warpAll([wrappingElement])<br>        将所有匹配的元素用一个元素来包裹，在所有匹配元素外面包裹一层HTML结构<br>   warpInner([wrappingElement])<br>        每个匹配元素里面内容(子元素)都会被这种结构包裹</p>
<h4 id="8-8-节点遍历"><a href="#8-8-节点遍历" class="headerlink" title="8.8 节点遍历"></a><strong>8.8 节点遍历</strong></h4><p>   children([selector])<br>        用于取得匹配元素的子元素集合(只考虑子元素而不考虑任何后代元素)<br>      $(‘.content.inner’)=&gt;$(‘.content’).children(‘.inner’);<br>   find(selector)<br>        在当前对象元素中的子元素查找，和参数所匹配的所有的后代元素<br>   next([selector])<br>        取得匹配的元素集合中每一个元素紧邻的后面兄弟元素<br>   nextAll([selector])<br>        查找当前元素之后所有的同辈元素<br>   prev([selector])<br>         取得匹配元素前面紧邻的兄弟元素<br>   prevAll([selector])<br>         取得当前元素之前所有的同辈元素<br>   silibinng([selector])<br>         取得匹配元素的前后所有的兄弟元素<br>   closest(selector)<br>         取得和参数匹配的最近的元素，如果匹配不上继续向上查找父元素<br>   filter(selector)<br>         把当前所选择的所有元素再进行筛选过滤<br>   parent([selector])<br>         取得匹配元素的集合中，每个元素的父元素<br>   parents([selector])<br>         获得集合中每个匹配元素的祖先元素</p>
<h1 id="二、jQuery的API和事件"><a href="#二、jQuery的API和事件" class="headerlink" title="二、jQuery的API和事件"></a>二、jQuery的API和事件</h1><h2 id="1-静态方法和实例方法"><a href="#1-静态方法和实例方法" class="headerlink" title="1.    静态方法和实例方法"></a>1.    静态方法和实例方法</h2><p>静态方法：在类上添加的方法，通过类名调用</p>
<p>实例方法：在类的原型上添加的方法，通过类的实例调用</p>
<h2 id="2-静态方法-通过-调用"><a href="#2-静态方法-通过-调用" class="headerlink" title="2.    静态方法(通过$调用)"></a>2.    静态方法(通过$调用)</h2><h4 id="2-1-each"><a href="#2-1-each" class="headerlink" title="2.1 each()"></a>2.1 each()</h4><p>可遍历数组或伪数组（jQuery对象)，默认返回在遍历的数组，不支持在回调函数中对数组进行处理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$.each(arr,function(index,value)&#123;</span><br><span class="line">&#x2F;&#x2F;第一个参数为遍历元素的索引</span><br><span class="line">&#x2F;&#x2F;第二个参数为遍历的元素</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>原生JS的foreach()，只能遍历数组（伪数组也不行）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">arr.foreach(function(value,index)&#123;</span><br><span class="line">&#x2F;&#x2F;第一个参数为遍历的元素</span><br><span class="line">&#x2F;&#x2F;第二个参数为当前元素的索引</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="2-2-map"><a href="#2-2-map" class="headerlink" title="2.2 map()"></a>2.2 map()</h4><p>通过$调用，可遍历数组或伪数组（jQuery对象)，默认返回空数组，可生成新数组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$.map(arr,function(value,index)&#123;</span><br><span class="line">&#x2F;&#x2F;第一个参数为要遍历的数组</span><br><span class="line">&#x2F;&#x2F;第二个参数为每遍历一个元素执行的回调函数</span><br><span class="line">return value+index；</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>原生JS的map方法，只能遍历数组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">arr.map(function(value,index，array)&#123;</span><br><span class="line">&#x2F;&#x2F;第一个参数为遍历的元素</span><br><span class="line">&#x2F;&#x2F;第二个参数为当前元素的索引</span><br><span class="line">&#x2F;&#x2F;第三个参数为新数组，与当前数组的值相同</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="2-3-trim-str"><a href="#2-3-trim-str" class="headerlink" title="2.3 trim(str)"></a>2.3 trim(str)</h4><p>除去字符串两端的空格并返回一个新的字符串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var str &#x3D; &quot;     nabok       &quot;;</span><br><span class="line">var res &#x3D; $.trim(str);</span><br></pre></td></tr></table></figure>

<h4 id="2-4-isArray-obj-是否为（0真数组（伪数组为false）"><a href="#2-4-isArray-obj-是否为（0真数组（伪数组为false）" class="headerlink" title="2.4 isArray(obj) 是否为（0真数组（伪数组为false）"></a>2.4 <strong>isArray(obj)</strong> 是否为（0真数组（伪数组为false）</h4><p>​     <strong>isfunction(obj)</strong> 是否为函数</p>
<pre><code>**iswindow(obj)** 是否为window对象</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var arr &#x3D; [12,2,2];</span><br><span class="line">var res &#x3D; $.isArray(arr);</span><br></pre></td></tr></table></figure>

<h4 id="2-5-holdReady"><a href="#2-5-holdReady" class="headerlink" title="2.5 holdReady()"></a>2.5 holdReady()</h4><p>暂停或恢复ready函数的执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$.holdReady(true);&#x2F;&#x2F;暂停</span><br><span class="line">$.holdReady(false);&#x2F;&#x2F;恢复</span><br></pre></td></tr></table></figure>

<h2 id="3-jQuery中常用的API"><a href="#3-jQuery中常用的API" class="headerlink" title="3.    jQuery中常用的API"></a>3.    jQuery中常用的API</h2><h3 id="1-属性和属性节点"><a href="#1-属性和属性节点" class="headerlink" title="1. 属性和属性节点"></a>1. 属性和属性节点</h3><p>属性：对象中保存的变量，通过    对象.属性名或对象[“属性名”]    设置或获取</p>
<p>属性节点：HTML标签中（DOM对象）的属性，位于标签下的attributes属性中，setAttributes(“”,””)设置，getAttributes(“”)获取</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;属性节点</span><br><span class="line">  attr(name|properties|key,value|fn)</span><br><span class="line">      一个参数时，返回第一个元素中指定节点的值</span><br><span class="line">      两个参数时，设置所有找到元素中指定节点的值，若不存在该节点则添加</span><br><span class="line">  removeAttr(attributeName)</span><br><span class="line">      删除所有找到元素的指定节点,多个节点以空格分隔 	  </span><br><span class="line">&#x2F;&#x2F;属性 </span><br><span class="line">  prop(name|properties|key,value|fn)</span><br><span class="line">  removeProp(propertyName)</span><br><span class="line">  与上面的方法相似</span><br></pre></td></tr></table></figure>

<h3 id="2-类操作"><a href="#2-类操作" class="headerlink" title="2. 类操作"></a>2. 类操作</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;添加类   多个类名空格隔开</span><br><span class="line">       addClass(className)</span><br><span class="line">     	  $(&quot;p&quot;).addClass(&quot;selected1 selected2&quot;);</span><br><span class="line">&#x2F;&#x2F;判断有没有指定的类，有，返回true，否则返回false   </span><br><span class="line">       hasClass(className)</span><br><span class="line">&#x2F;&#x2F;删除类   </span><br><span class="line">       removeClass(className)</span><br><span class="line">&#x2F;&#x2F;切换类	有则删除，没有则添加</span><br><span class="line">	  toggleClass(className)</span><br></pre></td></tr></table></figure>

<h3 id="3-文本值操作"><a href="#3-文本值操作" class="headerlink" title="3.文本值操作"></a>3.文本值操作</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">html() 与原生js中的innerHTML一样</span><br><span class="line">   无参：获取html的值</span><br><span class="line">   有参数html：设置html的值</span><br><span class="line">  	 $(&quot;div&quot;).html(&quot;&lt;p&gt;mememe&lt;&#x2F;p&gt;&quot;);</span><br><span class="line">text() 与原生js中的innerText一样</span><br><span class="line">   无参：获取文本值</span><br><span class="line">   有参数text：设置文本值</span><br><span class="line">val()</span><br><span class="line">   无参：获取value的值</span><br><span class="line">   有参数value：设置value的值</span><br></pre></td></tr></table></figure>

<h3 id="4-样式操作"><a href="#4-样式操作" class="headerlink" title="4.样式操作"></a>4.样式操作</h3><p><strong>4.1    设置DOM元素的CSS样式</strong><br>        css(name|pro|[,val|fn]) </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">逐个设置</span><br><span class="line">$(&quot;div&quot;).css(&quot;width&quot;,&quot;100px&quot;);</span><br><span class="line">链式设置(不超过3次)</span><br><span class="line">$(&quot;div&quot;).css(&quot;width&quot;,&quot;100px&quot;).css(&quot;height&quot;,&quot;100px&quot;);</span><br><span class="line">批量设置</span><br><span class="line">$(&quot;div&quot;).css(&#123;</span><br><span class="line">width: &quot;100px&quot;,</span><br><span class="line">height: &quot;100px&quot;</span><br><span class="line">&#125;);</span><br><span class="line">获取样式值</span><br><span class="line">$(&quot;div&quot;).css(&quot;width&quot;);</span><br></pre></td></tr></table></figure>

<p><strong>4.2    位置</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">offset([coordinates]) </span><br><span class="line">position() </span><br><span class="line">scrollTop([val]) </span><br><span class="line">scrollLeft([val])</span><br></pre></td></tr></table></figure>

<p><strong>4.3    尺寸</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">heigh([val|fn]) </span><br><span class="line">width([val|fn]) </span><br><span class="line">innerHeight() </span><br><span class="line">innerWidth() </span><br><span class="line">outerHeight([soptions]) </span><br><span class="line">outerWidth([options])</span><br></pre></td></tr></table></figure>

<h3 id="5-jQuery中的工具方法"><a href="#5-jQuery中的工具方法" class="headerlink" title="5.    jQuery中的工具方法"></a>5.    jQuery中的工具方法</h3><p> <strong>1) get()</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;以数组的形式返回DOM节点，get(index)返回获取到的元素中第index个（从0开始）元素,dom本身</span><br><span class="line">$(&#39;div&#39;).get();</span><br></pre></td></tr></table></figure>

<p> <strong>2) toArray()</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;返回一个包含jQuery对象中的所有DOM元素数组。</span><br><span class="line">$(&#39;div&#39;).toArray();</span><br></pre></td></tr></table></figure>

<p><strong>3) eq(index)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;eq()，返回获取到的元素中第index个（从0开始）元素的jQuery对象</span><br><span class="line">$(&#39;div&#39;).eq(1);</span><br></pre></td></tr></table></figure>

<p>  <strong>4) filter(function(index,item){})</strong>;   //过滤器函数，返回jQuery对象。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var $result &#x3D; $(&#39;div&#39;).filter(function(index,item)&#123;</span><br><span class="line"> 	return index &#x3D;&#x3D; 2;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p> <strong>5) map(function(index,item){})</strong>    //用于获取或设置元素集合中的值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var $result &#x3D; $(&#39;div&#39;).map(function(index,item)&#123;</span><br><span class="line">    return $(item).html();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>6) each(function(index,item){})</strong>  //遍历一个jQuery对象。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;div&#39;).each(function(index,item)&#123;</span><br><span class="line">   console.log(index,&#39;--&#39;,item);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>7)index()</strong>    //返回当前元素在兄弟节点中的位置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var index &#x3D; $(&quot;this&quot;).index();</span><br></pre></td></tr></table></figure>

<p><strong>8)sibilngs()</strong>    //返回非当前元素的所有兄弟节点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var others &#x3D; $(this).siblings();</span><br></pre></td></tr></table></figure>

<h2 id="4-jQuery的事件"><a href="#4-jQuery的事件" class="headerlink" title="4.    jQuery的事件"></a>4.    jQuery的事件</h2><h3 id="4-1-事件的绑定和解绑"><a href="#4-1-事件的绑定和解绑" class="headerlink" title="4.1    事件的绑定和解绑"></a>4.1    事件的绑定和解绑</h3><p><strong>事件绑定</strong>（在一个元素上可以添加多个相同或不同的事件，不会覆盖）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.eventName(fn)	事件有智能提示，是jQuery已实现的部分事件</span><br><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">2.on(eventName,fn)	字符串形式，可以添加所有js事件</span><br><span class="line">$(&quot;button&quot;).on(&quot;click&quot;,function()&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>事件解绑</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">off()</span><br><span class="line">      移除一个事件处理函数,无参表示移除所有事件，一个参数表示移除所有指定类型的事件，两个参表示移除指定类型的指定事件</span><br><span class="line">      $(&quot;button&quot;).off();</span><br></pre></td></tr></table></figure>

<h3 id="4-2-事件冒泡和默认行为"><a href="#4-2-事件冒泡和默认行为" class="headerlink" title="4.2    事件冒泡和默认行为"></a>4.2    事件冒泡和默认行为</h3><p>事件冒泡：发生在子元素的事件会传递给其父元素，从而父元素的相同事件也会触发，比如点击子元素则在父元素绑定的点击事件也会触发。</p>
<p>阻止事件冒泡:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在子元素添加：</span><br><span class="line">1.return false;</span><br><span class="line">2.event.stopPropagation();</span><br></pre></td></tr></table></figure>

<p>默认行为：一些标签的默认事件，比如点击a标签会默认跳转，submit按钮默认提交</p>
<p>阻止默认行为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在标签的绑定事件中：</span><br><span class="line">1.return false;</span><br><span class="line">2.event.preventDefaut();</span><br></pre></td></tr></table></figure>

<h3 id="4-3-事件自动触发"><a href="#4-3-事件自动触发" class="headerlink" title="4.3    事件自动触发"></a>4.3    事件自动触发</h3><p><strong>trigger()</strong>或<strong>triggerHandler()</strong><br>      自动触发匹配元素所有指定的事件类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&quot;.father&quot;).click(function()&#123;</span><br><span class="line">alert(&quot;123&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">$(&quot;.father&quot;).triggle(&quot;click&quot;);</span><br><span class="line">&#x2F;&#x2F;trigger()会触发事件冒泡和默认行为，而triggerHandler()不会触发事件冒泡或默认行为</span><br><span class="line">&#x2F;&#x2F;a标签比较特殊，如果想同时触发a的事件和默认行为，推荐在a中添加span标签并将事件绑定给他</span><br></pre></td></tr></table></figure>

<h3 id="4-4-自定义事件"><a href="#4-4-自定义事件" class="headerlink" title="4.4    自定义事件"></a>4.4    自定义事件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">两个条件：</span><br><span class="line">1.事件通过on形式绑定。</span><br><span class="line">2.通过triggle自动触发</span><br></pre></td></tr></table></figure>

<h3 id="4-5-事件命名空间"><a href="#4-5-事件命名空间" class="headerlink" title="4.5    事件命名空间"></a>4.5    事件命名空间</h3><p>给事件打上标签，可以只触发相同事件的某一个</p>
<p>注意：triggle调用带命名空间的子元素事件时，会触发父元素带相同命名空间的事件，调用不带命名空间的子元素事件时，会触发父元素所有相同类型的事件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">两个条件：</span><br><span class="line">1.事件通过on形式绑定。</span><br><span class="line">2.通过triggle或triggleHandler自动触发</span><br><span class="line">$(&quot;button&quot;).on(&quot;click.kj&quot;,function()&#123;&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="4-6-事件委托"><a href="#4-6-事件委托" class="headerlink" title="4.6    事件委托"></a>4.6    事件委托</h3><p>delegate(),将事件绑定到已有元素，由该元素触发事件并将结果反馈给指定元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jQuery代码在所有dom元素加载完成就执行，因此动态创建的元素不能响应相应的事件，可采用事件委托解决(事件冒泡原理)</span><br><span class="line">$(&quot;ul&quot;).delegate(&quot;li&quot;,&quot;ckick&quot;,function()&#123;&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="4-7-事件分类"><a href="#4-7-事件分类" class="headerlink" title="4.7    事件分类"></a>4.7    事件分类</h3><h3 id="4-7-1-鼠标事件"><a href="#4-7-1-鼠标事件" class="headerlink" title="4.7.1    鼠标事件"></a>4.7.1    鼠标事件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">click()  单击</span><br><span class="line">dblclick()  双击</span><br><span class="line">hover()   悬停</span><br><span class="line">mousedown()  按下</span><br><span class="line">mouseup()  抬起</span><br><span class="line">mouseenter()  移入  不支持子元素</span><br><span class="line">mouseleave()  离开  不支持子元素 </span><br><span class="line">mouseout()   离开  支持子元素</span><br><span class="line">mouseover()  进入  支持子元素 （即移入子元素时会依次触发父元素的移出移入事件）</span><br><span class="line">mousemove()  移动</span><br></pre></td></tr></table></figure>

<h3 id="4-7-2-键盘事件"><a href="#4-7-2-键盘事件" class="headerlink" title="4.7.2    键盘事件"></a>4.7.2    键盘事件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">keypress()   按键按下</span><br><span class="line">keyup()   按键抬起</span><br><span class="line">keydown()   按键按下</span><br></pre></td></tr></table></figure>

<h3 id="4-7-3-表单事件"><a href="#4-7-3-表单事件" class="headerlink" title="4.7.3    表单事件"></a>4.7.3    表单事件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">focus()  聚焦事件</span><br><span class="line">blur()    失去焦点事件</span><br><span class="line">change()  当元素的值发生改变时激发的事件</span><br><span class="line">select()  当textarea或文本类型的input元素中的文本被选择时触发的事件</span><br><span class="line">submit()  表单提交事件，绑定在form上</span><br></pre></td></tr></table></figure>

<h2 id="5-jQuery动画"><a href="#5-jQuery动画" class="headerlink" title="5.    jQuery动画"></a>5.    jQuery动画</h2><h3 id="5-1-展开收起动画"><a href="#5-1-展开收起动画" class="headerlink" title="5.1    展开收起动画"></a>5.1    展开收起动画</h3><h3 id="5-2-折叠下拉动画"><a href="#5-2-折叠下拉动画" class="headerlink" title="5.2    折叠下拉动画"></a>5.2    折叠下拉动画</h3><h3 id="5-3-谈入谈出动画"><a href="#5-3-谈入谈出动画" class="headerlink" title="5.3    谈入谈出动画"></a>5.3    谈入谈出动画</h3><h3 id="5-4-自定义动画"><a href="#5-4-自定义动画" class="headerlink" title="5.4    自定义动画"></a>5.4    自定义动画</h3><h1 id="三-jQuery原理（设计模式）"><a href="#三-jQuery原理（设计模式）" class="headerlink" title="三     jQuery原理（设计模式）"></a>三     jQuery原理（设计模式）</h1><p>封装自己的jquery框架</p>
<h2 id="1-jQery入口函数"><a href="#1-jQery入口函数" class="headerlink" title="1.    jQery入口函数"></a>1.    jQery入口函数</h2><h3 id="1-1-jQuery的基本结构"><a href="#1-1-jQuery的基本结构" class="headerlink" title="1.1     jQuery的基本结构"></a>1.1     jQuery的基本结构</h3><p>本质上是一个立即执行函数（即闭包），闭包可避免多框架变量名污染，通过window.xxx = xxx的形式暴露内部变量给外界，传递window实参的目的是方便后期压缩代码，提升查找效率，形参undefined的作用是方便压缩代码，兼容低版本IE浏览器，保障内部使用undefined不被修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(function(window,undefined)&#123;</span><br><span class="line">	var njQuery &#x3D; function()&#123;</span><br><span class="line">		return new njQuery.prototype.init();</span><br><span class="line">	&#125;</span><br><span class="line">	njQuery.prototype &#x3D; &#123;</span><br><span class="line">		constructor: njQuery</span><br><span class="line">	&#125;</span><br><span class="line">	njQuery.prototype.init.prototype &#x3D; njQuery.prototype;</span><br><span class="line">	window.njQuery &#x3D; window.$ &#x3D; njQuery;</span><br><span class="line">&#125;)(window);</span><br></pre></td></tr></table></figure>

<h3 id="1-2-入口函数的返回值"><a href="#1-2-入口函数的返回值" class="headerlink" title="1.2    入口函数的返回值"></a>1.2    入口函数的返回值</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.传入 &#39;&#39; null undefined NaN  0  false</span><br><span class="line">	返回空jQuery对象</span><br><span class="line">2.字符串:</span><br><span class="line">    html代码片段：会将创建好的DOM元素存储到jQuery对象中返回</span><br><span class="line">    选择器: 将找到的所有元素存储到jQuery对象中返回</span><br><span class="line">3.传入数组(真&#x2F;伪)</span><br><span class="line">	将数组中存储的元素依次存储到jQuery对象中返回</span><br><span class="line">4.除上述类型以外(对象、DOM元素、基本数据类型)</span><br><span class="line">    将传入的数据存储到jQuery对象中返回</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">str.charAt() --字符串的第几位字符</span><br><span class="line">children()	--	所选元素的下一级元素</span><br><span class="line">trim() -- 去除字符串的前后空格</span><br><span class="line">arr.replace(,) -- 替代</span><br><span class="line">push() -- 复制</span><br><span class="line">slice() -- 截取</span><br><span class="line">apply(),call() -- 强制修改方法内部的this</span><br><span class="line">	call(对象，[参数1，参数2……])</span><br><span class="line">	apply(对象，[数组])</span><br><span class="line">真伪数组的转换</span><br><span class="line">对方法分类管理，提高维护性extend()</span><br><span class="line">监听DOM元素是否加载完成</span><br><span class="line">	onload事件--等到DOM元素和资源加载完成才执行</span><br><span class="line">	DOMContentLoaded事件 -- 等到DOM元素加载完毕就执行</span><br><span class="line">	onreadystatechange事件 -- document.readyState变化事件（4次）</span><br><span class="line">	addEventListener(&quot;事件&quot;,fn())</span><br></pre></td></tr></table></figure>

<h3 id="1-3-原型上的属性"><a href="#1-3-原型上的属性" class="headerlink" title="1.3    原型上的属性"></a>1.3    原型上的属性</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jquery: &quot;1.1.0&quot;,	&#x2F;&#x2F;jQ版本号</span><br><span class="line">selector: &quot;&quot;,	&#x2F;&#x2F;实例默认的选择器取值</span><br><span class="line">length: 0,	&#x2F;&#x2F;实例默认的长度</span><br><span class="line">push: [].push,	&#x2F;&#x2F;给实例添加新元素</span><br><span class="line">sort: [].sort,	&#x2F;&#x2F;对实例中的元素进行排序</span><br><span class="line">splice: [].splice,	&#x2F;&#x2F;按照指定下标指定数量删除元素，也可以替换删除的元素</span><br></pre></td></tr></table></figure>

<h3 id="1-4-原型上的核心方法"><a href="#1-4-原型上的核心方法" class="headerlink" title="1.4    原型上的核心方法"></a>1.4    原型上的核心方法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">toArray 把实例转换为数组返回</span><br><span class="line">get  获取指定下标的元素，获取的是原生DOM</span><br><span class="line"></span><br><span class="line">eq 获取指定下标的元素，获取的是jQuery类型的实例对象</span><br><span class="line">first 获取实例中的第一个元素，是jQuery类型的实例对象</span><br><span class="line">last 获取实例中的最后一个元素，是jQuery类型的实例对象</span><br><span class="line"></span><br><span class="line">each 遍历实例，把遍历到的数据传给回调使用（工具方法与对象方法，返回原数据，this指向value）</span><br><span class="line">map  遍历实例，把遍历到的数据传给回调使用，然后把回调的返回值收集起来组成一个新的数组返回</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>git学习</title>
    <url>/%E7%AC%94%E8%AE%B0/git%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="廖雪峰Git教程学习笔记"><a href="#廖雪峰Git教程学习笔记" class="headerlink" title="廖雪峰Git教程学习笔记"></a>廖雪峰Git教程学习笔记</h2><h4 id="一-Git简介"><a href="#一-Git简介" class="headerlink" title="一.Git简介"></a>一.Git简介</h4><p>Git是目前世界上最先进的分布式版本控制系统（没有之一）。<br>版本控制系统：自动记录跟踪每次文件的改动，作一个文件快照，形成一个版本。<br>分布式版本控制系统：每个人电脑里都有完整的版本库，不必联网，中央服务器主要用于交换团队的修改。  </p>
<p>如：Mercurial、Bazaar、BitKeeper、Git  </p>
<p>集中式的版本控制系统：版本库是集中存放在中央服务器，必须联网才能工作。  </p>
<p>如：CVS、SVN  </p>
<p>历史：linux之父为了更好的管理他自己的开源项目linux系统而自己用C语言开发的分布式版本控制系统Git</p>
<h4 id="二-Git安装"><a href="#二-Git安装" class="headerlink" title="二.Git安装"></a>二.Git安装</h4><ul>
<li>Linux上安装</li>
</ul>
<p>1.判断是否已安装Git</p>
<pre><code>$ git</code></pre><p>2.否则</p>
<pre><code>Debian或Ubuntu Linux：
sudo apt-get install git
或
sudo apt-get install git-core（旧）</code></pre><p>其他：<br>从Git官网下载源码，解压，依次执行</p>
<pre><code>./config
make
sudo make install</code></pre><ul>
<li>Windows上安装Git</li>
</ul>
<p>1.从Git官网下载安装程序,直接安装（或<span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vZ2l0LWluc3RhbGxlci9naXQtZm9yLXdpbmRvd3PvvIk=" title="https://gitee.com/git-installer/git-for-windows）">https://gitee.com/git-installer/git-for-windows）<i class="fa fa-external-link"></i></span><br>2.配置</p>
<pre><code>$ git config --global user.name &quot;Your Name&quot;//名字
$ git config --global user.email &quot;email@example.com&quot;//邮箱</code></pre><h4 id="三-创建版本库-repository-仓库-目录"><a href="#三-创建版本库-repository-仓库-目录" class="headerlink" title="三.创建版本库(repository/仓库/目录)"></a>三.创建版本库(repository/仓库/目录)</h4><p>1.选择一个合适的地方，创建一个空目录</p>
<pre><code>$ mkdir learngit    //创建一个空文件夹（如果你使用Windows系统，为了避免遇到各种莫名其妙的问题，请确保目录名（包括父目录）不包含中文。）
$ cd learngit    //移动到新文件夹
$ pwd    //显示当前位置的路径</code></pre><p>2.初始化目录，将其变成Git可以管理的仓库</p>
<pre><code>$ git init    //初始化
$ git ls -ah     //罗列目录下的文件</code></pre><p>成功会自动创建.git文件夹，Git用来跟踪管理版本库<br>所有的版本控制系统只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等<br>无法跟踪图片、视频、Word等二进制文件的变化<br>Windows自带记事本的文本文件开头有个0xefbbbf，可能编译错误，不推荐</p>
<h4 id="四-把文件添加到版本库-文件在同一文件夹"><a href="#四-把文件添加到版本库-文件在同一文件夹" class="headerlink" title="四.把文件添加到版本库(文件在同一文件夹)"></a>四.把文件添加到版本库(文件在同一文件夹)</h4><p>1.把文件添加到仓库</p>
<pre><code>$ git add file    //反复多次使用，添加多个文件，把文件修改添加到暂存区</code></pre><p>2.把文件提交到仓库</p>
<pre><code>$ git commit -m &quot;description&quot;    //一次提交，把暂存区的所有内容提交到当前分支</code></pre><h4 id="五-穿梭功能"><a href="#五-穿梭功能" class="headerlink" title="五.穿梭功能"></a>五.穿梭功能</h4><p>1.基本概念<br>工作区（Working Directory）：存在文件的目录<br>版本库（Repository）：.git文件夹<br>暂存区（stage或index）：<br>分支（branch）：<br>master分支：Git自动创建的唯一一个主分支<br>commit id：版本号<br>HEAD：表示当前版本 HEAD^：上一个版本 HEAD^^：上上一个版本 ……  HEAD~100：上100个版本</p>
<pre><code>$ git status    //查看仓库当前的状态
$ git diff file    //查看已修改未提交内容与最新版本的不同</code></pre><p>2.版本回退</p>
<pre><code>$ git log或$ git log --pretty=oneline    //显示从最近到最远的提交日志
$ git reset --hard HEAD^    //回退到上一个版本
$ git reset --hard 1094a    //回到1094adb...版本0
$ git reflog    //查看命令日志</code></pre><p>原理：Git在内部有个指向当前版本的HEAD指针，当你回退版本的时候，Git仅仅是把HEAD从指向该版本号并更新工作区的文件</p>
<p>3.管理修改<br>每次修改，如果不用git add到暂存区，那就不会加入到commit中。</p>
<pre><code>git diff HEAD -- file    //查看工作区和版本库里面最新版本的区别.</code></pre><p>4.撤销修改<br>人工修改</p>
<pre><code>$ git checkout -- file    //丢弃工作区的修改
$ git reset HEAD &lt;file&gt;    //撤销暂存区的修改</code></pre><p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout – file。</p>
<p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。</p>
<p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，进行版本回退，不过前提是没有推送到远程库。<br>5.删除文件</p>
<pre><code>$ rm file    //删除文件管理器的文件
$ git rm file    //从版本库中删除文件
$ git checkout -- file。//恢复错删文件</code></pre><h4 id="六-远程仓库"><a href="#六-远程仓库" class="headerlink" title="六.远程仓库"></a>六.远程仓库</h4><p>Github–&gt;Git远程仓库</p>
<h5 id="SSH加密："><a href="#SSH加密：" class="headerlink" title="SSH加密："></a>SSH加密：</h5><p>1.创建SSH Key</p>
<pre><code>$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code></pre><p>2.登陆GitHub，打开“Account settings”，“SSH Keys”页面，<br>点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容</p>
<h5 id="添加远程库："><a href="#添加远程库：" class="headerlink" title="添加远程库："></a>添加远程库：</h5><p>1.Github上创建repository<br>2.本地仓库关联github的远程库<br>$ git remote add origin <span class="exturl" data-url="bWFpbHRvOmdpdEBnaXRodWIuY29t" title="mailto:git@github.com">git@github.com<i class="fa fa-external-link"></i></span>:用户名/远程仓库名.git<br>3.把本地仓库的内容推送到GitHub仓库<br>$ git push -u origin master<br>4.推送最新修改<br>$ git push origin master</p>
<h5 id="克隆远程库"><a href="#克隆远程库" class="headerlink" title="克隆远程库"></a>克隆远程库</h5><p>1.确定Github上repository的地址<br>2.克隆远程库到本地</p>
<pre><code>$ git clone git@github.com:用户名/仓库名.git</code></pre><h4 id="七-分支管理"><a href="#七-分支管理" class="headerlink" title="七.分支管理"></a>七.分支管理</h4><p>每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。<br>一开始，只有一条时间线，在Git里，这个分支叫主分支，即master分支。<br>HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支<br>一开始的时候，master分支是一条线，Git用master指向最新的提交，再用HEAD指向master，就能确定当前分支，以及当前分支的提交点：<br>每次提交，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长。<br>当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev上：<br>不过，从现在开始，对工作区的修改和提交就是针对dev分支了，比如新提交一次后，dev指针往前移动一步，而master指针不变<br>假如我们在dev上的工作完成了，就可以把dev合并到master上。Git怎么合并呢？最简单的方法，就是直接把master指向dev的当前提交，就完成了合并</p>
<h5 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h5><p>1.创建分支</p>
<pre><code>$ git checkout -b dev

或
$ git branch dev    //创建分支
$ git checkout dev    //切换分支

$ git branch    //查看分支</code></pre><p>2.修改文件后切换回master分支</p>
<pre><code>$ git checkout master</code></pre><p>3.把dev分支的工作成果合并到master分支上</p>
<pre><code>$ git merge dev</code></pre><p>4.删除dev分支</p>
<pre><code>$ git branch -d dev</code></pre><h5 id="解决分支冲突"><a href="#解决分支冲突" class="headerlink" title="解决分支冲突"></a>解决分支冲突</h5><p>分支冲突：要合并的分支在同一提交点上有不同的修改<br>解决方法：把Git合并失败的文件手动编辑为我们希望的内容，再提交。</p>
<pre><code>$ git status    //可查看冲突文件
$ git log --graph --pretty=oneline --abbrev-commit //查看分支合并图</code></pre><h5 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h5><pre><code>$ git merge --no-ff -m &quot;merge with no-ff&quot; dev 

//强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，从分支历史上就可以看出分支信息</code></pre><p>通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。</p>
<p>如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。</p>
<p>下面实战一下–no-ff方式的git merge：</p>
<p>首先，仍然创建并切换dev分支：</p>
<pre><code>$ git checkout -b dev
Switched to a new branch &apos;dev&apos;</code></pre><p>修改readme.txt文件，并提交一个新的commit：</p>
<pre><code>$ git add readme.txt 
$ git commit -m &quot;add merge&quot;</code></pre><p>切换回master：</p>
<pre><code>$ git checkout master
Switched to branch &apos;master&apos;</code></pre><p>合并dev分支，注意–no-ff参数，表示禁用Fast forward：</p>
<pre><code>$ git merge --no-ff -m &quot;merge with no-ff&quot; dev</code></pre><p>因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。</p>
<h5 id="分支策略"><a href="#分支策略" class="headerlink" title="分支策略"></a>分支策略</h5><p>master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；<br>干活都在dev分支上，也就是说，dev分支是不稳定的。<br>到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本<br>团队每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并</p>
<h6 id="BUG分支"><a href="#BUG分支" class="headerlink" title="BUG分支"></a>BUG分支</h6><p>每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除</p>
<pre><code>$ git stash        //把当前工作现场“储藏”起来，等以后恢复现场后继续工作
或
$ git stash apply stash@{0}        //恢复指定的stash
$ git stash list    //查看已存放的工作现场

$ git stash apply    //恢复工作现场
$ git stash drop    //删除stash内容
或
$ git stash pop        //恢复并删除stash内容</code></pre><h6 id="Feature分支"><a href="#Feature分支" class="headerlink" title="Feature分支"></a>Feature分支</h6><p>开发一个新feature，最好新建一个分支；<br>如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除</p>
<h6 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h6><pre><code>$ git remote    //查看远程库的信息
$ git remote -v        //示更远程库详细的信息</code></pre><h6 id="推送分支"><a href="#推送分支" class="headerlink" title="推送分支"></a>推送分支</h6><p>把某分支上的所有本地提交推送到远程库。<br>推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上</p>
<pre><code>$ git push origin master</code></pre><p>推送原则：<br>master分支是主分支，因此要时刻与远程同步；</p>
<p>dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</p>
<p>bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；</p>
<p>feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。</p>
<h6 id="抓取分支"><a href="#抓取分支" class="headerlink" title="抓取分支."></a>抓取分支.</h6><pre><code>$ git clone git@github.com:michaelliao/learngit.git    //克隆，只有master分支
$ git checkout -b dev origin/dev    //创建与远程origin的相应的分支</code></pre><p>当其他人已推送的的最新提交和你试图推送的提交有冲突，往往推送失败<br>解决方法：先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送</p>
<pre><code>$ git branch --set-upstream-to=origin/dev dev    //指定本地dev分支与远程origin/dev分支的链接
$ git pull    //抓取分支</code></pre><h5 id="多人协作流程："><a href="#多人协作流程：" class="headerlink" title="多人协作流程："></a>多人协作流程：</h5><p>查看远程库信息，使用git remote -v；</p>
<p>本地新建的分支如果不推送到远程，对其他人就是不可见的；</p>
<p>从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；</p>
<p>在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；</p>
<p>建立本地分支和远程分支的关联，使用git branch –set-upstream branch-name origin/branch-name；</p>
<p>从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。</p>
<h5 id="Rebase"><a href="#Rebase" class="headerlink" title="Rebase"></a>Rebase</h5><p>把分叉的提交历史“整理”成一条直线，看上去更直观，但本地的分叉提交已经被修改过了</p>
<pre><code>$ git rebase    //把本地未push的分叉提交历史整理成直线</code></pre><h4 id="八-标签管理"><a href="#八-标签管理" class="headerlink" title="八.标签管理"></a>八.标签管理</h4><p>发布一个版本时，我们通常先在版本库中打一个标签（tag），<br>这样，就唯一确定了打标签时刻的版本。<br>将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。<br>所以，标签也是版本库的一个快照，实质上也是指向某个commit的指针，但不能移动</p>
<h5 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h5><p>切换到需要打标签的分支，敲命令git tag <name>就可以打一个新标签</p>
<pre><code>$ git tag    //查看所有标签，按字母排序的
$ git tag v0.9 f52c633    //给指定commit id打标签
$ git tag -a v0.1 -m &quot;version 0.1 released&quot; 1094adb        //创建带有说明的标签
$ git show &lt;tagname&gt;    //查看标签信息</code></pre><h5 id="操作标签"><a href="#操作标签" class="headerlink" title="操作标签"></a>操作标签</h5><pre><code>$ git tag -d v0.1    //删除本地标签
git push origin &lt;tagname&gt;    //推送某个标签到远程
$ git push origin --tags    //一次性推送全部尚未推送到远程的本地标签

$ git tag -d v0.9
$ git push origin :refs/tags/v0.9    //删除远程标签</code></pre>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>李立超JS视频教程学习笔记</title>
    <url>/%E7%AC%94%E8%AE%B0/%E6%9D%8E%E7%AB%8B%E8%B6%85JS%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="李立超JS视频教程学习笔记（持续更新）"><a href="#李立超JS视频教程学习笔记（持续更新）" class="headerlink" title="李立超JS视频教程学习笔记（持续更新）"></a>李立超JS视频教程学习笔记（持续更新）</h2><h3 id="001-简介"><a href="#001-简介" class="headerlink" title="001 简介"></a>001 简介</h3><p>1.95年诞生，Netscape创建，用于网页的前端验证；<br>2.同年，微软创建JScript；<br>3.制定统一标准ECMAScript<br>4.标准的实现称为JS引擎，如Chrome的v8引擎<br>5.JavaScript包括ECMAScript,DOM,BOM<br>6.特点：</p>
<ul>
<li>解释型语言（不用编译，直接运行）</li>
<li>类似于C和JAVA的语法结构</li>
<li>动态语言</li>
<li>基于原型的面向对象</li>
</ul>
<h3 id="002-Hello"><a href="#002-Hello" class="headerlink" title="002 Hello"></a>002 Hello</h3><p>三条输出语句</p>
<pre><code>alert(&quot;Hello World!&quot;);
document.write(&quot;我的第一行JS代码！&quot;);
console.log(&quot;写入到开发者控制台&quot;);  </code></pre><h3 id="003-代码编写位置"><a href="#003-代码编写位置" class="headerlink" title="003 代码编写位置"></a>003 代码编写位置</h3><p>JS代码编写位置<br>1.<code>&lt;script&gt;&lt;/script&gt;</code>标签中，可写多个；<br>2.外部文件.js中,<code>&lt;script src=&quot;&quot;&gt;&lt;/script&gt;</code>引入，标签内不能再编写代码，不执行；<br>3.HTML标签的onclick属性中，点击后代码才会执行；<br>4.超链接&lt;a&gt;的href属性中,点击超链接将执行代码，href=”javascript: “;  </p>
<p>(位置3、4 结构与行为耦合，不方便维护，不推荐）</p>
<h3 id="004-基本语法"><a href="#004-基本语法" class="headerlink" title="004 基本语法"></a>004 基本语法</h3><p>1.注释 （查看、维护、合作、简单调试）</p>
<pre><code>单行注释  //
多行注释  /*

           */
或
/*
*
*
*/</code></pre><p>2.严格区分大小<br>3.每一条语句以分号 ; 结尾，可不用但会浪费系统资源甚至可能出错，不推荐<br>4.自动忽略多个空格和换行，以此对代码进行格式化，美观</p>
<h3 id="005-字面量和变量"><a href="#005-字面量和变量" class="headerlink" title="005 字面量和变量"></a>005 字面量和变量</h3><p>1.字面量：<br>一些不可改变的值，如1，2，1693587469695等<br>可以直接使用，但一般不会直接使用，麻烦<br>2.变量 ：<br>可以用来保存字面量，其值可以任意改变，通过变量名对字面量进行描述，方便使用<br>声明变量 var a；(variable)<br>赋值a = 0226;<br>var a = 0226;</p>
<h3 id="006-标识符"><a href="#006-标识符" class="headerlink" title="006 标识符"></a>006 标识符</h3><p>标识符：js中所有可以自主命名的都可以称为标识(zhi)符，例如变量名，函数名，属性名……  </p>
<p>命名规则：<br>1.标识符中可以含有字母、数字、_、$<br>2.不能以数字开头<br>3.不能是ES中的关键字或保留字，如var,if…（皇帝名）<br>4.一般采用驼峰命名法-首字母小写，每个单词开头字母大写，其余字母小写-<br>5.JS底层保存标识符时采用Unicode编码即utf-8，理论上可用utf-8中所有内容命名，包括中文，但一般不用</p>
<h3 id="007-010-数据类型和基本数据类型"><a href="#007-010-数据类型和基本数据类型" class="headerlink" title="007-010 数据类型和基本数据类型"></a>007-010 数据类型和基本数据类型</h3><p>1.数据类型指的就是字面量的类型<br>2.JS中共有六种数据类型：</p>
<pre><code>String         字符串
Number     数值
Boolean     布尔值
Null            空值
Undefined 未定义
Object        对象</code></pre><p>其中String、Number、Boolean、Null、Undefined属于基本数据类型，而Object属于引用数据类型。</p>
<h4 id="字符串String"><a href="#字符串String" class="headerlink" title="字符串String"></a>字符串String</h4><p>使双引号或单引号引起来<br>不能混着用，不能自我嵌套，但可互相嵌套<br>在字符串中可以使用\作为转义字符，本身\可用\表示<br>&quot; 表示”<br>\n 换行<br>\t  制表符</p>
<h4 id="数值Number"><a href="#数值Number" class="headerlink" title="数值Number"></a>数值Number</h4><p>所有数值都是Number类型，整数和浮点数<br>运算符typeof检查变量类型，语法：typeof 变量名<br>数的最大值:Number.MAX_VALUE，相当于常量1.7697691348623157e+308；Number.MIN_VALUE表示大于0的最小值，相当于5e-324<br>比Number.MAX-VALUE大的数值会返回Infinity字面量表示无穷大，不是数值则返回NaN即Not A Number（非法数字）<br>在JS中整数的运算基本可以保证准确，但浮点运算可能得到一个不准确的结果（二进制本身的问题，所有语言都存在，但目前JS没有有效的解决方法）</p>
<h4 id="布尔值Boolean"><a href="#布尔值Boolean" class="headerlink" title="布尔值Boolean"></a>布尔值Boolean</h4><p>用于逻辑判断<br>只有两个值：true真，false假</p>
<h4 id="空值Null"><a href="#空值Null" class="headerlink" title="空值Null"></a>空值Null</h4><p>用来表示一个空的对象，其数据类型实质为object<br>只有一个值：null</p>
<h4 id="未定义Undefined"><a href="#未定义Undefined" class="headerlink" title="未定义Undefined"></a>未定义Undefined</h4><p>当声明变量但未赋值时，变量值默认为undefined，数据类型就是undefined<br>只有一个值：undefined</p>
<h3 id="011-012-强制类型转换"><a href="#011-012-强制类型转换" class="headerlink" title="011-012 强制类型转换"></a>011-012 强制类型转换</h3><p>强制类型转换:将一个数据强制转换成其他的数据类型，主要指String，Number，Boolean<br>1.转换为String<br>法1：调用被转换数据类型的toString()方法<br>    该方法不会影响原变量的数据类型<br>    null和undefined没有toString方法</p>
<pre><code>例 a = a.toString()</code></pre><p>法2：调用String()函数，将被转换的数据作为参数传递给函数  </p>
<pre><code>对于Number和Boolean实质上就是调用toString()方法,对于null和undefined则是直接加上引号</code></pre><p>2.转换为Number<br>法1：调用Number()函数</p>
<pre><code>字符串--&gt;数字
    1.纯数字字符串--&gt;相应数字
    2.含有非数字内容的字符串--&gt;NaN
    3.空串或只含空格的字符串--&gt;0
布尔--&gt;数字
    true--&gt;1
    false--&gt;0
null--&gt;数字 ==0
undefined--&gt;数字 ==NaN</code></pre><p>法2：parseInt()函数 将字符串（其中的有效整数，从左到右）转换为整数<br>         parseFloat()函数 将字符串（其中的有效浮点数，从左到右）转换为浮点数<br>         本质上是将数据转换为字符串再将其中的有效数字转换为相应的数字</p>
<pre><code>例：parseInt(&quot;123.45px&quot;)==123
    parseInt(&quot;abc&quot;)==NaN
    parseInt(null)==NaN
    parseFloat(&quot;123.456px&quot;)==123.456</code></pre><h3 id="013不同进制数字的表示"><a href="#013不同进制数字的表示" class="headerlink" title="013不同进制数字的表示"></a>013不同进制数字的表示</h3><pre><code>16进制以0x开头
8进制以0开头
2进制以0b开头，某些浏览器不支持，如IE
特殊情况：在parseInt()函数中，比如a=&quot;070&quot;，不同浏览器会将其看成不同进制的数字，
因此要在parseInt()中添加第二个参数表示不同进制`parseInt(a,10)`</code></pre><h3 id="014-强制类型转换"><a href="#014-强制类型转换" class="headerlink" title="014 强制类型转换"></a>014 强制类型转换</h3><pre><code>--&gt;Boolean
调用Boolean()函数
数字--&gt;布尔
除了0和NaN为false，其余为true
字符串--&gt;布尔
除了空串为false，其余为true
null和undefined都为false
对象--&gt;布尔 ==true</code></pre><h3 id="015-运算符和算数运算符"><a href="#015-运算符和算数运算符" class="headerlink" title="015 运算符和算数运算符"></a>015 运算符和算数运算符</h3><p>运算符也叫操作符，通过对一个或多个值进行运算，并获取运算结果<br>如typeof，可以获得一个值的类型并保存为字符串的形式</p>
<h4 id="算数运算符（二元运算符）"><a href="#算数运算符（二元运算符）" class="headerlink" title="算数运算符（二元运算符）"></a>算数运算符（二元运算符）</h4><pre><code>非Number类型的值进行运算会转换成相应Number值（+运算例外）
任何值和NaN进行运算都为NaN</code></pre><p>1.+ 加法运算，并返回结果<br>任何值和字符串作+运算，会进行拼串即将其转换为字符串后拼接成一个字符串<br>利用空串可将任意数据转换为String类型，如a = a +””(隐式的类型转换，实际上也是调用String函数)</p>
<ol start="2">
<li><ul>
<li>减法运算</li>
</ul>
</li>
<li><ul>
<li>乘法运算</li>
</ul>
</li>
<li>/ 除法运算<br>任何值做- * /运算时都会自动转换为Number，以此通过-0 *1 /1将非Number值隐式转为Number类型</li>
<li>% 取模运算(取余数)</li>
</ol>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>我的时区</title>
    <url>/%E9%9A%8F%E7%AC%94/%E6%88%91%E7%9A%84%E6%97%B6%E5%8C%BA/</url>
    <content><![CDATA[<p>分享一首小诗</p>
<blockquote>
<p>每个人都有自己的时区<br>纽约时间比加州时间早三个小时，<br>但加州时间并没有变慢。<br>有人22岁就毕业了，<br>但等了五年才找到好的工作！<br>有人25岁就当上了CEO，<br>却在50岁去世。<br>也有人迟到50岁才当上CEO，<br>然后活到90岁。<br>有人依然单身，<br>同时也有人已婚。<br>奥巴马55岁就退休，<br>川普70岁才开始当总统。<br>世上每个人本来就有自己的发展时区。<br>身边有些人看似走在你前面，<br>也有人看似走在你后面。<br>但其实每个人在自己的时区都有自己的步伐。<br>不用嫉妒或嘲笑他们。<br>他们都在记得时区里，你也是！<br>生命就是等待正确的是行动时机。<br>所以，放轻松。<br>你没有落后。<br>你没有领先。<br>在命运为你安排的属于自己的时区里，一切都准时。</p>
</blockquote>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>poem</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack笔记</title>
    <url>/%E7%AC%94%E8%AE%B0/webpack%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="webpack笔记"><a href="#webpack笔记" class="headerlink" title="webpack笔记"></a>webpack笔记</h1><h2 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h2><h3 id="1-前端模块化开发的历程"><a href="#1-前端模块化开发的历程" class="headerlink" title="1.前端模块化开发的历程"></a>1.前端模块化开发的历程</h3><p>早期js仅作为脚本语言，处理表单验证、动画实现等</p>
<p>|    |    代码写在·<script>·标签插入页面</p>
<p>ajax异步请求出现，前后端分离，代码越来越复杂</p>
<p>|    |    代码写在js文件再引入（出现 全局变量污染，js文件引用顺序依赖等问题）</p>
<p>函数作用域的运用</p>
<p>|    |    匿名函数（闭包）解决变量重名问题（代码不可复用）</p>
<p>出现模块化雏形</p>
<p>|    |    在匿名函数内部return某个对象，里面包含要导出的变量或方法，在其他js文件中可使用该对象（ES5的导入导出）</p>
<p>出现模块化的规范</p>
<p>|    |    CommonJS，AMD，CMD，ES6的modules，核心都是导入导出（CommonJS的实现代表node.js）</p>
<h3 id="2-常用模块化规范的基本语法"><a href="#2-常用模块化规范的基本语法" class="headerlink" title="2.常用模块化规范的基本语法"></a>2.常用模块化规范的基本语法</h3><h4 id="2-1-CommonJS"><a href="#2-1-CommonJS" class="headerlink" title="2.1    CommonJS"></a>2.1    CommonJS</h4><p>CommonJS的导入导出，需要底层支撑才能解析代码，比如在node环境下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">导出：</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">	flag:flag <span class="comment">//简写flag</span></span><br><span class="line">&#125;</span><br><span class="line">导入：</span><br><span class="line"><span class="keyword">let</span> &#123;flag&#125; = <span class="built_in">require</span>(<span class="string">'./index.js'</span>)</span><br></pre></td></tr></table></figure>

<h4 id="2-2-ES6"><a href="#2-2-ES6" class="headerlink" title="2.2    ES6"></a>2.2    ES6</h4><p>ES6的导入导出,大部分浏览器已实现，可直接使用</p>
<p>引入：<code>&lt;script src=&quot;index.js&quot; type=&quot;module&quot;&gt;&lt;/script&gt;</code></p>
<p>加上module类型，意味着该js文件为一个模块，对外是封闭的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">导出：</span><br><span class="line"><span class="number">1.</span>定义后统一导出</span><br><span class="line">	<span class="keyword">export</span> &#123;</span><br><span class="line">		flag</span><br><span class="line">	&#125;</span><br><span class="line"><span class="number">2.</span>定义时导出</span><br><span class="line">	<span class="keyword">export</span> <span class="keyword">var</span> flag = <span class="literal">true</span></span><br><span class="line"><span class="number">3.</span>默认导出，可不命名，由导入者命名，一个模块只能有一个</span><br><span class="line">	<span class="keyword">export</span> <span class="keyword">default</span> flag;</span><br><span class="line">	<span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">导入：</span><br><span class="line"><span class="number">1.</span>基本的导入</span><br><span class="line">	<span class="keyword">import</span> &#123;flag&#125; <span class="keyword">from</span> <span class="string">"./index.js"</span>;</span><br><span class="line"><span class="number">2.</span>导入某个模块通过<span class="keyword">export</span> <span class="keyword">default</span>导出的功能（自己命名）</span><br><span class="line">	<span class="keyword">import</span> fn <span class="keyword">from</span> <span class="string">"./index.js"</span>;</span><br><span class="line"><span class="number">3.</span>导入某个模块所有导出的功能,通过<span class="keyword">as</span>后的变量调用</span><br><span class="line">	<span class="keyword">import</span> * <span class="keyword">as</span> name <span class="keyword">from</span> <span class="string">"./index.js"</span>;</span><br></pre></td></tr></table></figure>

<h3 id="3-初识webpack"><a href="#3-初识webpack" class="headerlink" title="3.初识webpack"></a>3.初识webpack</h3><p>At its core,webpack is a static module bundler for modern JavaScript applications.(静态模块打包工具)</p>
<p><strong>模块</strong>：给前端模块化开发提供底层支持并处理模块间的依赖关系，让开发更有效率（底层支撑，关系处理）</p>
<p><strong>打包</strong>：将各种资源模块（js,less,sass,json,png等）转换并打包成浏览器可识别的一个或多个包（转换打包）</p>
<p>要在node环境下运行(且node依赖很多包，通过npm管理)，只是开发时的工具，完成打包后只需将打包文件部署到服务器</p>
<p>注：可完成打包功能的其它工具grunt/gulp（前端自动化任务管理工具）</p>
<p>核心为task（任务），通过定义task要处理的事务并依次执行这些task，适用于模块依赖简单的项目。</p>
<p>对比：grunt/gulp强调前端流程的自动化</p>
<p>​           webpack强调模块化开发管理</p>
<h2 id="二、webpack安装和使用"><a href="#二、webpack安装和使用" class="headerlink" title="二、webpack安装和使用"></a>二、webpack安装和使用</h2><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.    安装"></a>1.    安装</h3><h4 id="1-1-安装node-js-包含npm"><a href="#1-1-安装node-js-包含npm" class="headerlink" title="1.1.安装node.js(包含npm)"></a>1.1.安装node.js(包含npm)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">官网：http;&#x2F;&#x2F;nodejs.cn&#x2F;download&#x2F;</span><br><span class="line">下载安装NodeJS,自动包含npm工具(Node Package Manager,nodejs的包管理和分发工具，可以用来安装开发依赖的模块)</span><br><span class="line">检查安装版本：</span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line">npm使用淘宝镜像(使用cnpm命令安装包）：</span><br><span class="line">npm install -g cnpm --registry&#x3D;http;&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h4 id="1-2-全局安装webpack"><a href="#1-2-全局安装webpack" class="headerlink" title="1.2.全局安装webpack"></a>1.2.全局安装webpack</h4><p>终端执行webpack命令时</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install webpack -g</span><br><span class="line"></span><br><span class="line">npm install webpack@3.6.0 -g	&#x2F;&#x2F;vue cli2依赖webpack3.6.0</span><br><span class="line"></span><br><span class="line">webpack -version	&#x2F;&#x2F;查看webpack版本</span><br></pre></td></tr></table></figure>

<h4 id="1-3-局部安装webpack"><a href="#1-3-局部安装webpack" class="headerlink" title="1.3.局部安装webpack"></a>1.3.局部安装webpack</h4><p>package.json中script脚本的webpack命令优先使用局部webpack，避免版本不一致问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install webpack@3.6.0 --save-dev	&#x2F;&#x2F;--save-dev代表开发时依赖，开发阶段需要的包、工具等</span><br></pre></td></tr></table></figure>

<h3 id="2-基本使用（webpack4-41-2）"><a href="#2-基本使用（webpack4-41-2）" class="headerlink" title="2.    基本使用（webpack4.41.2）"></a>2.    基本使用（webpack4.41.2）</h3><p>通过命令 <code>webpack .\src\main.js -o .\dist\bundle.js</code>进行打包，只需要一个入口和出口，webpack会自动处理其中的依赖关系，将与入口相关的文件根据依赖一起打包。(dist=distribution 发布)</p>
<p><img src="E:%5CWebTime%5Cwebpack%5Cimgages%5C%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt="目录结构"></p>
<h3 id="3-webpack基本配置"><a href="#3-webpack基本配置" class="headerlink" title="3.    webpack基本配置"></a>3.    webpack基本配置</h3><h4 id="3-1-初始化项目"><a href="#3-1-初始化项目" class="headerlink" title="3.1    初始化项目"></a>3.1    初始化项目</h4><p>使用node环境相关的包时先进行初始化 <code>npm init</code>，会创建一个package.json文件（项目的配置描述文件），通过npm命令安装新依赖时会自动更新文件</p>
<h4 id="3-2-package-json配置"><a href="#3-2-package-json配置" class="headerlink" title="3.2    package.json配置"></a>3.2    package.json配置</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"learn"</span>,	<span class="comment">//项目名</span></span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,	<span class="comment">//版本号</span></span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,	<span class="comment">//描述</span></span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,	<span class="comment">//项目入口函数</span></span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;			<span class="comment">//脚本</span></span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">     <span class="attr">"build"</span>: <span class="string">"webpack"</span>	<span class="comment">//npm run build == webpack（局部）</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,	<span class="comment">//作者</span></span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,	<span class="comment">//开源</span></span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;	<span class="comment">//开发时依赖</span></span><br><span class="line">    <span class="attr">"webpack"</span>: <span class="string">"^3.6.0"</span></span><br><span class="line">  &#125;</span><br><span class="line">   <span class="string">"dependencies"</span>: &#123;	<span class="comment">//运行时依赖</span></span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-webpack-config-js配置"><a href="#3-2-webpack-config-js配置" class="headerlink" title="3.2    webpack.config.js配置"></a>3.2    webpack.config.js配置</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)	<span class="comment">//node环境依赖的包</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./src/main.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname,<span class="string">'dist'</span>),</span><br><span class="line">        filename: <span class="string">'bundle.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//配置入口和出口，webpack = webpack ./src/main.js -o ./dist/bundle.js</span></span><br></pre></td></tr></table></figure>

<h3 id="4-webpack的转换功能loader"><a href="#4-webpack的转换功能loader" class="headerlink" title="4.    webpack的转换功能loader"></a>4.    webpack的转换功能loader</h3><p>webpack 的基本功能是处理js代码及其依赖关系，当需要处理css等文件时需要安装额外的loader，比如将 scss、less 转为 css，TypeScript 转为 ES5 代码、ES6 转 ES5、.vue或.jsx文件转为js文件等</p>
<p>loader的基本使用（具体看官网：<span class="exturl" data-url="aHR0cHM6Ly93d3cud2VicGFja2pzLmNvbS9sb2FkZXJzL++8ie+8mg==" title="https://www.webpackjs.com/loaders/）：">https://www.webpackjs.com/loaders/）：<i class="fa fa-external-link"></i></span></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>通过npm安装需要的loader</span><br><span class="line"><span class="number">2.</span>在webpack.config.js中的modules关键字下进行配置</span><br></pre></td></tr></table></figure>

<h4 id="4-1-使用css文件的配置"><a href="#4-1-使用css文件的配置" class="headerlink" title="4.1    使用css文件的配置"></a>4.1    使用css文件的配置</h4><p>css-loader     负责加载css代码</p>
<p>style-loader    负责添加样式到DOM</p>
<p>1.安装：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install --save-dev css-loader</span><br><span class="line">npm install style-loader --save-dev</span><br></pre></td></tr></table></figure>

<p>2.配置(webpack.config.js中)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,	<span class="comment">//匹配css文件</span></span><br><span class="line">                use: [<span class="string">'style-loader'</span>,<span class="string">'css-loader'</span>]	<span class="comment">//多个loader从右到左依次加载执行</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-使用less文件"><a href="#4-2-使用less文件" class="headerlink" title="4.2    使用less文件"></a>4.2    使用less文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.</span><br><span class="line">npm install --save-dev less-loader less</span><br><span class="line">//less-loader	负责加载less文件</span><br><span class="line">//less	node环境的包，负责支持将less转为css</span><br><span class="line">2.</span><br><span class="line">module: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            <span class="built_in">test</span>: /\.less$/,</span><br><span class="line">            use: [&#123;</span><br><span class="line">                loader: <span class="string">"style-loader"</span> // creates style nodes from JS strings</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                loader: <span class="string">"css-loader"</span> // translates CSS into CommonJS</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                loader: <span class="string">"less-loader"</span> // compiles Less to CSS</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-3-使用图片文件"><a href="#4-3-使用图片文件" class="headerlink" title="4.3     使用图片文件"></a>4.3     使用图片文件</h4><p>webpack将图片看作模块，当在css文件中引用是会会根据依赖打包相应的图片</p>
<p>（jpg是jpeg的另一种说法，早期的DOS系统只支持最多三个字母的后缀名文件，如htm（即html））</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span></span><br><span class="line">npm install --save-dev url-loader</span><br><span class="line"><span class="number">2.</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./src/main.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname,<span class="string">'dist'</span>),</span><br><span class="line">        filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">        publicPath: <span class="string">'dist/'</span>	<span class="comment">//涉及到url的文件在打包时会自动拼接上该路径</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'url-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              <span class="comment">//当图片小于该值，url-loader会将图片转成Base64字符串直接应用在页面上</span></span><br><span class="line">              <span class="comment">//当图片大于该值会使用file-loader，将图片用32位哈希值重命名并直接将路径返回给使用者，该loader不用配置，下载即可用</span></span><br><span class="line">               limit: <span class="number">8192</span>,</span><br><span class="line">               name: <span class="string">'img/[name].[hash:8].[ext]'</span>	<span class="comment">//指定打包路径并自定义命名文件</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-4-ES6转ES5"><a href="#4-4-ES6转ES5" class="headerlink" title="4.4    ES6转ES5"></a>4.4    ES6转ES5</h4><p>webpack默认打包js文件不会将ES6转ES5，需要使用babel对应的loader</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span></span><br><span class="line">npm install --save-dev babel-loader@<span class="number">7</span> babel-core babel-preset-es2015</span><br><span class="line"><span class="comment">//babel-loader@7 负责加载ES6文件</span></span><br><span class="line"><span class="comment">//babel-core 底层支持</span></span><br><span class="line"><span class="comment">//babel-preset-es2015 配置相关，es5转es6</span></span><br><span class="line"><span class="comment">//babel-preset-env 选择这个命令需要额外配置babelrc文件</span></span><br><span class="line"><span class="number">2.</span></span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      exclude: <span class="regexp">/(node_modules|bower_components)/</span>,	<span class="comment">//排除，与include(包含)相反</span></span><br><span class="line">      use: &#123;</span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          presets: [<span class="string">'es2015'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-5-使用vue"><a href="#4-5-使用vue" class="headerlink" title="4.5     使用vue"></a>4.5     使用vue</h4><p><strong>安装：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install vue --save	<span class="comment">//运行时也需要vue</span></span><br></pre></td></tr></table></figure>

<p><strong>引入：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br></pre></td></tr></table></figure>

<p><strong>使用：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        message: <span class="string">'Hello webpack'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>错误：</strong></p>
<p><img src="E:%5CWebTime%5Cwebpack%5Cimgages%5C%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(83).png" alt=""></p>
<p><strong>原因：</strong></p>
<p>vue在构建的时候会发布两个版本runtime-only(代码中不允许有template，无法编译)和runtime-compiler（可以编译template）</p>
<p><strong>解决</strong>（webpack.config.js)：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">    alias: &#123;	<span class="comment">//别名</span></span><br><span class="line">      <span class="string">'vue$'</span> : <span class="string">'vue/dist/vue.esm.js'</span>	<span class="comment">//指定vue的具体路径，使用vue/dist/vue.esm.js（可编译template）</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p><strong>最终使用方案：</strong></p>
<p>安装：</p>
<p>vue-loader    //加载.vue文件</p>
<p>vue-template-compiler    //编译template</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install vue-loader vue-template-compiler --save-dev</span><br></pre></td></tr></table></figure>

<p>配置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">（webpack.config.js中)</span><br><span class="line">	&#123;</span><br><span class="line">        test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">'vue-loader'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<p>vue组件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;tittle&quot;&gt;</span><br><span class="line">        &lt;h3&gt;&#123;&#123;message&#125;&#125;&lt;&#x2F;h3&gt;</span><br><span class="line">        &lt;Cpn&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import Cpn from &#39;.&#x2F;Cpn&#39;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;App&quot;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            Cpn</span><br><span class="line">        &#125;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return&#123;</span><br><span class="line">                message: &#39;Heloo Webpack&#39;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.tittle&#123;</span><br><span class="line">    color: green;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p>使用vue组件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./vue/App.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    template: <span class="string">`&lt;App/&gt;`</span>,</span><br><span class="line">    components: &#123;</span><br><span class="line">        App</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>额外任务：Bade64，Babel，webpack_require</p>
<h3 id="5-webpack的扩展功能plugin"><a href="#5-webpack的扩展功能plugin" class="headerlink" title="5.    webpack的扩展功能plugin"></a>5.    webpack的扩展功能plugin</h3><h4 id="5-1-webpack-Plugin的使用"><a href="#5-1-webpack-Plugin的使用" class="headerlink" title="5.1    webpack Plugin的使用"></a>5.1    webpack Plugin的使用</h4><p>webpack插件，对webpack现有功能的扩展，比如打包优化，文件压缩等</p>
<p>loader：文件的加载器、转换器</p>
<p>plugin：webpack的扩展器</p>
<p><strong>Plugin的基本使用：</strong></p>
<p>1.通过npm安装需要使用的Plugin（webpack已内置一些plugin，比如BannerPlugin）</p>
<p>2.在webpack.config.js中导入Plugin，通过plugins关键字下进行配置（数组）</p>
<h4 id="5-2-BannerPlugin的配置"><a href="#5-2-BannerPlugin的配置" class="headerlink" title="5.2 BannerPlugin的配置"></a>5.2 BannerPlugin的配置</h4><p>横幅插件，为打包的文件添加版权声明</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line">   <span class="keyword">new</span> webpack.BannerPlugin(<span class="string">'最终版权归Nabok所有'</span>)</span><br><span class="line"> ],</span><br></pre></td></tr></table></figure>

<p><img src="E:%5CWebTime%5Cwebpack%5Cimgages%5CBannerPlugin.png" alt="版权声明"></p>
<h4 id="5-3-HtmlWebpackPlugin的配置"><a href="#5-3-HtmlWebpackPlugin的配置" class="headerlink" title="5.3    HtmlWebpackPlugin的配置"></a>5.3    HtmlWebpackPlugin的配置</h4><p>HtmlWebpackPlugin插件可将入口文件index.html打包到发布文件夹dist中</p>
<ul>
<li><p>自动根据指定的模板生成一个index.html文件</p>
</li>
<li><p>自动将打包的js文件通过script标签插入到body中</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span></span><br><span class="line">npm install --save-dev html-webpack-plugin</span><br><span class="line"><span class="number">2.</span></span><br><span class="line"> <span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"> </span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'index.html'</span>	<span class="comment">//指定的模板，在当前目录寻找并将其中body的代码引入新的index.html文件</span></span><br><span class="line">    &#125;),</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure>

<h4 id="5-4-uglifyJsPlugin插件的配置"><a href="#5-4-uglifyJsPlugin插件的配置" class="headerlink" title="5.4    uglifyJsPlugin插件的配置"></a>5.4    uglifyJsPlugin插件的配置</h4><p>uglifyjs-webpack-plugin插件用于对js文件进行压缩处理，注意版本兼容问题（1.1.1与CLI2保持一致）</p>
<p>uglify(丑化：压缩-->难看)：去掉空格，替换变量名等</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span></span><br><span class="line">npm install uglifyjs-webpack-plugin@<span class="number">1.1</span><span class="number">.1</span> --save-dev</span><br><span class="line"><span class="number">2.</span></span><br><span class="line"><span class="keyword">const</span> uglifyJsPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line">	<span class="keyword">new</span> uglifyJsPlugin()</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="6-搭建本地服务器devserver"><a href="#6-搭建本地服务器devserver" class="headerlink" title="6.搭建本地服务器devserver"></a>6.搭建本地服务器devserver</h3><p>本地开发服务器devserver，基于node.js搭建，内部使用express框架，用于监听代码并实时自动刷新浏览器。</p>
<p>根据服务的文件夹，监听代码的变动并实时编译，但不会生成保存在磁盘中，而是缓存在内存中进行测试</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>下载安装</span><br><span class="line">npm install --save-dev webpack-dev-server@<span class="number">2.9</span><span class="number">.1</span>	<span class="comment">//2.9.1与CLI2一致</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>webpack.config.js配置</span><br><span class="line">devServer:&#123;</span><br><span class="line">	contentBase: <span class="string">'./dist'</span>,	<span class="comment">//需要提供本地服务的文件夹，默认根目录</span></span><br><span class="line">	inline: <span class="literal">true</span>,	<span class="comment">//页面是否实时刷新</span></span><br><span class="line">	port: <span class="number">8080</span>,		<span class="comment">//端口号，默认8080</span></span><br><span class="line">	historyApiFallback: 	<span class="comment">//SPA应用中依赖HTML5的history模式</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>本地启动服务器</span><br><span class="line">webpack-dev-server</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>package.json的script配置，简化启动命令</span><br><span class="line"><span class="string">"dev"</span>: <span class="string">"webpack-dev-server --open"</span>	<span class="comment">//npm run dev启动本地服务，--open表示直接打开浏览器</span></span><br></pre></td></tr></table></figure>

<h3 id="7-webpack配置文件的分离"><a href="#7-webpack配置文件的分离" class="headerlink" title="7.webpack配置文件的分离"></a>7.webpack配置文件的分离</h3><p>分离webpack.config.js的配置信息，将开发阶段依赖的配置与生产发布时依赖的配置分离，如压缩要在打包时进行</p>
<p>（1）分成三个配置文件，放在build文件夹下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">base.config.js：共有的配置信息</span><br><span class="line"></span><br><span class="line">dev.config.js：开发阶段依赖的配置信息</span><br><span class="line"></span><br><span class="line">prod.config.js：生产发布时依赖的配置信息</span><br></pre></td></tr></table></figure>

<p>（2）将配置信息进行合并</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>安装merge</span><br><span class="line">npm install webpack-merge --save-dev</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>导入</span><br><span class="line"><span class="keyword">const</span> webpackMerge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>合并</span><br><span class="line"><span class="built_in">module</span>.exports = webpackMerge(baseConfig,&#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> uglifyJsPlugin()</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>（3）更改配置信息</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">命令：</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"webpack --config ./build/prod.config.js"</span>,	<span class="comment">//自定义配置文件</span></span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"webpack-dev-server --open --config ./build/dev.config.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line"> 打包路径：</span><br><span class="line">      output: &#123;</span><br><span class="line">        path: path.resolve(__dirname,<span class="string">'../dist'</span>),</span><br><span class="line">        filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>Axios学习笔记</title>
    <url>/%E7%AC%94%E8%AE%B0/Axios%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="Axios学习笔记"><a href="#Axios学习笔记" class="headerlink" title="Axios学习笔记"></a>Axios学习笔记</h2><h3 id="一、网络请求模块"><a href="#一、网络请求模块" class="headerlink" title="一、网络请求模块"></a>一、网络请求模块</h3><p>作用：向服务器<strong>发送网络请求</strong>并对响应的数据进行初步处理。</p>
<h4 id="常用方案"><a href="#常用方案" class="headerlink" title="常用方案"></a>常用方案</h4><p><strong>1.传统Ajax</strong></p>
<p>​    基于XMLHttpRequest（XHR）</p>
<p>​    缺点：配置和调用混乱，编码蛋疼</p>
<p><strong>2.jQuery-Ajax</strong></p>
<p>​    基于jQuery库</p>
<p>​    缺点：要使用jQuery-Ajax的功能要引入整个jQuery库</p>
<p><strong>3.JSONP</strong></p>
<p>​    基于<code>&lt;script&gt;</code>标签的src属性，可解决跨域访问的问题</p>
<p><strong>4.Axios</strong></p>
<p>​    可在node环境使用，支持Promise，可拦截请求和响应并处理其中的数据</p>
<h3 id="二、axios框架基本介绍"><a href="#二、axios框架基本介绍" class="headerlink" title="二、axios框架基本介绍"></a>二、axios框架基本介绍</h3><p>axios可理解为：ajax I/O system</p>
<h4 id="2-1-请求方式"><a href="#2-1-请求方式" class="headerlink" title="2.1 请求方式"></a>2.1 请求方式</h4><ul>
<li>axios(config)</li>
<li>axios.request(config)</li>
<li>axios.get(url[,config])</li>
<li>axios.delete(url[,config])</li>
<li>axios.head(url[,config])</li>
<li>axios.post(url[,data,config])</li>
<li>axios.put(url[,data,config])</li>
<li>axios.patch(url[,data,config])</li>
</ul>
<h3 id="三、axios框架的使用"><a href="#三、axios框架的使用" class="headerlink" title="三、axios框架的使用"></a>三、axios框架的使用</h3><h4 id="3-1-基本使用"><a href="#3-1-基本使用" class="headerlink" title="3.1 基本使用"></a>3.1 基本使用</h4><p>安装axios框架</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install axios --save</span><br></pre></td></tr></table></figure>

<p>导入axios对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import axios from &#39;axios&#39;</span><br></pre></td></tr></table></figure>

<p>发起请求，接收响应</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span></span><br><span class="line">axios(&#123;</span><br><span class="line">	url: <span class="string">'https://easy-mock.com/mock/5ec5edace0e3c81a0943e357/home/multidata'</span>,</span><br><span class="line">	method: <span class="string">'get'</span>	<span class="comment">//默认GET请求</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="number">2.</span></span><br><span class="line">axios(&#123;</span><br><span class="line">	url: <span class="string">'http://123.207.32.32:8000/home/data?type=sell&amp;page=2'</span>,</span><br><span class="line"> <span class="comment">/* GET请求的参数拼接</span></span><br><span class="line"><span class="comment">    params: &#123;</span></span><br><span class="line"><span class="comment">       type: 'pop',</span></span><br><span class="line"><span class="comment">       page: 2</span></span><br><span class="line"><span class="comment">   &#125;,</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//注：响应的数据在data选项中</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2-发送并发请求"><a href="#3-2-发送并发请求" class="headerlink" title="3.2 发送并发请求"></a>3.2 发送并发请求</h4><p>同时发送多个请求，接收到所有响应的数据后统一进行处理</p>
<ul>
<li>axios.all([])     发送多个请求</li>
<li>axios.spread()    将返回的数组数据展开为多个数据</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.all([axios.get(<span class="string">'https://easy-mock.com/mock/5ec5edace0e3c81a0943e357/home/multidata'</span>),</span><br><span class="line">       axios.get(<span class="string">'http://123.207.32.32:8000/home/data'</span>,</span><br><span class="line">        &#123;<span class="attr">params</span>: &#123;<span class="attr">type</span>: <span class="string">'pop'</span>,<span class="attr">page</span>: <span class="number">2</span>&#125;&#125;)])</span><br><span class="line"> 	 .then(axios.spread(<span class="function">(<span class="params">res1,res2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res1);</span><br><span class="line">    <span class="built_in">console</span>.log(res1);</span><br><span class="line">	&#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-3-设置axios全局配置"><a href="#3-3-设置axios全局配置" class="headerlink" title="3.3 设置axios全局配置"></a>3.3 设置axios全局配置</h4><p>axios.default是全局默认属性</p>
<p>一般将某些固定的请求数据抽取出来作为全局配置信息添加到axios.default中，如BaseURL、timeout等</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">axios.default.baseURL &#x3D; &#39;https:&#x2F;&#x2F;easy-mock.com&#x2F;mock&#x2F;5ec5edace0e3c81a0943e357&#x2F;home&#39;</span><br><span class="line">axios.default.timeout &#x3D; 5000</span><br><span class="line">axios(&#123;</span><br><span class="line">	url: &#39;&#x2F;multidata&#39;,</span><br><span class="line">&#125;).then(res &#x3D;&gt; &#123;</span><br><span class="line">	console.log(res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>常用配置选项</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">url: &#39;&#39;		请求地址</span><br><span class="line">method: &#39;&#39;	请求类型</span><br><span class="line">params: &#123; &#125;	URL查询对象&#x2F;GET请求参数</span><br><span class="line">data: &#123; &#125;	请求体</span><br><span class="line">baseURL: &#39;&#39;	根路径</span><br><span class="line">transformRequest: [function(data)&#123; &#125;]	请求前进行数据处理</span><br><span class="line">transformResponse: [function(data)&#123; &#125;]	请求后进行数据处理</span><br><span class="line">headers: &#123;&#39;x-Requested-With&#39;: &#39;XMLHttpRequest&#39;&#125;	自定义请求头</span><br></pre></td></tr></table></figure>

<h4 id="3-4-创建axios实例"><a href="#3-4-创建axios实例" class="headerlink" title="3.4 创建axios实例"></a>3.4 创建axios实例</h4><p>以上例子使用的是默认的全局的axios对象，一般通过创建新的axios实例来发送请求</p>
<p>axios.create(config)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建多个实例并初始化不同的配置信息，根据需求使用对应的实例发送请求</span></span><br><span class="line"><span class="keyword">const</span> instance1 = axios.create(&#123;</span><br><span class="line">	baseURL: <span class="string">'https://easy-mock.com/mock/5ec5edace0e3c81a0943e357'</span>,</span><br><span class="line">   timeout: <span class="number">5000</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> instance2 = axios.create(&#123;</span><br><span class="line">	baseURL: <span class="string">'http://123.207.32.32:8000'</span>,</span><br><span class="line">   timeout: <span class="number">10000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">instance1(&#123;</span><br><span class="line">	url: <span class="string">'/home/multidata'</span>,</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br><span class="line">instance2(&#123;</span><br><span class="line">	url: <span class="string">'/home/data'</span>,</span><br><span class="line">   params: &#123;</span><br><span class="line">      type: <span class="string">'pop'</span>,</span><br><span class="line">      page: <span class="number">2</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="3-5-使用axios拦截器"><a href="#3-5-使用axios拦截器" class="headerlink" title="3.5 使用axios拦截器"></a>3.5 使用axios拦截器</h4><p>在发送请求或接收响应后进行二次处理，比如修改config以符合服务器要求，每次发起请求时显示请求动画，携带一些特殊的信息（如token），只返回响应的必要数据（如data）等</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//拦截请求</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    ……</span><br><span class="line">    <span class="keyword">return</span> config	<span class="comment">//返回请求的配置信息</span></span><br><span class="line">  &#125;, err =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="comment">//拦截响应</span></span><br><span class="line"> instance.interceptors.response.use(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    ……</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;, err =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<h3 id="四、封装axios模块"><a href="#四、封装axios模块" class="headerlink" title="四、封装axios模块"></a>四、封装axios模块</h3><p>第三方库的维护更新依赖于创造者，没有保证，因此要对axios进行再次封装再导入项目中使用。</p>
<p>结合回调函数或Promise进行封装</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">封装 request.js</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">    baseURL: <span class="string">'http://123.207.32.32:8000'</span>,</span><br><span class="line">    timeout: <span class="number">5000</span></span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  instance.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;, err =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;)</span><br><span class="line">    </span><br><span class="line">  instance.interceptors.response.use(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> res.data</span><br><span class="line">  &#125;, err =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;)</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">return</span> instance(config)	<span class="comment">//返回一个Promise对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">使用 main.js</span><br><span class="line"><span class="keyword">import</span> &#123; request &#125; <span class="keyword">from</span> <span class="string">'./request.js'</span></span><br><span class="line"></span><br><span class="line">request(&#123;</span><br><span class="line">   url: <span class="string">'/home/multidata'</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="Axios原理解析"><a href="#Axios原理解析" class="headerlink" title="Axios原理解析"></a>Axios原理解析</h3><p>.d.ts文件，底层代码不是js实现，使用TS展示</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Axios</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS预处理器Less</title>
    <url>/%E7%AC%94%E8%AE%B0/Less/</url>
    <content><![CDATA[<h2 id="CSS预处理器Less"><a href="#CSS预处理器Less" class="headerlink" title="CSS预处理器Less"></a>CSS预处理器Less</h2><p>三种预处理器</p>
<p>Less、Sass、Stylus</p>
<p>作用：方便开发者编写代码，结构更清晰，更简洁，提高编码效率</p>
<h4 id="一-less简介"><a href="#一-less简介" class="headerlink" title="一.less简介"></a>一.less简介</h4><p>less是一种动态样式语言，增加了变量，函数，mixin等特性，既可以在客户端运行，也可以借助node.js在服务器端运行。</p>
<p>官网：<span class="exturl" data-url="aHR0cDovL2xlc3Njc3MuY24v" title="http://lesscss.cn/">http://lesscss.cn/<i class="fa fa-external-link"></i></span></p>
<p>文件后缀为.less，需要编译成css文件方可使用</p>
<h4 id="二-编译方式："><a href="#二-编译方式：" class="headerlink" title="二.编译方式："></a>二.编译方式：</h4><p>1.通过外部编译器，如考拉koala</p>
<p>2.通过命令行，需要安装node.min.js运行环境</p>
<p>3.通过引入less.js脚本文件在线编译（style中type=”text/less”，脚本一般在底部引入)，性能较差</p>
<h4 id="三-注释"><a href="#三-注释" class="headerlink" title="三.注释"></a>三.注释</h4><p>以//开头的注释不会编译到css文件中</p>
<p>以/**/包裹的注释会编译到css文件中</p>
<h4 id="四-变量"><a href="#四-变量" class="headerlink" title="四.变量"></a>四.变量</h4><p>使用@声明变量 @变量名:含义 ，根据变量不同的含义有不同的引用方式：</p>
<p>1.作为普通属性值：直接@color</p>
<p>2.作为选择器或属性名：#@{selector}</p>
<p>3.作为URL：@{url}</p>
<p>变量具有延时加载的特点，在加载完作用域（块级）的代码后再赋值给变量</p>
<h4 id="五-嵌套规则"><a href="#五-嵌套规则" class="headerlink" title="五.嵌套规则"></a>五.嵌套规则</h4><p>1.基本嵌套规则    –    嵌套的双方为HTML的父子关系，编译后的css中两者之间加上空格</p>
<p>2.&amp;的使用    –    在选择器前加上&amp;表示同级</p>
<h4 id="六-混合mixin"><a href="#六-混合mixin" class="headerlink" title="六.混合mixin"></a>六.混合mixin</h4><p>混合就是将一系列属性从一个规则集引入到另一个规则集的方式（相当于ctrl+c和ctrl+v)</p>
<p>使用<code>.</code> 的形式    定义,一般会放在额外的文件夹中作为混合库（API）使用，通过    @import “文件名”    引入。</p>
<p>目的:提高代码的复用率</p>
<p>1.普通混合–混合会编译到css文件中</p>
<p>.center{</p>
<p>margin:auto;</p>
<p>}</p>
<p>2.不带输出混合–混合不会编译到css文件中</p>
<p>.center(){</p>
<p>margin:auto;</p>
<p>}</p>
<p>3.带参数混合</p>
<p>.center(@c){</p>
<p>margin:auto;</p>
<p>background: @c;</p>
<p>}</p>
<p>4.带参数有默认值混合</p>
<p>.center(@c:pink){</p>
<p>margin:auto;</p>
<p>background: @c;</p>
<p>}</p>
<p>5.多个参数混合</p>
<p>.center(@w:100px,@c:pink){</p>
<p>margin:auto;</p>
<p>background: @c;</p>
<p>width: @w;</p>
<p>}</p>
<p>6.命名参数</p>
<p>在引用混合时实参指定变量名</p>
<p>#div{</p>
<p>.center(@c:pink);</p>
<p>}</p>
<p>7.匹配模式</p>
<p>额外定义同名混合，可在括号内插入一个标识符代表某模式，在该混合内部编写其特有的的代码，原混合的第一个参数必须为@_且形参数量与匹配模式的相同</p>
<p>8.arguments变量</p>
<p>实参列表，通过@arguments引用，简写代码</p>
<p>.border(@1,@2,@3){</p>
<p>border:@arguments;</p>
<p>}</p>
<h4 id="七-计算"><a href="#七-计算" class="headerlink" title="七.计算"></a>七.计算</h4><p>加减乘除，不同于css的cacl方法，只需计算的一方带有单位即可</p>
<h4 id="八-继承"><a href="#八-继承" class="headerlink" title="八.继承"></a>八.继承</h4><p>性能比混合高，灵活性较低，与类相似不带参数</p>
<p>：extend(.类名) 表示继承</p>
<p>多个选择器包含公共代码</p>
<h4 id="九-避免编译"><a href="#九-避免编译" class="headerlink" title="九.避免编译"></a>九.避免编译</h4><p>保持代码的原样编译到css中</p>
<p>~”代码”</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>Less</tag>
      </tags>
  </entry>
  <entry>
    <title>JSONP学习笔记</title>
    <url>/%E7%AC%94%E8%AE%B0/JSONP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="JSONP学习笔记"><a href="#JSONP学习笔记" class="headerlink" title="JSONP学习笔记"></a>JSONP学习笔记</h1><h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><p>同源的定义：如果两个地址的协议，域名和端口都相同，则两者具有相同的源。</p>
<p>同源策略：不同源的客户端脚本在没有明确授权的情况下，不能读写对方的资源，这是一个用于隔离潜在恶意文件的重要安全机制。</p>
<p>限制范围：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">（1） Cookie、LocalStorage 和 IndexDB 无法读取。</span><br><span class="line">（2） DOM 无法获得。</span><br><span class="line">（3） AJAX 请求不能发送。</span><br></pre></td></tr></table></figure>

<p>不受限制：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">（1）页面中的链接，重定向以及表单提交。</span><br><span class="line"></span><br><span class="line">（2）凡是拥有”src”这个属性的标签都拥有跨域的能力，如嵌入到页面中的&lt;\script&gt;、&lt;\img&gt;、&lt;\iframe&gt;等。</span><br></pre></td></tr></table></figure>

<h2 id="AJAX的跨域"><a href="#AJAX的跨域" class="headerlink" title="AJAX的跨域"></a>AJAX的跨域</h2><p>同源政策规定，AJAX请求只能发给同源的网址，否则就报错。</p>
<p>除了架设服务器代理（浏览器请求同源服务器，再由后者请求外部服务），有三种方法规避这个限制。</p>
<blockquote>
<ul>
<li>JSONP</li>
<li>WebSocket</li>
<li>CORS</li>
</ul>
</blockquote>
<h2 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h2><p>基本思想：通过添加一个<code>&lt;script&gt;</code>元素，向服务器请求JSON数据，服务器收到请求后，动态生成JSON文件，将数据放在一个指定名字的回调函数里传回来。</p>
<p>客户端的实现：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//W3C//DTD XHTML 1.0 Transitional//EN"</span> <span class="meta-string">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 得到航班信息查询结果后的回调函数</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> flightHandler = <span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'你查询的航班结果是：票价 '</span> + data.price + <span class="string">' 元，'</span> + <span class="string">'余票 '</span> + data.tickets + <span class="string">' 张。'</span>);</span></span><br><span class="line">    &#125;;</span><br><span class="line"><span class="actionscript">    <span class="comment">// 提供jsonp服务的url地址（不管是什么类型的地址，最终生成的返回值都是一段javascript代码）</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> url = <span class="string">"http://flightQuery.com/jsonp/flightResult.aspx?code=CA1998&amp;callback=flightHandler"</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 创建script标签，设置其属性</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span></span><br><span class="line"><span class="actionscript">    script.setAttribute(<span class="string">'src'</span>, url);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 把script标签加入head，此时调用开始</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(script); </span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>JQuery的jsonp实现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD XHTML 1.0 Transitional&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;xhtml1&#x2F;DTD&#x2F;xhtml1-transitional.dtd&quot;&gt;</span><br><span class="line">&lt;html xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; &gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">     &lt;title&gt;Untitled Page&lt;&#x2F;title&gt;</span><br><span class="line">      &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">      &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">     jQuery(document).ready(function()&#123; </span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">             type: &quot;get&quot;,</span><br><span class="line">             async: false,</span><br><span class="line">             url: &quot;http:&#x2F;&#x2F;flightQuery.com&#x2F;jsonp&#x2F;flightResult.aspx?code&#x3D;CA1998&quot;,</span><br><span class="line">             dataType: &quot;jsonp&quot;,</span><br><span class="line">             jsonp: &quot;callback&quot;,&#x2F;&#x2F;传递给请求处理程序或页面的，用以获得jsonp回调函数名的参数名(一般默认为:callback)</span><br><span class="line">             jsonpCallback:&quot;flightHandler&quot;,&#x2F;&#x2F;自定义的jsonp回调函数名称，默认为jQuery自动生成的随机函数名，也可以写&quot;?&quot;，jQuery会自动为你处理数据</span><br><span class="line">             success: function(json)&#123;</span><br><span class="line">                 alert(&#39;您查询到航班信息：票价： &#39; + json.price + &#39; 元，余票： &#39; + json.tickets + &#39; 张。&#39;);</span><br><span class="line">             &#125;,</span><br><span class="line">             error: function()&#123;</span><br><span class="line">                 alert(&#39;fail&#39;);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;);</span><br><span class="line">     &#125;);</span><br><span class="line">     &lt;&#x2F;script&gt;</span><br><span class="line">     &lt;&#x2F;head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line">&#x2F;&#x2F; 仅仅用于get请求</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>JSONP</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP状态码</title>
    <url>/%E7%AC%94%E8%AE%B0/HTTP%E7%8A%B6%E6%80%81%E7%A0%81%EF%BC%88HTTP%20Status%20Code%EF%BC%89/</url>
    <content><![CDATA[<h2 id="HTTP状态码（HTTP-Status-Code）"><a href="#HTTP状态码（HTTP-Status-Code）" class="headerlink" title="HTTP状态码（HTTP Status Code）"></a>HTTP状态码（HTTP Status Code）</h2><p>当浏览者访问一个网页时，浏览者的浏览器会向网页所在服务器发出请求。当浏览器接收并显示网页前，此网页所在的服务器会返回一个包含HTTP状态码的信息头（server header）用以响应浏览器的请求。</p>
<p>HTTP状态码由三个十进制数字组成，第一个十进制数字定义了状态码的类型，后两个数字没有分类的作用。</p>
<h4 id="常见的HTTP状态码："><a href="#常见的HTTP状态码：" class="headerlink" title="常见的HTTP状态码："></a>常见的HTTP状态码：</h4><ul>
<li>200 - 请求成功</li>
<li>301 - 资源（网页等）被永久转移到其它URL</li>
<li>404 - 资源（网页等）不存在</li>
<li>500 - 内部服务器错误</li>
</ul>
<h4 id="HTTP状态码分类（5种）"><a href="#HTTP状态码分类（5种）" class="headerlink" title="HTTP状态码分类（5种）"></a>HTTP状态码分类（5种）</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1**	信息，服务器收到请求，需要请求者继续执行操作</span><br><span class="line">2**	成功，操作被成功接收并处理</span><br><span class="line">3**	重定向，需要进一步的操作以完成请求</span><br><span class="line">4**	客户端错误，请求包含语法错误或无法完成请求</span><br><span class="line">5**	服务器错误，服务器在处理请求的过程中发生了错误</span><br></pre></td></tr></table></figure>

<h4 id="1xx-消息"><a href="#1xx-消息" class="headerlink" title="1xx  消息"></a>1xx  消息</h4><p>临时响应，代表请求已被接受，需要继续处理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">100——继续，客户端应当继续发送请求</span><br><span class="line"></span><br><span class="line">101——切换协议，服务器根据请求转换HTTP协议版本</span><br><span class="line"></span><br><span class="line">102——由WebDAV（RFC 2518）扩展的状态码，代表处理将被继续执行</span><br></pre></td></tr></table></figure>

<h4 id="2xx-成功"><a href="#2xx-成功" class="headerlink" title="2xx  成功"></a>2xx  成功</h4><p>代表请求已成功被服务器接收并处理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">200——请求成功，请求所希望的响应头或数据体将随此响应返回，一般用于GET与POST请求</span><br><span class="line"></span><br><span class="line">201——已创建，请求成功并创建了新的资源，新文件的URI 随Location 头信息返回</span><br><span class="line"></span><br><span class="line">202——已接受，已经接受请求，但未处理完成</span><br><span class="line"></span><br><span class="line">203——非授权信息。请求成功，但返回的meta信息不在原始的服务器，而是一个副本</span><br><span class="line"></span><br><span class="line">204——无内容。服务器成功处理请求，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档。</span><br><span class="line"></span><br><span class="line">205——重置内容。服务器成功处理请求，未返回内容，但客户端应重置文档视图。可通过此返回码清除浏览器的表单域</span><br><span class="line"></span><br><span class="line">206——部分内容。服务器已经完成了部分GET请求</span><br><span class="line">207——由WebDAV(RFC 2518)扩展的状态码，代表之后的消息体将是一个XML消息</span><br></pre></td></tr></table></figure>

<h4 id="3xx-重定向"><a href="#3xx-重定向" class="headerlink" title="3xx 重定向"></a>3xx 重定向</h4><p>代表客户端需要采取进一步的操作才能完成请求，后续的请求地址（重定向目标<br>）在本次响应的 Location 域中指明</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">300——多种选择。请求的资源可在多处得到，相应可返回一个资源特征与地址的列表供客户端选择</span><br><span class="line"></span><br><span class="line">301——永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI</span><br><span class="line"></span><br><span class="line">302——临时移动。与301类似，但资源只是临时被移动，客户端应继续使用原有URI</span><br><span class="line"></span><br><span class="line">303——查看其它地址。与301类似，建议客户访问其他URL，使用GET和POST请求查看</span><br><span class="line"></span><br><span class="line">304——未修改。GET 请求已执行，但所请求的资源未修改</span><br><span class="line"></span><br><span class="line">305——使用代理。所请求的资源必须通过代理访问</span><br><span class="line"></span><br><span class="line">306——前一版本HTTP中使用的代码，现行版本中不再使用</span><br><span class="line"></span><br><span class="line">307——临时重定向。与302类似，使用GET请求重定向</span><br></pre></td></tr></table></figure>

<h4 id="4xx-客户端错误"><a href="#4xx-客户端错误" class="headerlink" title="4xx  客户端错误"></a>4xx  客户端错误</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">400——错误请求，如语法错误</span><br><span class="line"></span><br><span class="line">401——请求授权失败，要求用户进行身份认证</span><br><span class="line"></span><br><span class="line">402——保留，将来使用</span><br><span class="line"></span><br><span class="line">403——请求不允许，服务器理解请求客户端的请求，但是拒绝执行此请求</span><br><span class="line"></span><br><span class="line">404——服务器无法根据客户端的请求找到资源（网页），广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情</span><br><span class="line">况下。</span><br><span class="line"></span><br><span class="line">405——客户端请求中的方法被禁止</span><br><span class="line"></span><br><span class="line">406——服务器无法根据客户端请求的内容特性完成请求</span><br><span class="line"></span><br><span class="line">407——请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权</span><br><span class="line"></span><br><span class="line">408——超时，服务器等待客户端发送的请求时间过长</span><br><span class="line"></span><br><span class="line">409——服务器完成客户端的 PUT 请求时可能返回此代码，服务器处理请求时发生了冲突</span><br><span class="line"></span><br><span class="line">410——客户端请求的资源已经不存在，包含旧资源失效原因</span><br><span class="line"></span><br><span class="line">411——服务器无法处理客户端发送的不带Content-Length的请求信息</span><br><span class="line"></span><br><span class="line">412——客户端请求信息的先决条件错误</span><br><span class="line"></span><br><span class="line">413——请求的资源大于服务器允许的大小，因此拒绝请求</span><br><span class="line"></span><br><span class="line">414——请求的资源URL长于服务器允许的长度，服务器无法处理</span><br><span class="line"></span><br><span class="line">415——服务器无法处理请求附带的媒体格式</span><br><span class="line"></span><br><span class="line">416——客户端请求的范围无效</span><br><span class="line"></span><br><span class="line">417——服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求</span><br></pre></td></tr></table></figure>

<h4 id="5xx-服务器错误"><a href="#5xx-服务器错误" class="headerlink" title="5xx 服务器错误"></a>5xx 服务器错误</h4><p>代表了服务器在处理请求的过程中有错误或者异常状态发生，也有可能是服务器意识到以当前的软硬件资源无法完成对请求的处理。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">500——服务器内部错误，无法完成请求</span><br><span class="line"></span><br><span class="line">501——服务器不支持请求的功能，无法完成请求</span><br><span class="line"></span><br><span class="line">502——服务器暂时不可用，有时是为了防止发生系统过载</span><br><span class="line"></span><br><span class="line">503——服务器过载或系统维护</span><br><span class="line"></span><br><span class="line">504——充当网关或代理的服务器，未及时从远端服务器获取请求</span><br><span class="line"></span><br><span class="line">505——服务器不支持或拒绝支请求头中指定的HTTP版本</span><br></pre></td></tr></table></figure>

<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>500错误</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">500错误是站长经常遇到的问题，就本人的经验，原因及解决方法归纳如下：</span><br><span class="line"></span><br><span class="line">1、运行的用户数过多，对服务器造成的压力过大，服务器无法响应，则报HTTP500错误。</span><br><span class="line"></span><br><span class="line">这个原因是网站报500错误的最主要原因，很多网站为什么突然会报500错误（service unavailable）呢？90%是由于空间压力过大，超出了空间商设定的上限而造成的。</span><br><span class="line"></span><br><span class="line">遇到这个问题，最好是第一时间找到空间商的售后服务，他们一般会帮你回收一下应用程序池，问题便得到解决。如果没有找到售后服务，可以自己在空间管理后台，找到“回收应用程序池”那个项目，自己手动执行一下即可。不过，一些空间管理后台并没有提供该项服务。</span><br><span class="line"></span><br><span class="line">2、如果排除了第1的可能性，那么很大原因便是程序上出现了问题。</span><br><span class="line"></span><br><span class="line">可以做个简单的测试页面，看是否能运行成功，再检测报错的页面，从而针对性的进行修改。</span><br><span class="line"></span><br><span class="line">该做关联的地方没有去做关联，则报HTTP500错误。进行手工或者自动关联，问题得到解决。</span><br><span class="line"></span><br><span class="line">3、如果测试中所进行的操作需要向数据库中插入数据，若大数据量的情况下导致数据库中表空间已满，或者缓冲池较小无法满足数据的存取等，都有可能导致HTTP500错误。</span><br><span class="line"></span><br><span class="line">解决方法是调整数据库、修改连接池大小等等，根据个人具体情况进行修正即可。</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>Stylus学习笔记</title>
    <url>/%E7%AC%94%E8%AE%B0/Stylus/</url>
    <content><![CDATA[<h1 id="Stylus学习笔记"><a href="#Stylus学习笔记" class="headerlink" title="Stylus学习笔记"></a>Stylus学习笔记</h1><ul>
<li>配置好环境，保证能正常使用Stylus</li>
<li>学习Stylus的基础语法</li>
<li>在开发中使用Stylus的便捷特性</li>
</ul>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>这个哥们儿学名叫 stylus，是 CSS 的预处理框架。</p>
<p>CSS 预处理，顾名思义，预先处理 CSS。那 stylus 咋预先处理呢？stylus 给 CSS 添加了可编程的特性，也就是说，在 stylus 中可以使用变量、函数、判断、循环一系列 CSS 没有的东西来编写样式文件，执行这一套骚操作之后，这个文件可编译成 CSS 文件。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先，安装 stylus（确保之前已经安装 nodejs ）。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install stylus</span></span><br></pre></td></tr></table></figure>

<p>安装之后，运行 <code>stylus -h</code> 可查看帮助。<br>运行 <code>stylus example.styl</code> 可将 demo.styl 文件编译成 example.css 文件。</p>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>一段简单的 stylus 代码：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="variable">$background</span>-<span class="attribute">color</span> = lightblue</span><br><span class="line">add (<span class="selector-tag">a</span>, <span class="selector-tag">b</span> = a)</span><br><span class="line">    <span class="selector-tag">a</span> = unit(<span class="selector-tag">a</span>, px)</span><br><span class="line">    <span class="selector-tag">b</span> = unit(<span class="selector-tag">b</span>, px)</span><br><span class="line">    <span class="selector-tag">a</span> + b</span><br><span class="line"></span><br><span class="line">.list-item</span><br><span class="line">.text-box</span><br><span class="line">    span</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="variable">$background</span>-color</span><br><span class="line">        <span class="attribute">margin</span>: add(<span class="number">10</span>)</span><br><span class="line">        <span class="attribute">padding</span>: add(<span class="number">10</span>, <span class="number">5</span>)</span><br><span class="line">    &amp;:hover</span><br><span class="line">        <span class="attribute">background-color</span>: powderblue</span><br></pre></td></tr></table></figure>

<p>编译后生成的 CSS 代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.list-item</span> <span class="selector-tag">span</span>,</span><br><span class="line"><span class="selector-class">.text-box</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#add8e6</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">15px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.list-item</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-class">.text-box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#b0e0e6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由此我们看到了 stylus 代码以及由它编译而成的 CSS 代码,下面来一步一步看一看为啥编译成这样。</p>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="variable">$background</span>-<span class="attribute">color</span> = lightblue</span><br></pre></td></tr></table></figure>

<p>上面的代码声明了变量 <code>$background-color</code>,并为其赋值 <code>lightblue</code>。<br>声明之后，就可以使用这个变量了：</p>
<figure class="highlight styl"><table><tr><td class="code"><pre><span class="line">span</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">$background</span>-color</span><br></pre></td></tr></table></figure>

<p>翻译成 CSS 就是：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">span</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: lightblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">add (<span class="selector-tag">a</span>, <span class="selector-tag">b</span> = a)</span><br><span class="line">    <span class="selector-tag">a</span> = unit(<span class="selector-tag">a</span>, px)</span><br><span class="line">    <span class="selector-tag">b</span> = unit(<span class="selector-tag">b</span>, px)</span><br><span class="line">    <span class="selector-tag">a</span> + b</span><br></pre></td></tr></table></figure>

<p>代码声明了函数 <code>add</code>, <code>add</code> 接受两个参数 <code>a</code> 和 <code>b</code>，其中 <code>b</code> 的默认值是 <code>a</code>。<br><code>add</code> 中调用了 stylus 的内置函数 <code>unit</code>，此处，<code>unit</code> 函数为 <code>a</code> 和 <code>b</code>赋予了单位 <code>px</code>。<br>最后将 <code>a</code> 和 <code>b</code> 相加，并返回结果，是的，你没有看错，没有 <code>return</code>，但是返回了结果。<br><code>return</code> 居然是可以省略的，很任性了。</p>
<p>函数调用：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">span</span><br><span class="line">    <span class="attribute">margin</span>: add(<span class="number">10</span>)</span><br><span class="line">    <span class="attribute">padding</span>: add(<span class="number">10</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<p>翻译成 CSS 就是：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">.list-item</span><br><span class="line">.text-box</span><br><span class="line">    span</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="variable">$background</span>-color</span><br><span class="line">        <span class="attribute">margin</span>: add(<span class="number">10</span>)</span><br><span class="line">        <span class="attribute">padding</span>: add(<span class="number">10</span>, <span class="number">5</span>)</span><br><span class="line">    &amp;:hover</span><br><span class="line">        <span class="attribute">background-color</span>: powderblue</span><br></pre></td></tr></table></figure>

<p>这一段是与 CSS 代码长得最像的了，虽说最为相像，可有些差别还是一眼就能看出的。<br>比如没有了 CSS 的花括号，没有了 CSS 的分号，却多了一些奇奇怪怪的缩进，还有那个 <code>&amp;</code> 是什么鬼？还 <code>&amp;:hover</code> ???<br>预知后事如何，这次接着分解。</p>
<p>先说符号，这里提到的花括号和分号在stylus中是可以省略的，不仅如此，冒号也是可以省略的，<code>color: powderblue</code> 你可以写成 <code>color powderblue</code>,没有问题。</p>
<p>再说缩进，先提出两个有缩进关系的选择器，上面代码片段第二行的 <code>.text-box</code> 和第三行的 <code>span</code>，其实很容易理解，这哥俩写到 CSS 里面是这样的：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">.text-box span&#123; ... &#125;</span><br></pre></td></tr></table></figure>

<p>即 <code>span</code> 是 <code>.text-box</code> 的子选择器，stylus 中以缩进表示这种关系，更加清晰明了，好看。</p>
<p>还有 <code>&amp;</code>，这是个新鲜东西。它是父级的引用，还是来看代码。</p>
<p>stylus这样写:</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">.list-item</span><br><span class="line">.text-box</span><br><span class="line">    &amp;:hover</span><br><span class="line">        <span class="attribute">background-color</span>: powderblue</span><br></pre></td></tr></table></figure>

<p>翻译成 CSS 是这样：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.list-item</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-class">.text-box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#b0e0e6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相信代码中已经能很明确地体现出 <code>&amp;</code> 父级引用的角色了。<br>同时，我们也不难看出，<code>.list-item</code> 和 <code>.text-box</code> 这两个同一级的选择器在 stylus 中是可以换行写的，只要保证缩进相同，它们就属于同一级的选择器。当然，沿用 CSS 的方式，将同一级的选择器用逗号分隔开在 stylus 中也是可以的。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>Stylus</tag>
      </tags>
  </entry>
  <entry>
    <title>vim编辑器</title>
    <url>/%E7%AC%94%E8%AE%B0/vim%E7%BC%96%E8%BE%91%E5%99%A8/</url>
    <content><![CDATA[<h1 id="vim编辑器"><a href="#vim编辑器" class="headerlink" title="vim编辑器"></a>vim编辑器</h1><p>vi 是老式的字处理器，而 vim 是在 vi 的基础上开发而来的，增加了代码补完、编译及错误跳转等方便编程的功能，可以说 vim 是一个程序开发工具。</p>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>vi/vim 分为三种模式，分别是<strong>命令模式（Command mode）</strong>，<strong>输入模式（Insert mode）</strong>和<strong>底线命令模式（Last line mode）</strong></p>
<p>通过·<code>vi/vim 文件名</code>，启动编辑器并打开文本(若文件不存在则创建)</p>
<h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><p>首先进入命令模式，此状态下敲击键盘的动作会被 Vim 识别为命令，而非输入字符。</p>
<p>常用命令：</p>
<ul>
<li><strong>i</strong> 切换到输入模式，以输入字符。</li>
<li><strong>x</strong> 删除当前光标所在处的字符。</li>
<li><strong>:</strong> 切换到底线命令模式，在最底一行输入命令。</li>
</ul>
<h3 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h3><p>按下 i, o, a 等可进入输入模式，该状态用于编辑文本</p>
<p>常用按键：</p>
<ul>
<li><strong>字符按键以及Shift组合</strong>，输入字符</li>
<li><strong>ENTER</strong>，回车键，换行</li>
<li><strong>BACK SPACE</strong>，退格键，删除光标前一个字符</li>
<li><strong>DEL</strong>，删除键，删除光标后一个字符</li>
<li><strong>HOME</strong>/<strong>END</strong>，移动光标到行首/行尾</li>
<li><strong>Page Up</strong>/<strong>Page Down</strong>，上/下翻页</li>
<li><strong>Insert</strong>，切换光标为输入/替换模式，光标将变成竖线/下划线</li>
<li><strong>ESC</strong>，退出输入模式，切换到命令模式</li>
</ul>
<h3 id="底线命令模式"><a href="#底线命令模式" class="headerlink" title="底线命令模式"></a>底线命令模式</h3><p>底线命令模式可以输入单个或多个字符的命令</p>
<p>常用命令：</p>
<ul>
<li>:q 退出程序</li>
<li>:w 保存文件</li>
<li>:wq 退出并保存</li>
<li>ESC 退回命令模式</li>
</ul>
<h2 id="进阶使用"><a href="#进阶使用" class="headerlink" title="进阶使用"></a>进阶使用</h2><h3 id="命令模式-1"><a href="#命令模式-1" class="headerlink" title="命令模式"></a>命令模式</h3><p>光标移动、复制粘贴、搜索替换等</p>
<h4 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h4><table>
<thead>
<tr>
<th>h 或 向左箭头键(←)</th>
<th>光标向左移动一个字符</th>
</tr>
</thead>
<tbody><tr>
<td>j 或 向下箭头键(↓)</td>
<td>光标向下移动一个字符</td>
</tr>
<tr>
<td>k 或 向上箭头键(↑)</td>
<td>光标向上移动一个字符</td>
</tr>
<tr>
<td>l 或 向右箭头键(→)</td>
<td>光标向右移动一个字符</td>
</tr>
<tr>
<td>n[↑/↓←/→]</td>
<td>向某个方向移动多少次</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>[Ctrl] + [f]</th>
<th>屏幕『向下』移动一页，=[Page Down]按键 (常用)</th>
</tr>
</thead>
<tbody><tr>
<td><strong>[Ctrl] + [b]</strong></td>
<td>屏幕『向上』移动一页，= [Page Up] 按键 (常用)</td>
</tr>
<tr>
<td>[Ctrl] + [d]</td>
<td>屏幕『向下』移动半页</td>
</tr>
<tr>
<td>[Ctrl] + [u]</td>
<td>屏幕『向上』移动半页</td>
</tr>
<tr>
<td>+</td>
<td>光标移动到非空格符的下一行</td>
</tr>
<tr>
<td>-</td>
<td>光标移动到非空格符的上一行</td>
</tr>
<tr>
<td>n<code>&lt;space&gt;</code></td>
<td>n 为数字 ，按下数字后再按空格键，光标会向后面移动 n 个字符</td>
</tr>
<tr>
<td>0</td>
<td>移动到这一行的最前面字符处 (常用) = [Home]</td>
</tr>
<tr>
<td>$</td>
<td>移动到这一行的最后面字符处(常用) = [End]</td>
</tr>
<tr>
<td>H</td>
<td>光标移动到这个屏幕的最上方那一行的第一个字符</td>
</tr>
<tr>
<td>M</td>
<td>光标移动到这个屏幕的中央那一行的第一个字符</td>
</tr>
<tr>
<td>L</td>
<td>光标移动到这个屏幕的最下方那一行的第一个字符</td>
</tr>
<tr>
<td><strong>G</strong></td>
<td>移动到这个档案的最后一行(常用)</td>
</tr>
<tr>
<td>nG</td>
<td>n 为数字。移动到这个档案的第 n 行(可配合 :set nu)</td>
</tr>
<tr>
<td><strong>gg</strong></td>
<td>移动到这个档案的第一行，相当于 1G 啊！ (常用)</td>
</tr>
<tr>
<td><strong>n<code>&lt;Enter&gt;</code></strong></td>
<td>n 为数字，光标向下移动 n 行(常用)</td>
</tr>
</tbody></table>
<h4 id="搜索替换"><a href="#搜索替换" class="headerlink" title="搜索替换"></a>搜索替换</h4><table>
<thead>
<tr>
<th>/word</th>
<th>向光标之下寻找一个名称为 word 的字符串 (常用)</th>
</tr>
</thead>
<tbody><tr>
<td>?word</td>
<td>向光标之上寻找一个字符串名称为 word 的字符串</td>
</tr>
<tr>
<td>n</td>
<td>n 为英文按键，表示重复前一个搜索动作</td>
</tr>
<tr>
<td>N</td>
<td>N 为英文按键，与 n 刚好相反，为『反向』进行前一个搜寻动作</td>
</tr>
<tr>
<td>:n1,n2s/word1/word2/g</td>
<td>n1 与 n2 为数字，在第 n1 与 n2 行之间寻找 word1 字符串，并用word2替换它(常用)</td>
</tr>
<tr>
<td>:1,$s/word1/word2/g 或 :%s/word1/word2/g</td>
<td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！(常用)</td>
</tr>
<tr>
<td>:1,$s/word1/word2/gc 或 :%s/word1/word2/gc</td>
<td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用)</td>
</tr>
</tbody></table>
<h4 id="删除、复制与粘贴"><a href="#删除、复制与粘贴" class="headerlink" title="删除、复制与粘贴"></a>删除、复制与粘贴</h4><table>
<thead>
<tr>
<th>x, X</th>
<th>在一行字当中，x 为向后删除一个字符 (= [del] 按键)， X 为向前删除一个字符(=[backspace]) (常用)</th>
</tr>
</thead>
<tbody><tr>
<td>nx</td>
<td>n 为数字，连续向后删除 n 个字符</td>
</tr>
<tr>
<td><strong>dd</strong></td>
<td>删除游标所在的那一整行(常用)</td>
</tr>
<tr>
<td><strong>ndd</strong></td>
<td>n 为数字，删除光标所在的向下 n 行(常用)</td>
</tr>
<tr>
<td>d1G</td>
<td>删除光标所在到第一行的所有数据</td>
</tr>
<tr>
<td>dG</td>
<td>删除光标所在到最后一行的所有数据</td>
</tr>
<tr>
<td>d$</td>
<td>删除游标所在处，到该行的最后一个字符</td>
</tr>
<tr>
<td>d0</td>
<td>那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符</td>
</tr>
<tr>
<td><strong>yy</strong></td>
<td>复制游标所在的那一行(常用)</td>
</tr>
<tr>
<td><strong>nyy</strong></td>
<td>n 为数字。复制光标所在的向下 n 行(常用)</td>
</tr>
<tr>
<td>y1G</td>
<td>复制游标所在行到第一行的所有数据</td>
</tr>
<tr>
<td>yG</td>
<td>复制游标所在行到最后一行的所有数据</td>
</tr>
<tr>
<td>y0</td>
<td>复制光标所在的那个字符到该行行首的所有数据</td>
</tr>
<tr>
<td>y$</td>
<td>复制光标所在的那个字符到该行行尾的所有数据</td>
</tr>
<tr>
<td><strong>p, P</strong></td>
<td>p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行(常用)</td>
</tr>
<tr>
<td>J</td>
<td>将光标所在行与下一行的数据结合成同一行</td>
</tr>
<tr>
<td>c</td>
<td>重复删除多个数据，例如向下删除 10 行，[ 10cj ]</td>
</tr>
<tr>
<td><strong>u</strong></td>
<td>复原前一个动作。(常用)</td>
</tr>
<tr>
<td><strong>[Ctrl]+r</strong></td>
<td>重做上一个动作。(常用)</td>
</tr>
<tr>
<td><strong>.</strong></td>
<td>小数点，重复前一个动作 (常用)</td>
</tr>
</tbody></table>
<h3 id="输入模式-1"><a href="#输入模式-1" class="headerlink" title="输入模式"></a>输入模式</h3><h4 id="进入"><a href="#进入" class="headerlink" title="进入"></a>进入</h4><table>
<thead>
<tr>
<th>i, I</th>
<th>进入输入模式： i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。 (常用)</th>
</tr>
</thead>
<tbody><tr>
<td>a, A</td>
<td>进入输入模式： a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。(常用)</td>
</tr>
<tr>
<td>o, O</td>
<td>进入输入模式： 这是英文字母 o 的大小写。o 为『在目前光标所在的下一行处输入新的一行』； O 为在目前光标所在处的上一行输入新的一行！(常用)</td>
</tr>
<tr>
<td>r, R</td>
<td>进入取代模式： r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用)</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h4 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h4><table>
<thead>
<tr>
<th>退出</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>[Esc]</td>
<td>退出编辑模式，回到命令模式中(常用)</td>
</tr>
</tbody></table>
<h3 id="底线命令模式-1"><a href="#底线命令模式-1" class="headerlink" title="底线命令模式"></a>底线命令模式</h3><h4 id="保存与离开"><a href="#保存与离开" class="headerlink" title="保存与离开"></a>保存与离开</h4><table>
<thead>
<tr>
<th>:w</th>
<th>将编辑的数据写入硬盘档案中(常用)</th>
</tr>
</thead>
<tbody><tr>
<td>:w!</td>
<td>若文件属性为『只读』时，强制写入该档案</td>
</tr>
<tr>
<td><strong>:q</strong></td>
<td>离开 vi (常用)</td>
</tr>
<tr>
<td>:q!</td>
<td>强制离开不储存档案</td>
</tr>
<tr>
<td><strong>:wq</strong></td>
<td>储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td>
</tr>
<tr>
<td>ZZ</td>
<td>大写的 Z ，若档案没有更动，则不储存离开，若档案已经被更动过，则储存后离开</td>
</tr>
<tr>
<td>:w [filename]</td>
<td>将编辑的数据储存成另一个档案（类似另存新档）</td>
</tr>
<tr>
<td>:r [filename]</td>
<td>在编辑的数据中，读入另一个档案的数据。亦即将 『filename』内容加到游标所在行后面</td>
</tr>
<tr>
<td>:n1,n2 w [filename]</td>
<td>将 n1 到 n2 的内容储存成 filename 这个档案</td>
</tr>
<tr>
<td>:! command</td>
<td>暂时离开 vi 到指令行模式下执行 command 的显示结果！</td>
</tr>
</tbody></table>
<h4 id="显示行号"><a href="#显示行号" class="headerlink" title="显示行号"></a>显示行号</h4><table>
<thead>
<tr>
<th>:set nu</th>
<th>显示行号，设定之后，会在每一行的前缀显示该行的行号</th>
</tr>
</thead>
<tbody><tr>
<td>:set nonu</td>
<td>与 set nu 相反，为取消行号！</td>
</tr>
</tbody></table>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="添加注释"><a href="#添加注释" class="headerlink" title="添加注释"></a>添加注释</h4><p><strong>块选择模式</strong></p>
<p>注释：<strong>Ctrl + v</strong> 进入块选择模式，选择要注释的行，再按大写的 <strong>I</strong> 进入行首插入模式，输入注释符号如 <strong>//</strong> 或 <strong>#</strong>，再按两下 <strong>ESC</strong>，会将选中的所有行首都加上注释</p>
<p>取消注释：<strong>Ctrl + v</strong> 进入块选择模式，选中要删除的行首的注释符号，注意 <strong>//</strong> 要选中两个，选好之后按 <strong>d</strong> 即可删除注释</p>
<p><strong>替换命令</strong></p>
<p>注释：<code>:起始行号,结束行号s/^/注释符/g</code></p>
<p>取消注释：<code>:起始行号,结束行号s/^注释符//g</code></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL学习笔记</title>
    <url>/%E7%AC%94%E8%AE%B0/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="《MySQL必知必会》学习笔记"><a href="#《MySQL必知必会》学习笔记" class="headerlink" title="《MySQL必知必会》学习笔记"></a>《MySQL必知必会》学习笔记</h1><h2 id="一、MySQL简介"><a href="#一、MySQL简介" class="headerlink" title="一、MySQL简介"></a>一、MySQL简介</h2><p>MySQL 是最流行的关系型数据库管理系统，是最好的 RDBMS应用软件之一。</p>
<h3 id="1-1-特点"><a href="#1-1-特点" class="headerlink" title="1.1    特点"></a>1.1    特点</h3><p>MySQL 是开源的，可定制，支持多系统多语言，使用标准 SQL 语言，支持大型的数据库</p>
<h3 id="1-2-数据库基本知识"><a href="#1-2-数据库基本知识" class="headerlink" title="1.2    数据库基本知识"></a>1.2    数据库基本知识</h3><p><strong>定义</strong>：数据库（Database）是按照数据结构来组织、存储和管理数据的仓库。</p>
<blockquote>
<p>每个数据库都有一个或多个不同的 API 用于创建，访问，管理，搜索和复制所保存的数据</p>
</blockquote>
<p><strong>关系型数据库</strong>：建立在关系模型基础上的数据库，借助于集合代数等数学概念和方法来处理数据库中的数据。</p>
<p><strong>关系型数据库特点：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.数据以表格的形式出现</span><br><span class="line">2.每行为各种记录名称</span><br><span class="line">3.每列为记录名称所对应的数据域</span><br><span class="line">4.许多的行和列组成一张表单</span><br><span class="line">5.若干的表单组成database</span><br></pre></td></tr></table></figure>

<p><strong>基本概念</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数据库: 数据库是一些关联表的集合。</span><br><span class="line">表: 表是数据的矩阵。在一个数据库中的表看起来像一个简单的电子表格。</span><br><span class="line">列: 一列(数据元素) 包含了相同类型的数据, 例如邮政编码的数据。</span><br><span class="line">行：一行（&#x3D;元组，或记录）是一组相关的数据，例如一条用户订阅的数据。</span><br><span class="line">冗余：存储两倍数据，冗余降低了性能，但提高了数据的安全性。</span><br><span class="line">主键：主键是唯一的。一个数据表中只能包含一个主键。你可以使用主键来查询数据。</span><br><span class="line">外键：外键用于关联两个表。</span><br><span class="line">复合键：复合键（组合键）将多个列作为一个索引键，一般用于复合索引。</span><br><span class="line">索引：使用索引可快速访问数据库表中的特定信息。索引是对数据库表中一列或多列的值进行排序的一种结构。类似于书籍的目录。</span><br><span class="line">参照完整性: 参照的完整性要求关系中不允许引用不存在的实体。与实体完整性是关系模型必须满足的完整性约束条件，目的是保证数据的一致性。</span><br></pre></td></tr></table></figure>

<h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><h3 id="2-1-下载"><a href="#2-1-下载" class="headerlink" title="2.1    下载"></a>2.1    下载</h3><p>官网地址：<span class="exturl" data-url="aHR0cDovL3d3dy5teXNxbC5jb20v" title="http://www.mysql.com/">http://www.mysql.com<i class="fa fa-external-link"></i></span></p>
<p>msi文件（<span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2Rvd25sb2Fkcy9maWxlLz9pZD00ODk5MTHvvIk=" title="https://dev.mysql.com/downloads/file/?id=489911）">https://dev.mysql.com/downloads/file/?id=489911）<i class="fa fa-external-link"></i></span></p>
<p>压缩zip版（<span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2Rvd25sb2Fkcy9maWxlLz9pZD00ODk2MDLvvIk=" title="https://dev.mysql.com/downloads/file/?id=489602）">https://dev.mysql.com/downloads/file/?id=489602）<i class="fa fa-external-link"></i></span></p>
<p>（可复制链接到迅雷下载，速度快点，本次为<strong>社区版 mysql 5.7.28.0</strong>）</p>
<h3 id="2-2-安装"><a href="#2-2-安装" class="headerlink" title="2.2    安装"></a>2.2    安装</h3><h4 id="2-2-1-免安装zip版"><a href="#2-2-1-免安装zip版" class="headerlink" title="2.2.1    免安装zip版"></a>2.2.1    免安装zip版</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.解压文件到目录，D:\Program Files\mysql-5.7.28-winx64</span><br><span class="line">2.创建data文件夹和my.ini文件</span><br><span class="line">3.bin目录下以管理员身份运行命令行工具，依次执行</span><br><span class="line">	mysqld --initialize-insecure	&#x2F;&#x2F;初始化数据库,会创建4个数据库（mysql，information_schema，performance_schema,sys)</span><br><span class="line">	mysqld -install		&#x2F;&#x2F;在Windows中安装MySQL系统服务</span><br><span class="line">	net start mysql		&#x2F;&#x2F;启动MySQL服务</span><br><span class="line">	mysql --version		&#x2F;&#x2F;查看mysql版本，检查是否安装成功</span><br><span class="line">4.登录</span><br><span class="line">	mysql -u root -p password CD3116006670	&#x2F;&#x2F;登录MySQL数据库同时设置root用户密码</span><br><span class="line">或</span><br><span class="line">	mysql -u root -p	&#x2F;&#x2F;提示输入密码时，直接回车</span><br><span class="line">	set password &#x3D; password(&#39;CD3116006670&#39;);	&#x2F;&#x2F;修改root用户密码</span><br></pre></td></tr></table></figure>

<p><strong>my.ini配置</strong>如下（路径要正确）：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="comment"># 设置mysql客户端默认字符集</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br><span class="line"></span><br><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="comment"># 设置3306端口</span></span><br><span class="line"><span class="attr">port</span> = <span class="number">3306</span> </span><br><span class="line"><span class="comment"># 设置mysql的安装目录</span></span><br><span class="line"><span class="attr">basedir</span>=D:\Program Files\mysql-<span class="number">5.7</span>.<span class="number">28</span>-winx64</span><br><span class="line"><span class="comment"># 设置mysql数据库的数据的存放目录</span></span><br><span class="line"><span class="attr">datadir</span>=D:\Program Files\mysql-<span class="number">5.7</span>.<span class="number">28</span>-winx64\data</span><br><span class="line"><span class="comment"># 允许最大连接数</span></span><br><span class="line"><span class="attr">max_connections</span>=<span class="number">200</span></span><br><span class="line"><span class="comment"># 设置mysql服务端默认字符集</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8</span><br><span class="line"><span class="comment"># 创建新表时将使用的默认存储引擎</span></span><br><span class="line"><span class="attr">default-storage-engine</span>=INNODB </span><br><span class="line"></span><br><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="comment"># 设置mysql客户端默认字符集</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br></pre></td></tr></table></figure>

<h4 id="2-2-2-msi文件版"><a href="#2-2-2-msi文件版" class="headerlink" title="2.2.2    msi文件版"></a>2.2.2    msi文件版</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.双击安装包</span><br><span class="line">2.选择安装类型Custom：</span><br><span class="line">	Developer Default : 开发者默认，会安装所有MySQL开发需要的产品，不建议使用</span><br><span class="line">	Server only : 只安装MySQL服务，通常在部署MySQL服务使用</span><br><span class="line">	Client only : 只安装MySQL客户端</span><br><span class="line">	Full : 安装MySQL包含的所有产品和特性</span><br><span class="line">	Custom：用户自定义安装 </span><br><span class="line">3.选择安装产品和特性，MySQL Server</span><br><span class="line">4.配置MySQL服务（next）</span><br><span class="line">5.配置密码（root用户的密码）</span><br><span class="line">6.设置为Windows服务和开启自动启动</span><br><span class="line">7.execute执行</span><br></pre></td></tr></table></figure>

<h3 id="2-3-根目录解析"><a href="#2-3-根目录解析" class="headerlink" title="2.3     根目录解析"></a>2.3     根目录解析</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bin目录下保存了MySQL常用的命令工具以及管理工具</span><br><span class="line">data目录是MySQL默认用来保存数据文件以及日志文件的地方</span><br><span class="line">docs目录下是MySQL的帮助文档</span><br><span class="line">include目录和lib目录是MySQL所依赖的头文件以及库文件</span><br><span class="line">share目录下保存目录文件以及日志文件</span><br></pre></td></tr></table></figure>

<h3 id="2-4-使用命令行实用程序"><a href="#2-4-使用命令行实用程序" class="headerlink" title="2.4    使用命令行实用程序"></a>2.4    使用命令行实用程序</h3><p>配置环境变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">新变量：D:\Program Files\mysql-5.7.28-winx64</span><br><span class="line">path变量：D:\Program Files\mysql-5.7.28-winx64\bin</span><br></pre></td></tr></table></figure>

<p>常用的两个命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u root -p	&#x2F;&#x2F;以root身份登录MySQL</span><br><span class="line">quit;			   &#x2F;&#x2F;退出MySQL操作管理界面</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">小知识：</span><br><span class="line">命令不区分大小写</span><br><span class="line">-&gt; 是换行符标识</span><br><span class="line"> ; 是命令终止符</span><br><span class="line">表名与字段名可使用反引号</span><br></pre></td></tr></table></figure>

<h3 id="2-5-使用图形化管理工具-GUI"><a href="#2-5-使用图形化管理工具-GUI" class="headerlink" title="2.5    使用图形化管理工具(GUI)"></a>2.5    使用图形化管理工具(GUI)</h3><p><strong>Navicat</strong></p>
<p>使用最多的mysql图形用户管理工具，与微软的SQLServer管理器相像，简单易学，支持中文，要付费。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">破解版</span><br><span class="line">吾爱大佬：https:&#x2F;&#x2F;www.52pojie.cn&#x2F;thread-934566-1-1.html</span><br><span class="line">百度云</span><br><span class="line">链接: https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1M8TkdgfYLwpvkwrbosx2Ug 提取码: 0226</span><br></pre></td></tr></table></figure>

<p><strong>Workbench</strong></p>
<p>官方图形化管理工具，支持数据库的创建、设计、迁移、备份、导出、导入等功能，支持windows、linux、mac等主流操作系统</p>
<p><strong>PhpMyadmin</strong></p>
<p>使用PHP编程语言开发的基于web方式的网页版mysql图形化管理工具，支持中文、界面友好、简洁，方便管理，但是对于数据量大的操作容易导致页面请求超时</p>
<p>其它：SQLyog、HeidiSql、datagrip、dbeaver</p>
<h2 id="三、基本使用"><a href="#三、基本使用" class="headerlink" title="三、基本使用"></a>三、基本使用</h2><h3 id="3-1-服务器的启动和关闭"><a href="#3-1-服务器的启动和关闭" class="headerlink" title="3.1     服务器的启动和关闭"></a>3.1     服务器的启动和关闭</h3><p>1.win+R 输入<code>services.msc</code>打开 windows的服务管理器来开启或关闭 MySQL 服务</p>
<p>2.通过<code>cmd</code>使用<code>net</code>命令（net.exe在目录 C:\windows\system32\ 下）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net start mysql 	&#x2F;&#x2F;启动mysql服务</span><br><span class="line">net stop mysql  	&#x2F;&#x2F;关闭mysql服务</span><br></pre></td></tr></table></figure>

<h3 id="3-2-连接登陆mysql"><a href="#3-2-连接登陆mysql" class="headerlink" title="3.2    连接登陆mysql"></a>3.2    连接登陆mysql</h3><p>MySQL在内部mysql数据库的user表中保存自己的用户列表，且把每个用户与各种权限关联起来。</p>
<p>连接所需的信息有：主机名，端口号，用户名，用户口令（即密码）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -h 主机名 -u 用户名 -p	&#x2F;&#x2F;连接MySQL，root密码：CD3116006670</span><br></pre></td></tr></table></figure>

<h3 id="3-3-SHOW命令"><a href="#3-3-SHOW命令" class="headerlink" title="3.3    SHOW命令"></a>3.3    SHOW命令</h3><p>用于显示用户、权限、数据库、表等内部信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HELP SHOW					&#x2F;&#x2F;显示所有允许的SHOW命令</span><br><span class="line">SHOW DATABASES;				&#x2F;&#x2F;显示所有数据库</span><br><span class="line">SHOW TABLES;				&#x2F;&#x2F;显示当前数据库内的表</span><br><span class="line">SHOW COLUMNS FROM table_name  &#x2F;&#x2F;显示表列</span><br><span class="line">(对每个字段返回一行，行中包含字段名、数据类型，是否允许NULL，键，默认值等，快捷方式为：DESCRIBE table_name;)</span><br><span class="line">SHOW STATUS					&#x2F;&#x2F;显示服务器状态</span><br><span class="line">SHOW GRANTS					&#x2F;&#x2F;显示用户的安全权限</span><br><span class="line">SHOW ERRORS					&#x2F;&#x2F;显示服务器错误</span><br><span class="line">SHOW WARNINGS				&#x2F;&#x2F;显示服务器警告</span><br></pre></td></tr></table></figure>

<h3 id="3-4-数据库管理"><a href="#3-4-数据库管理" class="headerlink" title="3.4    数据库管理"></a>3.4    数据库管理</h3><h4 id="3-4-1-创建数据库"><a href="#3-4-1-创建数据库" class="headerlink" title="3.4.1    创建数据库"></a>3.4.1    创建数据库</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> 数据库名;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> 数据库名 <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci;	</span><br><span class="line">//数据库不存在则创建，存在则不创建，同时设定编码集为utf8</span><br></pre></td></tr></table></figure>

<h4 id="3-4-2-删除数据库"><a href="#3-4-2-删除数据库" class="headerlink" title="3.4.2    删除数据库"></a>3.4.2    删除数据库</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> 数据库名;</span><br></pre></td></tr></table></figure>

<h4 id="3-4-3-选择数据库"><a href="#3-4-3-选择数据库" class="headerlink" title="3.4.3    选择数据库"></a>3.4.3    选择数据库</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">USE</span> 数据库名;</span><br></pre></td></tr></table></figure>

<h3 id="3-5-数据表管理"><a href="#3-5-数据表管理" class="headerlink" title="3.5    数据表管理"></a>3.5    数据表管理</h3><p>MySQL数据字段的类型可分为三类：数值、日期/时间和字符串(字符)类型</p>
<h4 id="3-5-1-创建数据表-CREATE-TABLE"><a href="#3-5-1-创建数据表-CREATE-TABLE" class="headerlink" title="3.5.1    创建数据表(CREATE TABLE)"></a>3.5.1    创建数据表(CREATE TABLE)</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> customers</span><br><span class="line">(</span><br><span class="line">  cust_id      <span class="built_in">int</span>       <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  cust_name    <span class="built_in">char</span>(<span class="number">50</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span> ,</span><br><span class="line">  cust_address <span class="built_in">char</span>(<span class="number">50</span>)  <span class="literal">NULL</span> ,</span><br><span class="line">  cust_city    <span class="built_in">char</span>(<span class="number">50</span>)  <span class="literal">NULL</span> ,</span><br><span class="line">  cust_state   <span class="built_in">char</span>(<span class="number">5</span>)   <span class="literal">NULL</span> ,</span><br><span class="line">  cust_zip     <span class="built_in">char</span>(<span class="number">10</span>)  <span class="literal">NULL</span> ,</span><br><span class="line">  cust_country <span class="built_in">char</span>(<span class="number">50</span>)  <span class="literal">NULL</span> ,</span><br><span class="line">  cust_contact <span class="built_in">char</span>(<span class="number">50</span>)  <span class="literal">NULL</span> ,</span><br><span class="line">  cust_email   <span class="built_in">char</span>(<span class="number">255</span>) <span class="literal">NULL</span> ,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (cust_id)</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span>;</span><br><span class="line">//给出表名，列名及其定义</span><br><span class="line">//3种创建形式：图形化工具、MySQL语句、脚本</span><br></pre></td></tr></table></figure>

<p><strong>NOT NULL</strong>    </p>
<p>定义列为非空，不指定默认NULL</p>
<p><strong>PRIMARY KEY</strong>    </p>
<p>定义列为主键，定义多列为主键时，列名以逗号分隔，这些列的组合值必须唯一</p>
<p><strong>AUTO_INCREMENT</strong>    </p>
<p>定义列为自动增量，一个表只允许一个，且必须被索引，一般用于主键；</p>
<p>每执行一次 INSERT ，数值会自动加1；</p>
<p>插入时若是手动给该列赋值，则后续的增量会从该值开始；</p>
<p>SELECT last_insert_id() 语句返回最后一个AUTO_INCREMENT 值。</p>
<p><strong>IF NOT EXITSTS</strong> </p>
<p>位于表名后，表示只在表名不存在时创建（已存在时不会覆盖，会报错）</p>
<p><strong>DEFAULT</strong> </p>
<p>指定默认值，为常量，不允许函数，一般使用默认值而不是NULL值</p>
<p><strong>ENGINE</strong> </p>
<p>指定管理和处理数据的引擎，不同表可以使用不同引擎，但外键不能跨引擎</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">InnoDB 事务处理引擎，不支持全文本搜索</span><br><span class="line">MyISAM 性能较高，支持全文本搜索，不支持事务处理</span><br><span class="line">MEMORY 类似MyISAM，但数据存储在内存，速度更快</span><br></pre></td></tr></table></figure>

<p><strong>CHARSET</strong></p>
<p>设置编码</p>
<h4 id="3-5-2-更新数据表-ALTER-TABLE"><a href="#3-5-2-更新数据表-ALTER-TABLE" class="headerlink" title="3.5.2    更新数据表(ALTER TABLE)"></a>3.5.2    更新数据表(ALTER TABLE)</h4><p>使用 ALTER TABLE 语句更新表的定义(少用，尽量备份再使用)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">//增加列</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> vendors</span><br><span class="line"><span class="keyword">ADD</span> vend_phone <span class="built_in">CHAR</span>(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">//修改列</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> vendors</span><br><span class="line"><span class="keyword">CHANGE</span> vend_phone vend_tel <span class="built_in">CHAR</span>(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">//删除列</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> vendors</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">COLUMN</span> vend_tel;</span><br><span class="line"></span><br><span class="line">//定义外键</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> orderitems</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_orderitems_orders <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (order_num)</span><br><span class="line"><span class="keyword">REFERENCES</span> orders (order_num);</span><br></pre></td></tr></table></figure>

<p>复杂的表结构更改(新表换旧表)：</p>
<ul>
<li>创建新列布局的新表</li>
<li>从旧表复制数据到新表(INSERT SELECT)</li>
<li>重命名旧表或删除</li>
<li>用旧表名重命名新表</li>
<li>重新创建触发器、存储过程、索引和外键</li>
</ul>
<h4 id="3-5-3-删除数据表-DROP-TABLE"><a href="#3-5-3-删除数据表-DROP-TABLE" class="headerlink" title="3.5.3    删除数据表(DROP TABLE )"></a>3.5.3    删除数据表(DROP TABLE )</h4><p>永久删除整个表而不仅仅是表中的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> table_name;</span><br></pre></td></tr></table></figure>

<h4 id="3-5-4-重命名数据表-RENAME-TABLE"><a href="#3-5-4-重命名数据表-RENAME-TABLE" class="headerlink" title="3.5.4    重命名数据表(RENAME TABLE)"></a>3.5.4    重命名数据表(RENAME TABLE)</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RENAME</span> <span class="keyword">TABLE</span> old_name <span class="keyword">TO</span> new_name;</span><br><span class="line">//多个表重命名用逗号分隔</span><br><span class="line">或</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> old_name <span class="keyword">RENAME</span> <span class="keyword">TO</span> new_name;</span><br></pre></td></tr></table></figure>

<h3 id="3-6-数据管理"><a href="#3-6-数据管理" class="headerlink" title="3.6    数据管理"></a>3.6    数据管理</h3><h4 id="3-6-1-插入数据-INSERT"><a href="#3-6-1-插入数据-INSERT" class="headerlink" title="3.6.1    插入数据(INSERT)"></a>3.6.1    插入数据(INSERT)</h4><p>将数据插入表中</p>
<p><strong>插入完整的行</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Customers</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="literal">NULL</span>,<span class="string">'Pep E. LaPew'</span>,<span class="string">'100 Main Street'</span>,<span class="string">'Los Angeles'</span>,<span class="string">'CA'</span>,<span class="string">'90046'</span>,<span class="string">'USA'</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line">//基本的<span class="keyword">INSERT</span>语法，指定表名和新行的值</span><br><span class="line">//给所有的列添加数据，高度依赖于表定义的列的次序</span><br><span class="line">//允许空值的列可指定<span class="literal">NULL</span>值</span><br><span class="line"></span><br><span class="line">更安全的方法：指定列名，次序随意，对应就行</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> customers(cust_name, cust_address, cust_city, cust_state, cust_zip, cust_country, cust_contact, cust_email)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">'Pep E. LaPew'</span>,<span class="string">'100 Main Street'</span>,<span class="string">'Los Angeles'</span>,<span class="string">'CA'</span>,<span class="string">'90046'</span>,<span class="string">'USA'</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line">//可以只给出部分列，即省略列（允许空值或拥有默认值的列）</span><br><span class="line">//对于给定的列名必须给出一个值</span><br></pre></td></tr></table></figure>

<p><strong>插入多个行</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> customers(cust_name, cust_address, cust_city, cust_state, cust_zip, cust_country)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">'Pep E. LaPew'</span>,<span class="string">'100 Main Street'</span>,<span class="string">'Los Angeles'</span>,<span class="string">'CA'</span>,<span class="string">'90046'</span>,<span class="string">'USA'</span>),</span><br><span class="line">(<span class="string">'M. Martian'</span>,<span class="string">'42 Galaxy Way'</span>,<span class="string">'New York'</span>,<span class="string">'NY'</span>,<span class="string">'11213'</span>,<span class="string">'USA'</span>);</span><br><span class="line">//每组值用圆括号括起来，逗号分隔</span><br><span class="line">//也可以一次提交多条<span class="keyword">INSERT</span>语句，但性能较差</span><br></pre></td></tr></table></figure>

<p><strong>插入检索的数据（INSERT SELECT）</strong></p>
<p>插入其他表中的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> customers(</span><br><span class="line">cust_id, cust_name, cust_address, cust_city, cust_state, cust_zip, cust_country, cust_contact, cust_email)</span><br><span class="line"><span class="keyword">SELECT</span> cust_id, cust_name, cust_address, cust_city, cust_state, cust_zip, cust_country, cust_contact, cust_email</span><br><span class="line"><span class="keyword">FROM</span> custnew;</span><br><span class="line">//<span class="keyword">INSERT</span> <span class="keyword">SELECT</span> 中的列名可不相同，默认将<span class="keyword">SELECT</span>的第一列填充到<span class="keyword">INSERT</span>指定的第一列</span><br><span class="line">//可以使用<span class="keyword">WHERE</span>过滤插入的数据</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<p>插入时主键值不能重复；</p>
<p>可使用 LOW_PRIORITY 关键字降低 INSRERT 语句的优先级<code>INSERT LOW_PRIORITY INTO</code></p>
<h4 id="3-6-2-更新数据-UPDATE"><a href="#3-6-2-更新数据-UPDATE" class="headerlink" title="3.6.2    更新数据(UPDATE)"></a>3.6.2    更新数据(UPDATE)</h4><p>指定要更新的表，列名和新值以及过滤条件</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> customers</span><br><span class="line"><span class="keyword">SET</span> cust_name = <span class="string">'Tree'</span>,</span><br><span class="line">	cust_email = <span class="string">'elmer@fudd.com'</span>,</span><br><span class="line"><span class="keyword">WHERE</span> cust_id = <span class="number">10005</span>;</span><br><span class="line">//多个'列=值'之间用逗号分隔</span><br><span class="line">//不使用过滤条件会更新所有行</span><br><span class="line">//使用 IGNORE 关键字可使MySQL在插入数据时忽略错误继续更新 <span class="keyword">UPDATE</span> <span class="keyword">IGNORE</span></span><br></pre></td></tr></table></figure>

<h4 id="3-6-3-删除数据-DELETE"><a href="#3-6-3-删除数据-DELETE" class="headerlink" title="3.6.3    删除数据(DELETE)"></a>3.6.3    删除数据(DELETE)</h4><p>删除特定的列值使用 UPDATA</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> customers</span><br><span class="line"><span class="keyword">SET</span> cust_email= <span class="string">'NULL'</span>,</span><br><span class="line"><span class="keyword">WHERE</span> cust_id = <span class="number">10005</span>;</span><br></pre></td></tr></table></figure>

<p>删除所有行或特定的行</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_id = <span class="number">10006</span>;</span><br><span class="line">//删除的是表的内容而不是表，依旧保留表结构</span><br><span class="line">//不用 WHERE 则删除表中所有行</span><br><span class="line">//删除所有数据的快捷方法： <span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> (删除原表并新建一个空表)</span><br><span class="line">//强制实施引用完整性的数据库(MySQL)不允许删除具有与其他表相关联的数据的行</span><br><span class="line">//MySQL没有撤销功能(<span class="keyword">undo</span>)</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">optimize table table_name;						 	   &#x2F;&#x2F;立刻释放磁盘空间</span><br></pre></td></tr></table></figure>

<h2 id="四、SELECT-语句（查询）"><a href="#四、SELECT-语句（查询）" class="headerlink" title="四、SELECT 语句（查询）"></a>四、SELECT 语句（查询）</h2><h3 id="4-1-SQL语句简介"><a href="#4-1-SQL语句简介" class="headerlink" title="4.1    SQL语句简介"></a>4.1    SQL语句简介</h3><p>不区分大小写，但SQL关键字常使用大写，表名和列名用小写，忽略空格，以<code>;</code>结束语句；</p>
<h3 id="4-2-SELECT语句（检索）"><a href="#4-2-SELECT语句（检索）" class="headerlink" title="4.2    SELECT语句（检索）"></a>4.2    SELECT语句（检索）</h3><p>从一个或多个表中检索数据列，返回原始无格式的数据，数据的表示由具体程序实现（如命令行工具）</p>
<h4 id="4-2-1-检索单个表列"><a href="#4-2-1-检索单个表列" class="headerlink" title="4.2.1 检索单个表列"></a>4.2.1 检索单个表列</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name <span class="keyword">FROM</span> table_name;</span><br><span class="line">//没有排序，没有过滤，返回表中所有行</span><br></pre></td></tr></table></figure>

<h4 id="4-2-2-检索多个表列"><a href="#4-2-2-检索多个表列" class="headerlink" title="4.2.2    检索多个表列"></a>4.2.2    检索多个表列</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name,column_name... <span class="keyword">FROM</span> table_name;</span><br><span class="line">//多个列名之间用,分割，最后一个列不用</span><br></pre></td></tr></table></figure>

<h4 id="4-2-3-检索所有表列"><a href="#4-2-3-检索所有表列" class="headerlink" title="4.2.3    检索所有表列"></a>4.2.3    检索所有表列</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table_name;</span><br><span class="line">//可用于检索名字未知的列</span><br></pre></td></tr></table></figure>

<h4 id="4-2-4-检索不同的行"><a href="#4-2-4-检索不同的行" class="headerlink" title="4.2.4    检索不同的行"></a>4.2.4    检索不同的行</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT DISTINCT column_name FROM table_name;</span><br><span class="line">&#x2F;&#x2F;只返回不同的行，相同的合并，作用于其后的所有列</span><br></pre></td></tr></table></figure>

<h4 id="4-2-5-限制结果行数"><a href="#4-2-5-限制结果行数" class="headerlink" title="4.2.5    限制结果行数"></a>4.2.5    限制结果行数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT column_name </span><br><span class="line">FROM table_name</span><br><span class="line">LIMIT num1,num2;</span><br><span class="line">&#x2F;&#x2F;返回从行num1开始的num2行</span><br><span class="line">num1开始行，num2行数（第一行为0）</span><br><span class="line">等价于：</span><br><span class="line">SELECT column_name </span><br><span class="line">FROM table_name</span><br><span class="line">LIMIT num1 OFFSET num2;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-6-限定表面和列名"><a href="#4-2-6-限定表面和列名" class="headerlink" title="4.2.6    限定表面和列名"></a>4.2.6    限定表面和列名</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT table_name.column_name </span><br><span class="line">FROM database_name.table_name</span><br></pre></td></tr></table></figure>

<p><strong>模式</strong></p>
<p><strong>字典</strong></p>
<h3 id="4-3-ORDER-BY-子句（排序）"><a href="#4-3-ORDER-BY-子句（排序）" class="headerlink" title="4.3    ORDER BY 子句（排序）"></a>4.3    ORDER BY 子句（排序）</h3><p>ORDER BY 子句可根据需要排序检索出的数据</p>
<blockquote>
<p>子句：SQL语句由子句构成，一个子句由一个关键字和所提供的数据组成，如 FROM 子句，WHERE 子句等</p>
</blockquote>
<h4 id="4-3-1-默认顺序"><a href="#4-3-1-默认顺序" class="headerlink" title="4.3.1    默认顺序"></a>4.3.1    默认顺序</h4><p>通过 SELECCT 语句检索出的数据默认按照其在底层表中的顺序显示，一般为数据添加到表中的顺序。但对表进行更新或删除等操作时会影响该顺序，故认为该顺序<strong>无意义</strong>。</p>
<h4 id="4-3-2-按列排序"><a href="#4-3-2-按列排序" class="headerlink" title="4.3.2    按列排序"></a>4.3.2    按列排序</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT column_name </span><br><span class="line">FROM table_name</span><br><span class="line">ORDER BY column_name，column_name...;</span><br><span class="line">&#x2F;&#x2F;ORDER BY 后接排序的依据：列（包括非选择列），默认升序</span><br><span class="line">按多列排序时，列名以(,)分割，依次排序</span><br></pre></td></tr></table></figure>

<h4 id="4-3-3-指定排序方向"><a href="#4-3-3-指定排序方向" class="headerlink" title="4.3.3    指定排序方向"></a>4.3.3    指定排序方向</h4><p>默认按升序（ASC）排序，需要降序时使用DESC关键字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT column_name </span><br><span class="line">FROM table_name</span><br><span class="line">ORDER BY column_name DESC;</span><br><span class="line">&#x2F;&#x2F;DESC关键字只作用于前面的列，多列时要逐一指定</span><br><span class="line">字母大小写的顺序由具体数据库决定，一般视为同字母相同</span><br></pre></td></tr></table></figure>

<blockquote>
<p>位置：FROM子句之后，LIMIT子句之前</p>
</blockquote>
<h3 id="4-4-WHERE-子句（过滤）"><a href="#4-4-WHERE-子句（过滤）" class="headerlink" title="4.4     WHERE 子句（过滤）"></a>4.4     WHERE 子句（过滤）</h3><p>指定搜索条件(condition)，提取数据表的子集，只检索所需数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT column_name </span><br><span class="line">FROM table_name</span><br><span class="line">WHERE condition;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>位置：FROM子句之后，ORDER BY子句前</p>
</blockquote>
<h4 id="4-4-1-条件操作符"><a href="#4-4-1-条件操作符" class="headerlink" title="4.4.1    条件操作符"></a>4.4.1    条件操作符</h4><h5 id="WHERE-子句条件操作符"><a href="#WHERE-子句条件操作符" class="headerlink" title="WHERE 子句条件操作符"></a>WHERE 子句条件操作符</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x3D;		等于</span><br><span class="line">&lt;&gt;		不等于</span><br><span class="line">!&#x3D;		不等于</span><br><span class="line">&lt;		小于</span><br><span class="line">&lt;&#x3D;		小于或等于</span><br><span class="line">&gt;		大于</span><br><span class="line">&gt;+		大于或等于</span><br><span class="line">BETWEEN	 两个值之间（包含开始值和结束值）</span><br><span class="line">IS NULL	 非空</span><br></pre></td></tr></table></figure>

<h5 id="匹配单值"><a href="#匹配单值" class="headerlink" title="匹配单值"></a>匹配单值</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT prod_name,prod_price </span><br><span class="line">FROM products</span><br><span class="line">WHERE prod_name &#x3D; &#39;fuses&#39;;</span><br><span class="line">&#x2F;&#x2F;条件默认不区分大小写</span><br></pre></td></tr></table></figure>

<h5 id="不匹配"><a href="#不匹配" class="headerlink" title="不匹配"></a>不匹配</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT vend_id,prod_name </span><br><span class="line">FROM products</span><br><span class="line">WHERE vend_id !&#x3D; 1003;</span><br><span class="line">&#x2F;&#x2F;当数据为字符串时要添加单引号，与数值列比较时不需要</span><br></pre></td></tr></table></figure>

<h5 id="匹配范围值"><a href="#匹配范围值" class="headerlink" title="匹配范围值"></a>匹配范围值</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT prod_name,prod_price </span><br><span class="line">FROM products</span><br><span class="line">WHERE prod_price BETWEEN 5 AND 10;</span><br><span class="line">&#x2F;&#x2F;两个值之间用 AND 关键字分割</span><br></pre></td></tr></table></figure>

<h5 id="匹配空值"><a href="#匹配空值" class="headerlink" title="匹配空值"></a>匹配空值</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_id</span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_email <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br><span class="line">//NULL 空值，与 0 ，空格，空字符不同</span><br></pre></td></tr></table></figure>

<p>注：过滤数据时常常需要验证返回的数据是否含有过滤列为NULL的行</p>
<h4 id="4-4-2-逻辑操作符"><a href="#4-4-2-逻辑操作符" class="headerlink" title="4.4.2    逻辑操作符"></a>4.4.2    逻辑操作符</h4><p>用来联结或改变WHER子句中的子句的关键字</p>
<blockquote>
<p>组合多个搜索条件建立功能更强更高级的WHER子句</p>
</blockquote>
<h5 id="AND操作符"><a href="#AND操作符" class="headerlink" title="AND操作符"></a>AND操作符</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id,prod_name,prod_price </span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id = <span class="number">1003</span> <span class="keyword">AND</span> prod_price &lt;= <span class="number">10</span>;</span><br><span class="line">//通过多个列进行过滤，检索满足所有给定条件的行</span><br></pre></td></tr></table></figure>

<h5 id="OR-操作符"><a href="#OR-操作符" class="headerlink" title="OR 操作符"></a>OR 操作符</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT prod_name,prod_price </span><br><span class="line">FROM products</span><br><span class="line">WHERE vend_id &#x3D; 1002 OR vend_id &#x3D; 1003;</span><br><span class="line">&#x2F;&#x2F;检索匹配任一给定条件的行</span><br></pre></td></tr></table></figure>

<p>计算次序：AND拥有比OR更高的优先级，一般使用圆括号分组明确指出计算顺序</p>
<h5 id="IN-操作符"><a href="#IN-操作符" class="headerlink" title="IN 操作符"></a>IN 操作符</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT prod_name,prod_price </span><br><span class="line">FROM products</span><br><span class="line">WHERE vend_id IN (1002,1003)</span><br><span class="line">ORDER BY prod_name;</span><br><span class="line">&#x2F;&#x2F;指定要匹配值的范围，给出合法值清单，与OR功能相当</span><br></pre></td></tr></table></figure>

<p>优点：</p>
<ul>
<li>对于合法值选项很长时，更清楚直观</li>
<li>比OR操作符执行更快</li>
<li>可包含其它SELECT语句</li>
<li>计算次序更易管理</li>
</ul>
<h5 id="NOT-操作符"><a href="#NOT-操作符" class="headerlink" title="NOT 操作符"></a>NOT 操作符</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT prod_name,prod_price </span><br><span class="line">FROM products</span><br><span class="line">WHERE vend_id NOT IN (1002,1003)</span><br><span class="line">ORDER BY prod_name;</span><br><span class="line">&#x2F;&#x2F;否定后跟条件，mysql中可对IN，BETWEEN和EXISTS子句取反</span><br></pre></td></tr></table></figure>

<h4 id="4-4-3-通配符"><a href="#4-4-3-通配符" class="headerlink" title="4.4.3    通配符"></a>4.4.3    通配符</h4><p>WHERE子句中具有特殊含义的字符，用于匹配值的一部分</p>
<p>可在搜索模式中任意位置使用任意多次</p>
<p>通配符搜索比一般的搜索要处理更长时间</p>
<h5 id="LIKE操作符"><a href="#LIKE操作符" class="headerlink" title="LIKE操作符"></a>LIKE操作符</h5><p>搜索模式：由字面值、通配符或两者组合成的搜索条件</p>
<p>使用LIKE操作符表明后跟通配符搜索模式进行过滤（此时LIKE称为谓词）</p>
<h5 id="百分号通配符"><a href="#百分号通配符" class="headerlink" title="百分号通配符 %"></a>百分号通配符 %</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id,prod_name </span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name <span class="keyword">LIKE</span> <span class="string">'jet%'</span>;</span><br><span class="line">//%表示任意字符出现任意次数</span><br><span class="line">//不匹配NULL值</span><br></pre></td></tr></table></figure>

<h5 id="下划线通配符"><a href="#下划线通配符" class="headerlink" title="下划线通配符 _"></a>下划线通配符 _</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id,prod_name </span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name <span class="keyword">LIKE</span> <span class="string">'_ ton anvil'</span>;</span><br><span class="line">//_只匹配单个字符</span><br></pre></td></tr></table></figure>

<p><strong>使用技巧</strong></p>
<p>尽量不用通配符</p>
<p>不要在搜索模式开始处使用通配符</p>
<h4 id="4-4-4-正则表达式"><a href="#4-4-4-正则表达式" class="headerlink" title="4.4.4    正则表达式"></a>4.4.4    正则表达式</h4><p>用来匹配文本的特殊的串（字符集合)</p>
<p>学习：正则表达式语言的语法和指令</p>
<p>MySQL 的 WHERE 子句对正则表达式提供了初步支持，使用 REGEXP 关键字表明将其后的模式作为正则表达式处理，如果被匹配的文本在列值中出现则返回相应的行。</p>
<h5 id="匹配基本字符"><a href="#匹配基本字符" class="headerlink" title="匹配基本字符"></a>匹配基本字符</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT prod_name </span><br><span class="line">FROM products</span><br><span class="line">WHERE prod_name REGEXP &#39;.000&#39;;</span><br><span class="line">&#x2F;&#x2F; . 表示匹配任意一个字符</span><br><span class="line"></span><br><span class="line">WHERE prod_name REGEXP BINARY &#39;JetPack .000&#39;;</span><br><span class="line">&#x2F;&#x2F;默认不区分大小写，需要时使用 BINARY 关键字</span><br></pre></td></tr></table></figure>

<h5 id="OR-匹配"><a href="#OR-匹配" class="headerlink" title="OR 匹配"></a>OR 匹配</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT prod_name </span><br><span class="line">FROM products</span><br><span class="line">WHERE prod_name REGEXP &#39;1000|2000&#39;;</span><br><span class="line">&#x2F;&#x2F; | 类似于OR关键字，可多次使用</span><br></pre></td></tr></table></figure>

<h5 id="匹配特定字符"><a href="#匹配特定字符" class="headerlink" title="匹配特定字符"></a>匹配特定字符</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT prod_name </span><br><span class="line">FROM products</span><br><span class="line">WHERE prod_name REGEXP &#39;[123] Ton&#39;;</span><br><span class="line">&#x2F;&#x2F;[] 定义一个集合，匹配其中的任一字符</span><br></pre></td></tr></table></figure>

<h5 id="字符集合取反"><a href="#字符集合取反" class="headerlink" title="字符集合取反"></a>字符集合取反</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT prod_name </span><br><span class="line">FROM products</span><br><span class="line">WHERE prod_name REGEXP &#39;[^123] Ton&#39;;</span><br><span class="line">&#x2F;&#x2F; ^ 表示对字符集合取反</span><br></pre></td></tr></table></figure>

<h5 id="范围匹配"><a href="#范围匹配" class="headerlink" title="范围匹配"></a>范围匹配</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT prod_name </span><br><span class="line">FROM products</span><br><span class="line">WHERE prod_name REGEXP &#39;[1-5] Ton&#39;;</span><br><span class="line">&#x2F;&#x2F; - 定义一个范围，表示匹配范围内的任一字符（数字或字母）</span><br></pre></td></tr></table></figure>

<h5 id="特殊字符匹配"><a href="#特殊字符匹配" class="headerlink" title="特殊字符匹配"></a>特殊字符匹配</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT prod_name </span><br><span class="line">FROM products</span><br><span class="line">WHERE prod_name REGEXP &#39;\\.&#39;;</span><br><span class="line">&#x2F;&#x2F; . | - 等特殊字符通过转义字符\\进行匹配，\本身使用\\\匹配</span><br><span class="line">（两个反斜杠，MySQL自己解释一个，正则表达式库解释一个）</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">包含\\的特殊元字符：</span><br><span class="line">\\f		换页</span><br><span class="line">\\n		换行</span><br><span class="line">\\r		回车</span><br><span class="line">\\t		制表</span><br><span class="line">\\v		纵向制表</span><br></pre></td></tr></table></figure>

<h5 id="字符类匹配"><a href="#字符类匹配" class="headerlink" title="字符类匹配"></a>字符类匹配</h5><p>字符类(character class)：预定义的字符集，用于匹配所有字母字符或所有数字字母字符等，方便工作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">字符类：</span><br><span class="line">[:alnum:]	任意字母和数字([a-zA-Z0-9])</span><br><span class="line">[:alpha:]	任意字符(a-zA-Z)</span><br><span class="line">[:blank:]	空格和制表[\\t]</span><br><span class="line">[:cntrl:]	ASCII控制字符(ASCII 0到31和127)</span><br><span class="line">[:digit:]	任意数字(0-9)</span><br><span class="line">[:graph:]	与[:print:]相同，不包含空格</span><br><span class="line">[:lower:]	任意小写字母([a-z])</span><br><span class="line">[:print:]	任意可打印字符</span><br><span class="line">[:punct:]	不在[:alnum:]和[:cntrl:]的任意字符</span><br><span class="line">[:space:]	包括空格的任意空白字符([\\f\\n\\r\\t\\v])</span><br><span class="line">[:upper:]	任意大写字母(A-Z)</span><br><span class="line">[:xdigit:]	任意十六进制数字([a-fA-F0-9])</span><br></pre></td></tr></table></figure>

<h5 id="重复元字符"><a href="#重复元字符" class="headerlink" title="重复元字符"></a>重复元字符</h5><p>用于对匹配的数目进行更强的控制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*		0或多个匹配</span><br><span class="line">+		1个或多个匹配(&#123;1,&#125;)</span><br><span class="line">?		0个或1个匹配&#123;0,1&#125;</span><br><span class="line">&#123;n&#125;		指定数目的匹配</span><br><span class="line">&#123;n,&#125;	不少于指定数目的匹配</span><br><span class="line">&#123;n,m&#125;	规定数目范围的匹配（m&lt;&#x3D;255)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT prod_name </span><br><span class="line">FROM products</span><br><span class="line">WHERE prod_name REGEXP &#39;\\([0-9] sticks?\\)&#39;;</span><br><span class="line">&#x2F;&#x2F; ?表示前面的字符s出现0次或1次</span><br><span class="line"></span><br><span class="line">SELECT prod_name </span><br><span class="line">FROM products</span><br><span class="line">WHERE prod_name REGEXP &#39;[[:digit:]]&#123;4&#125;&#39;;</span><br><span class="line">&#x2F;&#x2F;&#123;4&#125;表示前面的字符（任意数字）出现4次</span><br></pre></td></tr></table></figure>

<h5 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h5><p>用于匹配特定位置的文本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^		文本的开始</span><br><span class="line">$		文本的结尾</span><br><span class="line">[[:&lt;:]]	 词的开始</span><br><span class="line">[[:&gt;:]]	 词的结尾</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT prod_name </span><br><span class="line">FROM products</span><br><span class="line">WHERE prod_name REGEXP &#39;^[0-9\\.]&#39;;</span><br></pre></td></tr></table></figure>

<p>使 REGEXP 起到与 LIKE 类似的作用：利用定位符，用 ^ 开始表达式，$ 结束表达式</p>
<p><strong>正则表达式的简单测试</strong>：使用SELECT 简单测试，没有匹配返回0，有匹配返回1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT &#39;hello&#39; REGEXP &#39;[0-9]&#39;;</span><br></pre></td></tr></table></figure>

<h3 id="4-5-计算字段（处理）"><a href="#4-5-计算字段（处理）" class="headerlink" title="4.5    计算字段（处理）"></a>4.5    计算字段（处理）</h3><h4 id="4-5-1-相关概念"><a href="#4-5-1-相关概念" class="headerlink" title="4.5.1    相关概念"></a>4.5.1    相关概念</h4><h5 id="计算字段"><a href="#计算字段" class="headerlink" title="计算字段"></a>计算字段</h5><p>用于从数据库中检索出转换，计算或格式化过的数据供应用程序使用</p>
<p>数据格式化工作由DBMS通过SQL语句完成，一般不在客户机应用程序中进行。</p>
<p>计算字段不实际存在于数据库表中，而是在运行时通过SELECT语句创建，其意义与列相同（两者名字可互换），并且以与列相同的方式返回。</p>
<p>只有数据库知道某列是实际的表列还是计算字段（应用程序不知）。</p>
<h5 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h5><p>一个字段或值的替换名，可通过AS关键字为列名或计算字段定义别名，方便应用程序引用</p>
<h4 id="4-5-2-基本使用"><a href="#4-5-2-基本使用" class="headerlink" title="4.5.2    基本使用"></a>4.5.2    基本使用</h4><h5 id="拼接字段"><a href="#拼接字段" class="headerlink" title="拼接字段"></a>拼接字段</h5><p>拼接：将多个值联结到一起组成单个值</p>
<p>Concat()函数：把多个串或列连接成一个较长的串（字段）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT Concat(vend_name,&#39;(&#39;,vend_country,&#39;)&#39;)</span><br><span class="line">FROM vendors</span><br><span class="line">ORDER BY vend_name;</span><br><span class="line">&#x2F;&#x2F;各串之间以 , 分割</span><br><span class="line">&#x2F;&#x2F;其它DBMS大都使用 + 或 || 实现拼接</span><br></pre></td></tr></table></figure>

<p>计算字段只是一个值，没有名字，只能查看，无法在应用程序中引用，可通过AS关键字为其定义<strong>别名</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT Concat(vend_name,&#39;(&#39;,vend_country,&#39;)&#39;) AS vend_tittle</span><br><span class="line">FROM vendors</span><br><span class="line">ORDER BY vend_name;</span><br><span class="line">&#x2F;&#x2F;定义别名后，应用程序可以像使用列一样使用计算字段</span><br><span class="line">&#x2F;&#x2F;别名的其它用途：重命名表列名</span><br><span class="line">&#x2F;&#x2F;别名又称为导出列</span><br></pre></td></tr></table></figure>

<h5 id="算术计算"><a href="#算术计算" class="headerlink" title="算术计算"></a>算术计算</h5><p>对数据进行加减乘除算术计算</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT prod_id,quantity,item_price,quantity*item_price AS expanded_price</span><br><span class="line">FROM orderitems</span><br><span class="line">WHERE order_num &#x3D; 20005;</span><br></pre></td></tr></table></figure>

<h5 id="函数和计算的简单测试方法"><a href="#函数和计算的简单测试方法" class="headerlink" title="函数和计算的简单测试方法"></a>函数和计算的简单测试方法</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">使用省略了 FROM 子句的 SELECT 语句</span><br><span class="line">SELECT 3*2;</span><br><span class="line">SELECT Trim(&#39;  abc &#39;);</span><br><span class="line">SELECT Now();</span><br></pre></td></tr></table></figure>

<h3 id="4-6-函数（处理）"><a href="#4-6-函数（处理）" class="headerlink" title="4.6    函数（处理）"></a>4.6    函数（处理）</h3><p>对数据进行转换和处理，用于数据的格式化工作上</p>
<p>数据处理函数，如trim()等</p>
<p>聚焦函数（数据汇总），如SUM()等</p>
<p>不同DBMS的函数实现差异较大，故使用函数时要做好代码注释</p>
<h4 id="4-6-1-数据处理函数"><a href="#4-6-1-数据处理函数" class="headerlink" title="4.6.1    数据处理函数"></a>4.6.1    数据处理函数</h4><h5 id="文本处理函数"><a href="#文本处理函数" class="headerlink" title="文本处理函数"></a>文本处理函数</h5><p>用于处理文本串，如转换为大写或小写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Left()		返回串左边的字符</span><br><span class="line">Right()		返回串右边的字符</span><br><span class="line"></span><br><span class="line">Upper()		将串转换为大写</span><br><span class="line">Lower()		将串转换为小写</span><br><span class="line"></span><br><span class="line">Trim()		去掉串的首尾空格</span><br><span class="line">LTrim()		去掉串的首部空格</span><br><span class="line">RTrim()		去掉串的尾部空格</span><br><span class="line"></span><br><span class="line">Length()	返回串的长度</span><br><span class="line">Locate()	找出串的一个子串</span><br><span class="line">Soundex()	返回串的 SOUNDEX 值</span><br><span class="line">SubString()	返回子串的字符</span><br><span class="line">&#x2F;&#x2F;SOUNDEX：一个将文本串转换为描述其语音表示的字母数字模式的算法，MySQL支持使用 SOUNDEX 进行发音比较</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.</span><br><span class="line">SELECT Concat(Trim(vend_name),&#39;(&#39;,RTrim(vend_country),&#39;)&#39;) AS vend_tittle</span><br><span class="line">FROM vendors</span><br><span class="line">ORDER BY vend_name;</span><br><span class="line">2.</span><br><span class="line">SELECT vend_name,Upper(vend_name) AS vend_name_upcase</span><br><span class="line">FROM vendors</span><br><span class="line">ORDER BY vend_name;</span><br><span class="line">3.</span><br><span class="line">SELECT cust_name,cust_contact</span><br><span class="line">FROM customers</span><br><span class="line">WHERE Soundex(cust_contact) &#x3D; Soundex(&#39;Y Lie&#39;);</span><br></pre></td></tr></table></figure>

<h5 id="日期和时间处理函数"><a href="#日期和时间处理函数" class="headerlink" title="日期和时间处理函数"></a>日期和时间处理函数</h5><p>用于处理日期和时间值并提取特定成分，如返回两个日期之差</p>
<p>日期和时间采用特殊的数据类型(datatime)和格式进行存储，通过日期和时间函数可返回应用程序所需的格式</p>
<p><strong>常用日期和时间处理函数：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AddDate() 		增加一个日期（天、周等）</span><br><span class="line">AddTime() 		增加一个时间（时、分等）</span><br><span class="line"></span><br><span class="line">Now()		    返回当前日期和时间</span><br><span class="line">Date_Format() 	 返回一个格式化的日期或时间串 </span><br><span class="line">CurDate() 		返回当前日期</span><br><span class="line">CurTime() 		返回当前时间</span><br><span class="line"></span><br><span class="line">DateDiff() 		计算两个日期之差</span><br><span class="line">Date_Add() 		高度灵活的日期运算函数</span><br><span class="line"></span><br><span class="line">Year()			返回一个日期的年份部分</span><br><span class="line">Month()			返回一个日期的月份部分</span><br><span class="line">Day()			返回一个日期的天数部分</span><br><span class="line">Date() 			返回一个日期时间的日期部分</span><br><span class="line">Time()			返回一个日期时间的时间部分 </span><br><span class="line">DayOfWeek()		 返回一个日期对应的星期几</span><br><span class="line"></span><br><span class="line">Hour()			返回一个时间的小时部分</span><br><span class="line">Minute()		返回一个时间的分钟部分</span><br><span class="line">Second() 		返回一个时间的秒部分</span><br></pre></td></tr></table></figure>

<p><strong>日期格式</strong></p>
<p>日期格式首选 yyyy-mm-dd ,年份应总是使用4位数字</p>
<p><strong>例子</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.</span><br><span class="line">SELECT cust_id,order_num</span><br><span class="line">FROM orders</span><br><span class="line">WHERE order_date &#x3D; &#39;2005-09-01&#39;;</span><br><span class="line">2.</span><br><span class="line">SELECT cust_id,order_num</span><br><span class="line">FROM orders</span><br><span class="line">WHERE Date(order_date) &#x3D; &#39;2005-09-01&#39;;</span><br><span class="line">3.</span><br><span class="line">SELECT cust_id,order_num</span><br><span class="line">FROM orders</span><br><span class="line">WHERE Date(order_date) BETWEEN &#39;2005-09-01&#39; AND &#39;2005-09-30&#39;;</span><br><span class="line">或</span><br><span class="line">SELECT cust_id,order_num</span><br><span class="line">FROM orders</span><br><span class="line">WHERE Year(order_date) &#x3D; 2005 AND Monts(order_date) &#x3D; 9;</span><br></pre></td></tr></table></figure>

<h5 id="数值处理函数"><a href="#数值处理函数" class="headerlink" title="数值处理函数"></a>数值处理函数</h5><p>对数值进行代数、三角或几何运算，如返回绝对值，版本信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sin()		返回一个角度的正弦</span><br><span class="line">Cos()		返回一个角度的余弦 </span><br><span class="line">Tan()		返回一个角度的正切</span><br><span class="line"></span><br><span class="line">Abs()		返回一个数的绝对值</span><br><span class="line">Exp()		返回一个数的指数值</span><br><span class="line">Sqrt()		返回一个数的平方根</span><br><span class="line"></span><br><span class="line">Mod()		返回除操作的余数 </span><br><span class="line">Pi()		返回圆周率 </span><br><span class="line">Rand()		返回一个随机数</span><br></pre></td></tr></table></figure>

<h5 id="系统函数"><a href="#系统函数" class="headerlink" title="系统函数"></a>系统函数</h5><p>返回DBMS正使用的特殊信息，如用户灯枯信息</p>
<h4 id="4-6-2-数据汇总函数"><a href="#4-6-2-数据汇总函数" class="headerlink" title="4.6.2    数据汇总函数"></a>4.6.2    数据汇总函数</h4><p>用于汇总数据获取汇总信息而不必返回实际表数据，便于分析和报表生成</p>
<p>聚集函数：运行在行组上，计算和返回单个值的函数</p>
<p>聚集函数可作用于单个列或多个列，SELECT语句可包含多个聚集函数</p>
<h5 id="AVG-函数"><a href="#AVG-函数" class="headerlink" title="AVG() 函数"></a>AVG() 函数</h5><p>返回某列的平均值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT AVG(prod_price) AS avg_price</span><br><span class="line">FROM products</span><br><span class="line">WHERE vend_id &#x3D; 1003;</span><br><span class="line">&#x2F;&#x2F;通过对表中行数计数并计算特定列值之和再返回该列平均值</span><br><span class="line">&#x2F;&#x2F;只作用于单个列，列名作为参数传入，多列要多个AVG()函数</span><br><span class="line">&#x2F;&#x2F;忽略值为NULL的行</span><br></pre></td></tr></table></figure>

<h5 id="COUNT-函数"><a href="#COUNT-函数" class="headerlink" title="COUNT() 函数"></a>COUNT() 函数</h5><p>返回表中行的数目</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.</span><br><span class="line">SELECT COUNT(*) AS num_cust</span><br><span class="line">FROM customers;</span><br><span class="line">&#x2F;&#x2F;COUNT(*) 对表中所有行进行计数，包括空值的行</span><br><span class="line">2.</span><br><span class="line">SELECT COUNT(cust_email) AS num_cust</span><br><span class="line">FROM customers;</span><br><span class="line">&#x2F;&#x2F;COUNT(column) 对特定列具有值的行进行计数，忽略空值的行</span><br></pre></td></tr></table></figure>

<h5 id="MAX-函数"><a href="#MAX-函数" class="headerlink" title="MAX() 函数"></a>MAX() 函数</h5><p>返回某列的最大值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT MAX(prod_price) AS max_price</span><br><span class="line">FROM products;</span><br><span class="line">&#x2F;&#x2F;必须传入一个列名作为参数</span><br><span class="line">&#x2F;&#x2F;非数值或日期使用MAX()返回最后一行</span><br><span class="line">&#x2F;&#x2F;忽略空值的行</span><br></pre></td></tr></table></figure>

<h5 id="MIN-函数"><a href="#MIN-函数" class="headerlink" title="MIN() 函数"></a>MIN() 函数</h5><p>返回某列的最小值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT MIN(prod_price) AS max_price</span><br><span class="line">FROM products;</span><br><span class="line">&#x2F;&#x2F;与MAX()功能相反</span><br></pre></td></tr></table></figure>

<h5 id="SUM-函数"><a href="#SUM-函数" class="headerlink" title="SUM() 函数"></a>SUM() 函数</h5><p>返回某列值之和</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.</span><br><span class="line">SELECT SUM(quantity) AS items_ordered</span><br><span class="line">FROM orderitems</span><br><span class="line">WHERE order_num &#x3D; 20005;</span><br><span class="line">2.</span><br><span class="line">SELECT SUM(item_price*quantity) AS total_price</span><br><span class="line">FROM orderitems</span><br><span class="line">WHERE order_num &#x3D; 20005;</span><br><span class="line">&#x2F;&#x2F;传入列名或计算值作为参数，合计总数</span><br><span class="line">&#x2F;&#x2F;忽略值为NULL的行</span><br></pre></td></tr></table></figure>

<h5 id="DISTINCT-参数"><a href="#DISTINCT-参数" class="headerlink" title="DISTINCT 参数"></a>DISTINCT 参数</h5><p>在聚焦函数中使用ALL或DISTINCT参数决定是否只汇总不同值的行（相同值只统计一次）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT AVG(DISTINCT prod_price) AS avg_price</span><br><span class="line">FROM products</span><br><span class="line">WHERE vend_id &#x3D; 1003;</span><br><span class="line">&#x2F;&#x2F;默认为ALL，统计所有行</span><br><span class="line">&#x2F;&#x2F;指定DISTINCT，只统计不同值的行</span><br><span class="line">&#x2F;&#x2F;DISTINCT不能用于COUNT(*)</span><br><span class="line">&#x2F;&#x2F;后接列名，不能用于计算或表达式</span><br></pre></td></tr></table></figure>

<h3 id="4-7-数据分组"><a href="#4-7-数据分组" class="headerlink" title="4.7    数据分组"></a>4.7    数据分组</h3><p>将数据分成多个逻辑组（表数据的子集），以便单独对每个组进行汇总</p>
<h4 id="4-7-1-GROUP-BY子句（创建分组）"><a href="#4-7-1-GROUP-BY子句（创建分组）" class="headerlink" title="4.7.1    GROUP BY子句（创建分组）"></a>4.7.1    GROUP BY子句（创建分组）</h4><p>GROUP BY 指示MySQL按指定列排序分组数据，计算字段会对每组进行一次汇总</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT vend_id,COUNT(*) AS num_prods</span><br><span class="line">FROM products</span><br><span class="line">GROUP BY vend_id WITH ROLLUP;</span><br><span class="line">&#x2F;&#x2F;WITH POLLUP 关键字用于得到每个分组及其汇总级别的值（？）</span><br></pre></td></tr></table></figure>

<p><strong>规定：</strong></p>
<ul>
<li>GROUP BY 子句可包含任意数目的列，用于嵌套</li>
<li>对于嵌套分组，数据会在最后规定的分组上进行汇总</li>
<li>GROUP BY子句中的列为检索列或有效的表达式（不能是聚集函数或别名）</li>
<li>除了聚集计算字段外，SELECT 语句中出现的列要在 GROUP BY 子句中给出</li>
<li>列值为NULL的行会作为一个分组返回</li>
</ul>
<h4 id="4-7-2-HAVING-子句（过滤分组）"><a href="#4-7-2-HAVING-子句（过滤分组）" class="headerlink" title="4.7.2    HAVING 子句（过滤分组）"></a>4.7.2    HAVING 子句（过滤分组）</h4><p>HAVING 子句允许基于分组的过滤 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_id,<span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> orders</span><br><span class="line"><span class="keyword">FROM</span> orders</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> cust_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*) &gt;= <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p><strong>WHERE 子句 与 HAVING 子句的区别</strong>：</p>
<ul>
<li>WHERE 没有分组的概念，过滤的是行</li>
<li>HAVING 类似于 WHERE ，支持所有 WHERE 操作符，过滤的是分组，可基于分组聚集值进行过滤</li>
<li>WHERE 在数据分组前进行过滤，HAVING在数据分组后进行过滤</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT vend_id,COUNT(*) AS num_prods</span><br><span class="line">FROM products</span><br><span class="line">WHERE prod_price &gt;&#x3D; 2</span><br><span class="line">GROUP BY vend_id</span><br><span class="line">HAVING COUNT(*) &gt;&#x3D;2;</span><br><span class="line">&#x2F;&#x2F;WHERE和HAVING同时使用时，WHERE排除的行不包括在分组中</span><br></pre></td></tr></table></figure>

<h4 id="4-7-3-分组与排序"><a href="#4-7-3-分组与排序" class="headerlink" title="4.7.3    分组与排序"></a>4.7.3    分组与排序</h4><p>ORDER BY 和 GROUP BY 的区别：</p>
<table>
<thead>
<tr>
<th>ORDER BY</th>
<th>GROUP BY</th>
</tr>
</thead>
<tbody><tr>
<td>排序输出</td>
<td>分组，输出不一定是分组的顺序</td>
</tr>
<tr>
<td>后跟任意列（包括非选择列）</td>
<td>必须且只能跟选择列或表达式列</td>
</tr>
<tr>
<td>可选</td>
<td>按组计算聚集时，必须使用</td>
</tr>
</tbody></table>
<p> 注：GROUP BY 子句分组时经常以分组顺序输出，但没有保证，因此在使用 GROUP BY 子句时往往给出ORDER BY 子句明确顺序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT order_num,SUM(quantity*item_price) AS ordertotal</span><br><span class="line">FROM orderitems</span><br><span class="line">GROUP BY order_num</span><br><span class="line">HAVING SUM(quantity*item_price) &gt;&#x3D; 50</span><br><span class="line">ORDER BY ordertotal;</span><br></pre></td></tr></table></figure>

<h4 id="4-7-4-SELECT-子句的顺序"><a href="#4-7-4-SELECT-子句的顺序" class="headerlink" title="4.7.4    SELECT 子句的顺序"></a>4.7.4    SELECT 子句的顺序</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">-&gt;FROM</span><br><span class="line">-&gt;WHERE</span><br><span class="line">-&gt;GROUP BY</span><br><span class="line">-&gt;HAVING</span><br><span class="line">-&gt;ORDER BY</span><br><span class="line">-&gt;LIMIT</span><br></pre></td></tr></table></figure>

<h3 id="4-8-子查询"><a href="#4-8-子查询" class="headerlink" title="4.8    子查询"></a>4.8    子查询</h3><h4 id="4-8-1-基本概念"><a href="#4-8-1-基本概念" class="headerlink" title="4.8.1    基本概念"></a>4.8.1    基本概念</h4><p><strong>查询</strong>(query)：任何SQL语句都是查询，但一般指SELECT语句</p>
<p><strong>简单查询</strong>：从单个数据库表中检索数据的单条语句</p>
<p><strong>子查询</strong>：嵌套在其它查询语句中的查询，常用于WHERE子句的IN操作符中或填充计算字段列</p>
<h4 id="4-8-2-利用子查询过滤"><a href="#4-8-2-利用子查询过滤" class="headerlink" title="4.8.2    利用子查询过滤"></a>4.8.2    利用子查询过滤</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cunst_name,cust_contact</span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> cust_id</span><br><span class="line">				<span class="keyword">FROM</span> orders</span><br><span class="line">				<span class="keyword">WHERE</span> order_num <span class="keyword">IN</span> (<span class="keyword">SELECT</span> order_num</span><br><span class="line">								  <span class="keyword">FROM</span> orderitems</span><br><span class="line">								  <span class="keyword">WHERE</span> prod_id = <span class="string">'TNT2'</span>));</span><br><span class="line">								  </span><br><span class="line">//子查询总是从内向外进行处理，同时MySQL会对子查询返回的结果进行初步处理（如返回IN操作符要求以逗号分隔的格式）</span><br><span class="line">//内部<span class="keyword">SELECT</span>语句要具有与外部<span class="keyword">WHERE</span>子句相同数目的列，一般为单个列与单个列匹配</span><br><span class="line">//利用子查询可编写功能强大灵活性高的语句，且能嵌套的子查询无限制，编写时要注意<span class="keyword">SQL</span>的格式</span><br></pre></td></tr></table></figure>

<h4 id="4-8-3-使用子查询作为计算字段"><a href="#4-8-3-使用子查询作为计算字段" class="headerlink" title="4.8.3    使用子查询作为计算字段"></a>4.8.3    使用子查询作为计算字段</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT cust_name,</span><br><span class="line">	   cust_state,</span><br><span class="line">	   (SELECT COUNT(*)</span><br><span class="line">	    FROM orders</span><br><span class="line">	    WHERE orders.cust.id &#x3D; customers.cust_id) AS orders</span><br><span class="line">FROM customers</span><br><span class="line">ORDER BY cust_name;</span><br><span class="line">&#x2F;&#x2F;计算字段orders由圆括号中的子查询建立</span><br><span class="line">&#x2F;&#x2F;相关子查询：涉及外部查询的子查询</span><br><span class="line">&#x2F;&#x2F;相关子查询往往会导致列名具有歧义，当列名具有多义性时通过完全限定的列名(通过.绑定某个表）消除</span><br></pre></td></tr></table></figure>

<h4 id="4-8-4-用子查询建立复杂查询的有效方法"><a href="#4-8-4-用子查询建立复杂查询的有效方法" class="headerlink" title="4.8.4    用子查询建立复杂查询的有效方法"></a>4.8.4    用子查询建立复杂查询的有效方法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">逐渐增加子查询：</span><br><span class="line">先建立和测试最内层的查询，再用硬编码数据建立和测试外层查询，可行之后再嵌入子查询构建复杂查询，依此类推</span><br></pre></td></tr></table></figure>

<h3 id="4-9-联结表-join"><a href="#4-9-联结表-join" class="headerlink" title="4.9    联结表(join)"></a>4.9    联结表(join)</h3><h4 id="4-9-1-相关知识"><a href="#4-9-1-相关知识" class="headerlink" title="4.9.1    相关知识"></a>4.9.1    相关知识</h4><p><strong>关系表</strong></p>
<p>关系数据库设计的基本概念：把信息分解成多个表，一类数据一个表，各表之间通过特定的值互相关联，这些表称为关系表。</p>
<p>比如：图书信息和出版社信息可分别放在两个表中存储，两个表之间通过 出版社id 关联。</p>
<p><strong>外键(foreign key)</strong></p>
<p>外键为某个表的一列，该列是另一个表的主键，用于定义两个表之间的关系。</p>
<p><strong>数据不重复存储的好处</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">减少时间和空间的浪费</span><br><span class="line">保证数据的一致性（无重复）</span><br><span class="line">更新时只需更改单个表，更方便管理</span><br></pre></td></tr></table></figure>

<p>注：关系数据库的可伸缩性好，即能够适应不断增加的工作量而不失败</p>
<h4 id="4-9-2-联结"><a href="#4-9-2-联结" class="headerlink" title="4.9.2    联结"></a>4.9.2    联结</h4><p><strong>联结</strong>是一种机制，使用联结可在单条 SELECT 语句中检索出在不同关系表中的数据（联结多个表返回一组输出）</p>
<p>联结不存在于实际的数据库表中，它由MySQL命令建立，只存在于查询的执行当中（运行时）</p>
<p>联结过程：将第一个表中的每一行与第二个表中的每一行进行配对，返回符合联结条件的行</p>
<p>引用完整性：通过在表的定义中指定主键和外键来实现，即外键值必须为主键中的值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">简单例子：</span><br><span class="line"><span class="keyword">SELECT</span> vend_name,prod_name,prod_price</span><br><span class="line"><span class="keyword">FROM</span> vendors,products</span><br><span class="line"><span class="keyword">WHERE</span> vendors.vend_id = products.vend_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name,prod_name;</span><br><span class="line">//规定要联结的所有表（FROM子句）以及如何关联（即联结条件 WHERE子句）</span><br></pre></td></tr></table></figure>

<h4 id="4-9-3-内部联结"><a href="#4-9-3-内部联结" class="headerlink" title="4.9.3    内部联结"></a>4.9.3    内部联结</h4><p><strong>笛卡儿积</strong>：只关联表没有指定联结条件时返回的结果（行的数目 = 第一个表行数×第二个表行数）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_name,prod_name,prod_price</span><br><span class="line"><span class="keyword">FROM</span> vendors,products</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name,prod_name;</span><br></pre></td></tr></table></figure>

<p><strong>内部联结</strong>：又称等值联结，基于两个表之间的相等测试(INNER JOIN)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_name,prod_name,prod_price</span><br><span class="line"><span class="keyword">FROM</span> vendors <span class="keyword">INNER</span> <span class="keyword">JOIN</span> products</span><br><span class="line"><span class="keyword">ON</span> vendors.vend_id = products.vend_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name,prod_name;</span><br><span class="line">//FROM 子句中由 INNER JOIN 指定两个表，</span><br><span class="line">联结条件使用特定的 ON 子句给出</span><br><span class="line">//两种语法返回相同结果，ON 子句中的条件与WHERE子句一样</span><br><span class="line">//该语法方便看出联结条件，性能也有所不同</span><br></pre></td></tr></table></figure>

<p><strong>联结多个表：</strong>联结的表越多，性能下降越厉害</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name,vend_name,quantity</span><br><span class="line"><span class="keyword">FROM</span> orderitems,products,vendors</span><br><span class="line"><span class="keyword">WHERE</span> products.vend_id = vendors.vend_id</span><br><span class="line">	<span class="keyword">AND</span> orderitems.prod_id = products.prod_id</span><br><span class="line">	<span class="keyword">AND</span> order_num = <span class="number">20005</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>操作类型，表中数据量，索引或键等条件会影响某个SQL操作的性能</p>
</blockquote>
<h4 id="4-9-4-自联结"><a href="#4-9-4-自联结" class="headerlink" title="4.9.4    自联结"></a>4.9.4    自联结</h4><p><strong>表别名</strong>：通过 AS 关键字给某个表起别名</p>
<p>（1）缩短SQL语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name,cust_contact</span><br><span class="line"><span class="keyword">FROM</span> customers <span class="keyword">AS</span> c,orders <span class="keyword">AS</span> o,orderitems <span class="keyword">AS</span> oi</span><br><span class="line"><span class="keyword">WHERE</span> c.cust_id = o.cust_id</span><br><span class="line">	<span class="keyword">AND</span> oi.order_num = o.order_num</span><br><span class="line">	<span class="keyword">AND</span> prod_id = <span class="string">'TNT2'</span>;</span><br><span class="line">//表别名只在查询中使用，不返回客户机</span><br><span class="line">//表别名可用于 <span class="keyword">SELECT</span> 的列表，<span class="keyword">WHERE</span> 子句等</span><br></pre></td></tr></table></figure>

<p>（2）在单条SELECT语句中多次使用相同的表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> p1.prod_id,p1.prod_name</span><br><span class="line"><span class="keyword">FROM</span> products <span class="keyword">AS</span> p1,products <span class="keyword">AS</span> p2</span><br><span class="line"><span class="keyword">WHERE</span> p1.vend.id = p2.vend_id</span><br><span class="line">//自联结：从相同的表中检索数据，常用于替代返回相同结果的子查询，两者性能不同</span><br><span class="line">//给同一个表取不同的别名，指示MySQL正常工作</span><br></pre></td></tr></table></figure>

<h4 id="4-9-5-自然联结"><a href="#4-9-5-自然联结" class="headerlink" title="4.9.5    自然联结"></a>4.9.5    自然联结</h4><p>返回的结果排除多次出现，使每个列只返回一次</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT c.*,o.order_num,o.order_date,oi.prod_id,oi.quantity,oi.item_price</span><br><span class="line">FROM customers AS c,orders as o,orderitems AS oi</span><br><span class="line">WHERE c.cust_id &#x3D; o.cust_id</span><br><span class="line">	AND oi.order_num &#x3D; o.order_num</span><br><span class="line">	AND prod_id &#x3D; &#39;FB&#39;;</span><br><span class="line">&#x2F;&#x2F;对表使用通配符（SELECT *），对其它表的列明确指出</span><br></pre></td></tr></table></figure>

<h4 id="4-9-6-外部联结"><a href="#4-9-6-外部联结" class="headerlink" title="4.9.6    外部联结"></a>4.9.6    外部联结</h4><p>返回的结果包含那些没有关联行的行(OUTER JOIN)</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> customers.cust_id,orders.order_num</span><br><span class="line"><span class="keyword">FROM</span> customers <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> orders</span><br><span class="line"><span class="keyword">ON</span> customers.cust_id = orders.cust_id;</span><br><span class="line">//关键字OUTER JOIN指定联结的类型为外部联结</span><br><span class="line">//关键字LEFT或RIGHT指定包含所有行的表（左外联结或右外联结）</span><br><span class="line">//MySQL没有 *= 操作符</span><br></pre></td></tr></table></figure>

<h4 id="4-9-7-联结和聚集函数"><a href="#4-9-7-联结和聚集函数" class="headerlink" title="4.9.7    联结和聚集函数"></a>4.9.7    联结和聚集函数</h4><p>聚集函数也可以与联结一起使用</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> customers.cust_name,customers.cust.id,<span class="keyword">COUNT</span>(orders.order_num) <span class="keyword">AS</span> num_ord</span><br><span class="line"><span class="keyword">FROM</span> customers <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> orders</span><br><span class="line"><span class="keyword">ON</span> customers.cust.id = orders.cust_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> customers.cust_id;</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一般使用内部联结</span><br><span class="line">提供并保证正确的联结条件</span><br></pre></td></tr></table></figure>

<h3 id="4-10-组合查询（UNION）"><a href="#4-10-组合查询（UNION）" class="headerlink" title="4.10     组合查询（UNION）"></a>4.10     组合查询（UNION）</h3><p>使用 UNION 操作符将多条 SELECT 语句返回的数据组合成一个结果集，又称为并或复合查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">1.对单个表执行多个查询，按单个查询返回数据(简化复杂WHERE子句)</span><br><span class="line"><span class="keyword">SELECT</span> vend_id,prod_id,prod_price</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_price &lt;= <span class="number">5</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> vend_id,prod_id,prod_price</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="keyword">IN</span> (<span class="number">1001</span>,<span class="number">1002</span>);</span><br><span class="line">2.在单次查询中从不同的表返回结构类似的数据（简化多个表检索）</span><br></pre></td></tr></table></figure>

<h4 id="4-10-1-UNION使用规则"><a href="#4-10-1-UNION使用规则" class="headerlink" title="4.10.1    UNION使用规则"></a>4.10.1    UNION使用规则</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.两条或两条以上的 SELECT 语句才能使用 UNION 关键字进行组合</span><br><span class="line"></span><br><span class="line">2.UNION中的每个查询必须包含相同的列、表达式或聚集函数（次序随意）</span><br><span class="line"></span><br><span class="line">3.列数据类型必须兼容，不必完全相同，如不同的数值类型（DBMS可以隐含转换的类型）</span><br></pre></td></tr></table></figure>

<h4 id="4-10-2-组合查询与多个-WHERE-条件"><a href="#4-10-2-组合查询与多个-WHERE-条件" class="headerlink" title="4.10.2    组合查询与多个 WHERE 条件"></a>4.10.2    组合查询与多个 WHERE 条件</h4><p>对于相同的表，任何具有多个 WHERE 子句条件的 SELECT 语句都可以使用一个组合查询代替</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_id,prod_id,prod_price</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> pro_price &lt;= <span class="number">5</span></span><br><span class="line">   <span class="keyword">OR</span> vend_id <span class="keyword">IN</span> (<span class="number">1001</span>,<span class="number">1002</span>);</span><br></pre></td></tr></table></figure>

<h4 id="410-3-包含重复的行"><a href="#410-3-包含重复的行" class="headerlink" title="410.3    包含重复的行"></a>410.3    包含重复的行</h4><p>UNION 默认从查询结果集中去掉重复的行，当需要包含所有匹配行时，使用 UNION ALL</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_id,prod_id,prod_price</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> pro_price &lt;= <span class="number">5</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> vend_id,prod_id,prod_price</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="keyword">IN</span> (<span class="number">1001</span>,<span class="number">1002</span>);</span><br><span class="line">//返回每个 <span class="keyword">SELECT</span> 语句匹配的行，无论是否重复，该功能无法使用 <span class="keyword">WHERE</span> 完成</span><br></pre></td></tr></table></figure>

<h4 id="4-10-4-组合查询与排序"><a href="#4-10-4-组合查询与排序" class="headerlink" title="4.10.4    组合查询与排序"></a>4.10.4    组合查询与排序</h4><p>只能使用一条 ORDER BY 子句，位于最后一条 SELECT 语句之后，表示对所有结果进行排序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_id,prod_id,prod_price</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> pro_price &lt;= <span class="number">5</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> vend_id,prod_id,prod_price</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="keyword">IN</span> (<span class="number">1001</span>,<span class="number">1002</span>)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_id,prod_price;</span><br></pre></td></tr></table></figure>

<h2 id="五、全文本搜索"><a href="#五、全文本搜索" class="headerlink" title="五、全文本搜索"></a>五、全文本搜索</h2><p>全文本搜索功能用于进行高级的数据查询和选择</p>
<p>LIKE 和 REGEXP 在性能、控制精度，智能化等方面存在很大限制，无法满足需要，而全文本搜索能有效解决。</p>
<p>原理：创建指定列中各词的一个索引，从而针对这些词进行搜索，而不必查看每行或分析和处理每个词。</p>
<h3 id="5-1-索引被搜索的列"><a href="#5-1-索引被搜索的列" class="headerlink" title="5.1    索引被搜索的列"></a>5.1    索引被搜索的列</h3><p>在创建表使通过 <strong>FULLTEXT</strong> 子句启用全文本搜索</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> productnotes</span><br><span class="line">(</span><br><span class="line">  note_id    <span class="built_in">int</span>           <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  prod_id    <span class="built_in">char</span>(<span class="number">10</span>)      <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  note_date datetime       <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  note_text  <span class="built_in">text</span>          <span class="literal">NULL</span> ,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span>(note_id),</span><br><span class="line">  FULLTEXT(note_text)</span><br><span class="line">) <span class="keyword">ENGINE</span>=MyISAM;</span><br><span class="line">//MySQL 会自动进行索引和重新索引（数据更新时）</span><br><span class="line">//FULLTEXT可以索引单个列也可以指定多个列</span><br><span class="line">//不要在导入数据时使用FULLTEXT，耗时较长</span><br></pre></td></tr></table></figure>

<h3 id="5-2-进行全文本搜索"><a href="#5-2-进行全文本搜索" class="headerlink" title="5.2    进行全文本搜索"></a>5.2    进行全文本搜索</h3><p>使用 <strong>Match()</strong> 指定被搜索的列，<strong>Against()</strong> 指定搜索表达式进行全文本搜索</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> note_text</span><br><span class="line"><span class="keyword">FROM</span> productnotes</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">Match</span>(note_text) Against(<span class="string">'rabbit'</span>);</span><br><span class="line">//Match()的参数必须与FULLTEXT()定义中完全相同（包括次序）</span><br><span class="line">//默认不区分大小写，但可指定BINARY方式</span><br></pre></td></tr></table></figure>

<p><strong>返回结果的排序</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> note_text,<span class="keyword">Match</span>(note_text) Against(<span class="string">'rabbit'</span>) <span class="keyword">AS</span> <span class="keyword">rank</span></span><br><span class="line"><span class="keyword">FROM</span> productnotes;</span><br><span class="line">//rank为全文本搜索计算出的等级值，等级由行中词的数目，唯一词的数目，索引中词的总数以及含有该词的行的数目决定</span><br></pre></td></tr></table></figure>

<h3 id="5-3-查询扩展"><a href="#5-3-查询扩展" class="headerlink" title="5.3    查询扩展"></a>5.3    查询扩展</h3><p>用于放宽全文本搜索返回结果的范围</p>
<p>利用 <strong>WITH QUERY EXPANSION</strong> 关键字指定使用查询扩展，找出可能相关的结果，即使并不精确包含查找的词</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> note_text</span><br><span class="line"><span class="keyword">FROM</span> productnotes</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">Match</span>(note_text) Against(<span class="string">'anvils'</span> <span class="keyword">WITH</span> <span class="keyword">QUERY</span> EXPANSION);</span><br><span class="line">//使用查询扩展时，MySQL扫描两次数据和索引来完成搜索（1：普通搜索并找出有用的词2：利用原始条件和有用的词再次搜索）</span><br></pre></td></tr></table></figure>

<h3 id="5-4-布尔文本搜索"><a href="#5-4-布尔文本搜索" class="headerlink" title="5.4    布尔文本搜索"></a>5.4    布尔文本搜索</h3><p>指定匹配词，排斥词，排列提示，表达式分组等具体搜索细节，用于更细致的查找控制</p>
<p><strong>全文本搜索布尔操作符</strong></p>
<table>
<thead>
<tr>
<th align="center">+</th>
<th>包含</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-</td>
<td>排除</td>
</tr>
<tr>
<td align="center">&gt;提高</td>
<td>等级值</td>
</tr>
<tr>
<td align="center">&lt;</td>
<td>降低等级值</td>
</tr>
<tr>
<td align="center">()</td>
<td>组成子表达式</td>
</tr>
<tr>
<td align="center">_</td>
<td>取消排序值</td>
</tr>
<tr>
<td align="center">*</td>
<td>词尾通配符</td>
</tr>
<tr>
<td align="center">“”</td>
<td>定义短语</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> note_text</span><br><span class="line"><span class="keyword">FROM</span> productnotes</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">Match</span>(note_text) Against(<span class="string">'heavy -rope*'</span> <span class="keyword">IN</span> <span class="built_in">BOOLEAN</span> <span class="keyword">MODE</span>);</span><br><span class="line">//IN BOOLEAN MODE 关键字指定以布尔方式进行全文本搜索</span><br><span class="line">//没有FULLTEXT索引也可以使用布尔文本搜索</span><br></pre></td></tr></table></figure>

<h3 id="5-5-使用说明"><a href="#5-5-使用说明" class="headerlink" title="5.5    使用说明"></a>5.5    使用说明</h3><ul>
<li>MyISAM 数据库引擎支持全文本搜索，而InnoDB不支持</li>
<li>索引全文本数据时，那些3个或以下字符的短词会被忽略</li>
<li>MySQL拥有一个内建的非用词列表，在索引全文本数据时总是忽略这些词</li>
<li>如果一个词出现在50%以上的行中，将其作为非用词忽略，不适用布尔文本搜索（50%规则）</li>
<li>忽略词中单引号</li>
<li>一个词要么不出现，要么至少出现在50%的行中，因此，如果表中行数少于三行则全文本搜索不返回结果</li>
<li>全文本搜索不适用于汉语、日语等语言</li>
</ul>
<h2 id="六、-视图"><a href="#六、-视图" class="headerlink" title="六、  视图"></a>六、  视图</h2><h3 id="6-1-理解"><a href="#6-1-理解" class="headerlink" title="6.1    理解"></a>6.1    理解</h3><p>视图是虚拟的表，不包含表中任何列或数据，只包含动态检索数据的查询；</p>
<p>本质上是对 SELECT 语句的封装；</p>
<p>视图拥有与真实表基本相同的使用方式；</p>
<p>每次使用视图都要重新执行检索操作，复杂的视图对性能的影响很大。</p>
<h3 id="6-2-用途"><a href="#6-2-用途" class="headerlink" title="6.2    用途"></a>6.2    用途</h3><p>(1) 重用 SQL 语句，简化复杂 SQL 操作</p>
<p>(2) 保护数据，视图使用的是表的特定部分而不是整个表，可以给用户授权只访问视图</p>
<h3 id="6-3-规则和限制"><a href="#6-3-规则和限制" class="headerlink" title="6.3    规则和限制"></a>6.3    规则和限制</h3><ul>
<li>必须唯一命名，不能与其它视图或表同名</li>
<li>视图可以嵌套使用</li>
<li>视图可以和表一起使用（如联结）</li>
<li>外层 SELECT 语句的 ORDER BY 会覆盖视图中的 ORDER BY </li>
<li>要具有足够的访问权限才能创建视图</li>
<li>视图不能索引，也不能有关联的触发器或默认值</li>
</ul>
<h3 id="6-4-基本使用"><a href="#6-4-基本使用" class="headerlink" title="6.4    基本使用"></a>6.4    基本使用</h3><p>创建 :<code>CREATE VIEW</code>+<code>AS</code></p>
<p>删除：<code>DROP VIEW</code></p>
<p>更新：<code>CREATE OR REPLACE VIEW</code>或先<code>DROP</code>再<code>CREATE</code></p>
<p>查看创建视图的语句：<code>SHOW CREATE VIEW</code></p>
<p><strong>简化复杂联结</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> productstomers <span class="keyword">AS</span></span><br><span class="line">	<span class="keyword">SELECT</span> cust_name,cust_contact,prod_id</span><br><span class="line">	<span class="keyword">FROM</span> customers,orders,orderitems</span><br><span class="line">	<span class="keyword">WHERE</span> customers.cust_id = orders.cust_id</span><br><span class="line">		<span class="keyword">AND</span> orderitems.order_num = orders.order_num;</span><br><span class="line">//创建名为 productstomers 的视图</span><br><span class="line">//技巧：视图不受特定数据的限制，重用性更高</span><br><span class="line">//使用 <span class="keyword">show</span> <span class="keyword">tables</span>可以查看已创建的视图</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> cust_name,cust_contact</span><br><span class="line"><span class="keyword">FROM</span> productstomers</span><br><span class="line"><span class="keyword">WHERE</span> prod_id = <span class="string">'TNT2'</span>;</span><br><span class="line">//添加新的 WHERE 子句到视图中，自动组合</span><br></pre></td></tr></table></figure>

<p><strong>重新格式化数据</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> vendorlocations <span class="keyword">AS</span> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">Concat</span>(<span class="keyword">Trim</span>(vend_name),<span class="string">'('</span>,<span class="keyword">RTrim</span>(vend_country),<span class="string">')'</span>) <span class="keyword">AS</span> vend_tittle</span><br><span class="line"><span class="keyword">FROM</span> vendors</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name;</span><br><span class="line">//在经常使用这个格式的结果时，可创建一个视图方便操作</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> vendorlocations;</span><br></pre></td></tr></table></figure>

<p><strong>结合计算字段</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> orderitemsexpanded <span class="keyword">AS</span> <span class="keyword">SELECT</span> order_num,prod_id,quantity,item_price,quantity*item_price <span class="keyword">AS</span> expanded_price</span><br><span class="line"><span class="keyword">FROM</span> orderitems</span><br><span class="line">//每种物品的总价格</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> orderitemsexpanded</span><br><span class="line"><span class="keyword">WHERE</span> order_num = <span class="number">20005</span>;</span><br><span class="line">//订单20005中物品的总价格</span><br></pre></td></tr></table></figure>

<p>注：并非所有视图都能更新，只有MySQL能确定被更新的基表时才能更新</p>
<blockquote>
<p>视图应该用于检索而不是更新</p>
</blockquote>
<h2 id="七、存储过程"><a href="#七、存储过程" class="headerlink" title="七、存储过程"></a>七、存储过程</h2><h3 id="7-1-理解"><a href="#7-1-理解" class="headerlink" title="7.1     理解"></a>7.1     理解</h3><p>存储过程是为以后的使用而保存的一条或多条MySQL语句的集合，与批文件类似</p>
<p>当一个操作涉及到针对多个表的根据条件执行的多条MySQL语句时可创建一个存储过程保存该操作</p>
<h3 id="7-2-优点"><a href="#7-2-优点" class="headerlink" title="7.2    优点"></a>7.2    优点</h3><ul>
<li>将处理封装到易使用的单元中，可简化复杂的操作</li>
<li>使用同一存储过程，不用反复编写，可减少错误，有利于保证数据的一致性</li>
<li>当表名等有变化只需更改存储过程的代码，可简化对变动的管理，有利于提高安全性</li>
<li>使用存储过程比使用单独的SQL语句更快，有利于提高性能</li>
<li>利用只能在单个请求中使用的MySQL元素和特性，可功能更强编写更灵活的代码</li>
<li>编写和执行存储过程的权限是分开的，即使不能编写也能使用存储过程</li>
</ul>
<h3 id="7-3-基本使用"><a href="#7-3-基本使用" class="headerlink" title="7.3    基本使用"></a>7.3    基本使用</h3><h4 id="7-3-1-创建-CREATE-PROCEDUR"><a href="#7-3-1-创建-CREATE-PROCEDUR" class="headerlink" title="7.3.1    创建(CREATE PROCEDUR)"></a>7.3.1    创建(CREATE PROCEDUR)</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER //</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> productpricing()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">SELECT</span> <span class="keyword">Avg</span>(prod_price) <span class="keyword">AS</span> priceverage</span><br><span class="line">	<span class="keyword">FROM</span> products;</span><br><span class="line"><span class="keyword">END</span>//</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br><span class="line">//<span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span>定义存储过程，()用于接受参数，<span class="keyword">BEGIN</span>和<span class="keyword">END</span>限定存储过程体(<span class="keyword">SELECT</span>语句)</span><br><span class="line">//MySQL命令行程序默认结束分隔符为 ; ,其无法解释一条语句的两个;字符，可通过 DELIMITER 临时更改分隔符(除\外任何字符)以解释存储过程本身的;</span><br><span class="line">//存储过程创建之后保存在服务器上直至被删除</span><br></pre></td></tr></table></figure>

<h4 id="7-3-2-调用-CALL"><a href="#7-3-2-调用-CALL" class="headerlink" title="7.3.2    调用(CALL)"></a>7.3.2    调用(CALL)</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CALL</span> productpricing();</span><br><span class="line">//存储过程实际上是一种函数</span><br><span class="line">//存储过程可以显示结果，也可以不显示（赋值给变量）</span><br></pre></td></tr></table></figure>

<h4 id="7-3-4-删除-DROP-PROCEDUR"><a href="#7-3-4-删除-DROP-PROCEDUR" class="headerlink" title="7.3.4    删除(DROP PROCEDUR)"></a>7.3.4    删除(DROP PROCEDUR)</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> productpricing;</span><br><span class="line">//存储过程不存在时会产生错误，可用<span class="keyword">DROP</span>  PROCEDUR <span class="keyword">IF</span> <span class="keyword">EXISTS</span> 取消报错</span><br></pre></td></tr></table></figure>

<h4 id="7-3-4-查看创建存储过程的语句"><a href="#7-3-4-查看创建存储过程的语句" class="headerlink" title="7.3.4    查看创建存储过程的语句"></a>7.3.4    查看创建存储过程的语句</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> productpricing;</span><br></pre></td></tr></table></figure>

<h4 id="7-3-5-查看存储过程的详细信息-时间、创建者等"><a href="#7-3-5-查看存储过程的详细信息-时间、创建者等" class="headerlink" title="7.3.5    查看存储过程的详细信息(时间、创建者等)"></a>7.3.5    查看存储过程的详细信息(时间、创建者等)</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">PROCEDURE</span> <span class="keyword">STATUS</span> <span class="keyword">LIKE</span> <span class="string">'productpricing'</span>;</span><br><span class="line">//不使用 LIKE 则列出所有存储过程</span><br></pre></td></tr></table></figure>

<h3 id="7-4-使用参数"><a href="#7-4-使用参数" class="headerlink" title="7.4     使用参数"></a>7.4     使用参数</h3><p>存储过程一般不直接显示结果，而是将结果赋值给变量</p>
<h4 id="7-4-1-创建含有参数的存储过程"><a href="#7-4-1-创建含有参数的存储过程" class="headerlink" title="7.4.1    创建含有参数的存储过程"></a>7.4.1    创建含有参数的存储过程</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> productpricing(</span><br><span class="line">	<span class="keyword">OUT</span> p1 <span class="built_in">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>),</span><br><span class="line">	<span class="keyword">OUT</span> ph <span class="built_in">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>),</span><br><span class="line">	<span class="keyword">OUT</span> pa <span class="built_in">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">SELECT</span> <span class="keyword">Min</span>(prod_price)</span><br><span class="line">	<span class="keyword">INTO</span> p1</span><br><span class="line">	<span class="keyword">FROM</span> products;</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="keyword">Max</span>(prod_price)</span><br><span class="line">	<span class="keyword">INTO</span> ph</span><br><span class="line">	<span class="keyword">FROM</span> products;</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="keyword">Avg</span>(prod_price)</span><br><span class="line">	<span class="keyword">INTO</span> pa</span><br><span class="line">	<span class="keyword">FROM</span> products;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line">//OUT关键字指定参数，DECIMAL指定参数的数据类型（与表一致）</span><br><span class="line">//三种类型的参数：</span><br><span class="line">IN:传递给存储过程</span><br><span class="line">OUT:从存储过程传出</span><br><span class="line">INOUT：对存储过程传入传出</span><br><span class="line">//INTO关键字指定结果保存的内部变量</span><br><span class="line">//一个参数不能返回多个行和列</span><br></pre></td></tr></table></figure>

<h4 id="7-4-2-调用含有参数的存储过程"><a href="#7-4-2-调用含有参数的存储过程" class="headerlink" title="7.4.2    调用含有参数的存储过程"></a>7.4.2    调用含有参数的存储过程</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CALL</span> productpricing(@pricelow,</span><br><span class="line">				  @pricehigh,</span><br><span class="line">				  @priceavrage);</span><br><span class="line">//传入的实参数目与创建时必须相同</span><br><span class="line">//MySQL变量必须以@开始</span><br><span class="line">//存储过程返回的结果会保存在实参变量中</span><br></pre></td></tr></table></figure>

<h4 id="7-4-3-使用包含结果的变量"><a href="#7-4-3-使用包含结果的变量" class="headerlink" title="7.4.3    使用包含结果的变量"></a>7.4.3    使用包含结果的变量</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @pricelow,@pricehigh;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">//另一例子</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> ordertaral(</span><br><span class="line">	<span class="keyword">IN</span> onumber <span class="built_in">INT</span>,</span><br><span class="line">	<span class="keyword">OUT</span> ototal <span class="built_in">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">SELECT</span> Sun(item_price*quantity)</span><br><span class="line">	<span class="keyword">FROM</span> orderitems</span><br><span class="line">	<span class="keyword">WHERE</span> order_num = onumber</span><br><span class="line">	<span class="keyword">INTO</span> ototal;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> ordertaral(<span class="number">20005</span>,@total);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> @tatal;</span><br></pre></td></tr></table></figure>

<h3 id="7-5-智能存储过程"><a href="#7-5-智能存储过程" class="headerlink" title="7.5    智能存储过程"></a>7.5    智能存储过程</h3><p>在存储过程中包含业务规则和智能处理，而不是简单地封装 SELECT 语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Name: ordertotal</span></span><br><span class="line"><span class="comment">-- Parameters: onumber = order number</span></span><br><span class="line"><span class="comment">-- 			  taxable = 0 if not taxble,1 if taxble</span></span><br><span class="line"><span class="comment">-- 			   ototal = order total variable</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> ordertotal(</span><br><span class="line">	<span class="keyword">IN</span> onumber <span class="built_in">INT</span>,</span><br><span class="line">	<span class="keyword">IN</span> taxable <span class="built_in">BOOLEAN</span>,</span><br><span class="line">	<span class="keyword">OUT</span> ototal <span class="built_in">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>)</span><br><span class="line">)<span class="keyword">COMMENT</span> <span class="string">'Obtain order total,optionally adding tax'</span></span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line">	<span class="comment">-- Declare variable for tatal</span></span><br><span class="line">	<span class="keyword">DECLARE</span> total <span class="built_in">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>);</span><br><span class="line">	<span class="comment">-- Declare tax percentage</span></span><br><span class="line">	<span class="keyword">DECLARE</span> taxrate <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">6</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- Get the order tatal</span></span><br><span class="line">	<span class="keyword">SELECT</span> <span class="keyword">Sum</span>(item_price*quantity)</span><br><span class="line">	<span class="keyword">FROM</span> orderitems</span><br><span class="line">	<span class="keyword">WHERE</span> order_num = onumber</span><br><span class="line">	<span class="keyword">INTO</span> total;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- IS this taxable</span></span><br><span class="line">	IF taxable THEN</span><br><span class="line">		<span class="comment">-- Yes,add taxrate to the tatal</span></span><br><span class="line">		<span class="keyword">SELECT</span> total+(total/<span class="number">100</span>*taxrate) <span class="keyword">INTO</span> total;</span><br><span class="line">	<span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line">		<span class="comment">-- save to out varible</span></span><br><span class="line">		<span class="keyword">SELECT</span> total <span class="keyword">INTO</span> ototal;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line">//<span class="comment">-- 表示注释</span></span><br><span class="line">//参数taxable表示是否增加税</span><br><span class="line">//<span class="keyword">COMMENT</span>关键字（可选）指定的值保存会在<span class="keyword">STATUS</span></span><br><span class="line">//<span class="keyword">DECLARE</span>定义局部变量，指定变量名和数据类型（或默认值）</span><br><span class="line">//<span class="keyword">IF</span> 语句判断是否执行，可结合ELSEIF、<span class="keyword">ELSE</span>、<span class="keyword">THEN</span>等子句使用（流控制语句）</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> ordertotal(<span class="number">20005</span>,<span class="number">1</span>,@total);</span><br><span class="line"><span class="keyword">SELECT</span> @total;</span><br></pre></td></tr></table></figure>

<h3 id="7-6-使用游标-cursor"><a href="#7-6-使用游标-cursor" class="headerlink" title="7.6    使用游标(cursor)"></a>7.6    使用游标(cursor)</h3><h4 id="7-6-1-理解"><a href="#7-6-1-理解" class="headerlink" title="7.6.1    理解"></a>7.6.1    理解</h4><p>游标是一个存储在MySQL服务器上的数据库查询，是由SELECT语句检索出的结果集；</p>
<p>MySQL游标只能用于存储过程或函数，应用程序可利用游标滚动和浏览其中的数据(如前进或后退几行等操作)</p>
<h4 id="7-6-2-创建游标"><a href="#7-6-2-创建游标" class="headerlink" title="7.6.2    创建游标"></a>7.6.2    创建游标</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> processorders()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">DECLARE</span> ordernumbers <span class="keyword">CURSOR</span></span><br><span class="line">	<span class="keyword">FOR</span></span><br><span class="line">	<span class="keyword">SELECT</span> order_num <span class="keyword">FROM</span> orders;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line">//<span class="keyword">DECLARE</span>语句创建游标，<span class="keyword">DECLARE</span>命名游标，<span class="keyword">FOR</span>指定<span class="keyword">SELECT</span>语句</span><br><span class="line">//只是定义并没有检索数据</span><br></pre></td></tr></table></figure>

<h4 id="7-6-3-打开或关闭游标"><a href="#7-6-3-打开或关闭游标" class="headerlink" title="7.6.3    打开或关闭游标"></a>7.6.3    打开或关闭游标</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">OPEN ordernumbers;</span><br><span class="line">&#x2F;&#x2F;执行查询并存储检索出的数据</span><br><span class="line">CLOSE ordernumbers;</span><br><span class="line">&#x2F;&#x2F;释放内存和资源，MySQL默认在到达END</span><br><span class="line">语句时自动关闭游标</span><br></pre></td></tr></table></figure>

<h4 id="7-6-4-使用游标数据"><a href="#7-6-4-使用游标数据" class="headerlink" title="7.6.4    使用游标数据"></a>7.6.4    使用游标数据</h4><p><strong>检索单个行</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">//通过FETCH检索当前行（将ORDER_num列值赋给o变量）</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> processorders()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">DECLARE</span> o <span class="built_in">INT</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">DECLARE</span> ordernumbers <span class="keyword">CURSOR</span></span><br><span class="line">	<span class="keyword">FOR</span></span><br><span class="line">	<span class="keyword">SELECT</span> order_num <span class="keyword">FROM</span> orders;</span><br><span class="line">	</span><br><span class="line">	OPEN ordernumbers;</span><br><span class="line">	</span><br><span class="line">	FETCH ordernumbers INTO o;</span><br><span class="line">	</span><br><span class="line">	CLOSE ordernumbers;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line">//FETCH语句可用来分别访问游标的每一行，可指定检索哪些数据以及存储位置，还可以向前移动游标内部行指针，使下一个FETCH语句检索下一行</span><br></pre></td></tr></table></figure>

<p><strong>循环检索数据</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">定义变量和句柄，创建并打开一个游标，重复读取所有行，然后关闭游标：</span><br><span class="line">CREATE PROCEDURE processorders()</span><br><span class="line">BEGIN</span><br><span class="line">	</span><br><span class="line">	DECLARE done BOOLEAN DEFAULT 0;</span><br><span class="line">	DECLARE o INT;</span><br><span class="line">	</span><br><span class="line">	DECLARE ordernumbers CURSOR</span><br><span class="line">	FOR</span><br><span class="line">	SELECT order_num FROM orders;</span><br><span class="line">	</span><br><span class="line">	DECLARE CONTINUE HANDLER FOR SQLSTATE &#39;02000&#39; SET done &#x3D; 1;</span><br><span class="line">	</span><br><span class="line">	OPEN ordernumbers;</span><br><span class="line">	</span><br><span class="line">	REPEAT</span><br><span class="line">	</span><br><span class="line">		FETCH ordernumbers INTO o;</span><br><span class="line">		</span><br><span class="line">	UNTIL done END REPEAT;</span><br><span class="line">	</span><br><span class="line">	CLOSE ordernumbers;</span><br><span class="line">    </span><br><span class="line">END;</span><br><span class="line">&#x2F;&#x2F;REPEAT 表示反复执行直到条件为真</span><br><span class="line">&#x2F;&#x2F;CONTINUE HANDLER 条件出现（SQLSTATE &#39;02000&#39; ）时被执行的代码（done  &#x3D; 1）</span><br><span class="line">&#x2F;&#x2F;DECLARE定义的局部变量要在任意游标或句柄之前定义，句柄必须在游标之后定义</span><br></pre></td></tr></table></figure>

<p><strong>逐行处理数据</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">一个关于存储过程、游标、逐行处理以及在存储过程调用其它存储过程的案例：</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> processorders()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">DECLARE</span> done <span class="built_in">BOOLEAN</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">DECLARE</span> o <span class="built_in">INT</span>;</span><br><span class="line">	<span class="keyword">DECLARE</span> t <span class="built_in">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">DECLARE</span> ordernumbers <span class="keyword">CURSOR</span></span><br><span class="line">	<span class="keyword">FOR</span></span><br><span class="line">	<span class="keyword">SELECT</span> order_num <span class="keyword">FROM</span> orders;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">DECLARE</span> CONTINUE <span class="keyword">HANDLER</span> <span class="keyword">FOR</span> <span class="keyword">SQLSTATE</span> <span class="string">'02000'</span> <span class="keyword">SET</span> done = <span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> ordertotals</span><br><span class="line">		(order_num <span class="built_in">INT</span>,total <span class="built_in">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>));</span><br><span class="line">	</span><br><span class="line">	OPEN ordernumbers;</span><br><span class="line">	</span><br><span class="line">	REPEAT</span><br><span class="line">	</span><br><span class="line">		FETCH ordernumbers INTO o;	</span><br><span class="line">		<span class="keyword">CALL</span> ordertotal(o,<span class="number">1</span>,t);</span><br><span class="line">		<span class="keyword">INSERT</span> <span class="keyword">INTO</span> ordertotals(order_num,total)</span><br><span class="line">		<span class="keyword">VALUES</span>(o,t);</span><br><span class="line">		</span><br><span class="line">	UNTIL done <span class="keyword">END</span> <span class="keyword">REPEAT</span>;</span><br><span class="line">	</span><br><span class="line">	CLOSE ordernumbers;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<p><strong>注意事项：</strong></p>
<p>存储过程处理结束后游标也随之消失</p>
<p>已经声明过的游标不用再次声明</p>
<p>游标要在打开后才能使用</p>
<h2 id="八、触发器"><a href="#八、触发器" class="headerlink" title="八、触发器"></a>八、触发器</h2><h3 id="8-1-理解"><a href="#8-1-理解" class="headerlink" title="8.1    理解"></a>8.1    理解</h3><p>用于在某个表发生更改时自动执行某些语句完成所需功能</p>
<p>触发器是响应 INSERT、DELETE、UPDATE 语句而自动执行的一条MySQL语句(或BEGIN和END之间的一组语句)</p>
<p>除了以上三种MySQL语句其它不支持触发器</p>
<p>只有表支持触发器，视图或临时表不支持</p>
<p>触发器按每个表每个事件每次地定义，每个表每个事件每次只允许一个触发器。每个表最多支持6个触发器（每条 INSERT 、 UPDATE 和 DELETE 的之前和之后）</p>
<p>如果 BEFORE 触发器失败，则  MySQL 将不执行请<br>求的操作。如果 BEFORE 触发器或语句本身失败，MySQL将不执行 AFTER 触发器。</p>
<h3 id="8-2-基本使用"><a href="#8-2-基本使用" class="headerlink" title="8.2    基本使用"></a>8.2    基本使用</h3><h4 id="8-2-1-创建触发器"><a href="#8-2-1-创建触发器" class="headerlink" title="8.2.1    创建触发器"></a>8.2.1    创建触发器</h4><p>给出：</p>
<ul>
<li>唯一的触发器名</li>
<li>触发器关联的表</li>
<li>触发器应该响应的活动（ DELETE 、 INSERT 或 UPDATE ）</li>
<li>触发器何时执行（BEFORE或AFTER）</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> newproduct <span class="keyword">AFTER</span> <span class="keyword">INSERT</span> <span class="keyword">ON</span> products</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span> <span class="keyword">SELECT</span> <span class="string">'Product added'</span>;</span><br><span class="line">//触发器必须在每个表中唯一，但推荐保持每个数据库的触发器名唯一</span><br><span class="line">//FOR EACH ROW ，对每个更改执行代码（显示'Product added'）</span><br></pre></td></tr></table></figure>

<h4 id="8-2-2-使用触发器"><a href="#8-2-2-使用触发器" class="headerlink" title="8.2.2     使用触发器"></a>8.2.2     使用触发器</h4><p><strong>INSERT 触发器</strong></p>
<ul>
<li>在 INSERT 触发器代码内，可引用一个名为 NEW 的虚拟表，访问被插入的行；</li>
<li>在 BEFORE INSERT 触发器中， NEW 中的值也可以被更新（允许更改被插入的值）；</li>
<li>对于 AUTO_INCREMENT 列， NEW 在 INSERT 执行之前包含 0 ，在 INSERT执行之后包含新的自动生成值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TRIGGER neworder AFTER INSERT ON orders</span><br><span class="line">FOR EACH ROW SELECT NEW.order_bum;</span><br><span class="line">&#x2F;&#x2F;输出自动增量的值</span><br></pre></td></tr></table></figure>

<p><strong>DELECT 触发器</strong></p>
<ul>
<li>在 DELETE 触发器代码内，可引用一个名为 OLD 的虚拟表，访问被删除的行；</li>
<li>OLD 中的值全都是只读的，不能更新。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TRIGGER deleteorder BEFORE ON orders</span><br><span class="line">FOR EACH ROW</span><br><span class="line">BEGIN</span><br><span class="line">	INSERT INTO archive_orders(order_num,order_date,cust_id)</span><br><span class="line">	VALUES(OLD.order_num,OLD.order_date,OLD.cust_id);</span><br><span class="line">END;</span><br><span class="line">&#x2F;&#x2F;如果触发器失败不会执行删除操作</span><br></pre></td></tr></table></figure>

<p><strong>UPDATE触发器</strong></p>
<ul>
<li>可以引用名为 OLD 的虚拟表访问以前的值，引用名为 NEW 的虚拟表访问新更新的值；</li>
<li>NEW 中的值可能也被更新（允许更改将要用于 UPDATE 语句中的值）；</li>
<li>OLD 中的值全都是只读的，不能更新。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TRIGGER updatevendor BEFORE UPDATE ON vendors</span><br><span class="line">FOR EACH ROW SET NEW.vend_state &#x3D; Upper(NEW.vend_state);</span><br><span class="line">&#x2F;&#x2F;更新前将值转换为大写</span><br></pre></td></tr></table></figure>

<h4 id="8-2-3-删除触发器"><a href="#8-2-3-删除触发器" class="headerlink" title="8.2.3    删除触发器"></a>8.2.3    删除触发器</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> newproduct；</span><br><span class="line">//触发器不能更新或覆盖</span><br></pre></td></tr></table></figure>

<h4 id="8-2-4-注意事项"><a href="#8-2-4-注意事项" class="headerlink" title="8.2.4    注意事项"></a>8.2.4    注意事项</h4><p>1.对于 INSERT 和 UPDATE 触发器，BEFORE 常用于数据验证和净化，有利于保障数据的一致性</p>
<p>2.创建触发器需要特殊的安全访问权限，但执行是自动的；</p>
<p>3.可用触发器来创建审计跟踪，记录数据的变化</p>
<h2 id="九、事务机制"><a href="#九、事务机制" class="headerlink" title="九、事务机制"></a>九、事务机制</h2><h3 id="9-1-理解"><a href="#9-1-理解" class="headerlink" title="9.1    理解"></a>9.1    理解</h3><p>事务处理机制用来管理必须成批执行的MySQL操作，这组操作要么全部执行要么完全不执行，用于维护数据库的完整性；</p>
<p>如果没有错误发生，整组语句提交给数据库表。如果发生错误，则进行回退以恢复数据库到某个已知且安全的状态。</p>
<p><strong>常用术语：</strong></p>
<p>事务（ transaction ）：一组SQL语句；<br>回退（ rollback ）：撤销指定SQL语句的过程；<br>提交（ commit ）：将未存储的SQL语句结果写入数据库表；<br>保留点（ savepoint ）：事务处理中设置的临时占位符，可对它发布回退（与回退整个事务不同）</p>
<h3 id="9-2-控制事务处理"><a href="#9-2-控制事务处理" class="headerlink" title="9.2    控制事务处理"></a>9.2    控制事务处理</h3><p>将SQL语句组分解为逻辑块，对何时写数据，何时撤销进行明确的管理。</p>
<p><strong>注意：</strong></p>
<p>InnoDB 引擎支持事务处理功能而 MyISAM 不支持；</p>
<p>事务开始的标识为<code>START TRANSACTION</code>，回退命令为<code>ROLLBACK</code>，提交命令为<code>COMMIT</code></p>
<p>当 COMMIT 或 ROLLBACK 语句执行后，事务会自<br>动关闭</p>
<h4 id="9-2-1-ROLLBACK"><a href="#9-2-1-ROLLBACK" class="headerlink" title="9.2.1     ROLLBACK"></a>9.2.1     ROLLBACK</h4><p>ROLLBACK 命令用来回退（撤销）MySQL语句</p>
<p>只能在一个事务处理内使用</p>
<p>可以回退 INSERT 、 UPDATE 和 DELETE 语句，但SELECT 语句、 CREATE 或 DROP 操作不能回退</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM ordertotals;</span><br><span class="line">START TRANSACTION;</span><br><span class="line">DELECT FROM ordertatals;</span><br><span class="line">SELECT * FROM ordertotals;</span><br><span class="line">ROLLBACK;</span><br><span class="line">SELECT * FROM ordertotals;</span><br></pre></td></tr></table></figure>

<h4 id="9-2-2-COMMIT"><a href="#9-2-2-COMMIT" class="headerlink" title="9.2.2    COMMIT"></a>9.2.2    COMMIT</h4><p>在事务处理块中，提交不会隐含进行，使用 COMMIT 语句明确地提交</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">START TRANSACTION;</span><br><span class="line">DELECT FROM orderitems WHERE order_num &#x3D; 20010;</span><br><span class="line">DELECT FROM orders WHERE order_num &#x3D; 20010;</span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure>

<h4 id="9-2-3-SAVEPOINT"><a href="#9-2-3-SAVEPOINT" class="headerlink" title="9.2.3      SAVEPOINT"></a>9.2.3      SAVEPOINT</h4><p>SAVEPOINT 语句在事务处理块中合适的位置放置占位符(保留点)，用于回退部分事务处理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SAVEPOINT deletel;	&#x2F;&#x2F;创建保留点</span><br><span class="line">ROLLBACK TO deletel；回退到保留点位置</span><br><span class="line">&#x2F;&#x2F;保留点取唯一名字</span><br><span class="line">&#x2F;&#x2F;保留点在事务结束后自动释放，也可以用 RELEASE SAVEPOINT 明确释放</span><br></pre></td></tr></table></figure>

<h4 id="9-2-4-默认提交行为"><a href="#9-2-4-默认提交行为" class="headerlink" title="9.2.4    默认提交行为"></a>9.2.4    默认提交行为</h4><p>一般MySQL语句都是直接针对数据库表执行且立即生效，即提交操作是自动进行的，称为<strong>隐含提交</strong></p>
<p>可使用<code>SET autocommit = 0</code>更改默认的自动提交行为，此时COMIMIT也不会生效，直至再次将其设为 1。</p>
<p>该设置针对的是每个连接不是服务器</p>
<h2 id="十、字符集与校对"><a href="#十、字符集与校对" class="headerlink" title="十、字符集与校对"></a>十、字符集与校对</h2><h3 id="10-1-理解"><a href="#10-1-理解" class="headerlink" title="10.1    理解"></a>10.1    理解</h3><p>数据库表被用来存储和检索数据，不同的语言和字符集需要以不同的方式存储和检索。</p>
<p>使用何种字符集和校对可以在服务器、数据库、表或列层级上进行设置。</p>
<ul>
<li><strong>字符集：</strong>字母和符号的集合</li>
<li><strong>编码：</strong>某个字符集成员的内部表示</li>
<li><strong>校对：</strong>规定字符如何比较的指令</li>
</ul>
<h3 id="10-2-设置字符集与校对顺序"><a href="#10-2-设置字符集与校对顺序" class="headerlink" title="10.2    设置字符集与校对顺序"></a>10.2    设置字符集与校对顺序</h3><p><strong>查看所支持的字符集列表</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW SHARACTER SET;</span><br><span class="line">&#x2F;&#x2F;显示所有可用的字符集以及每个字符集的描述和默认校对</span><br></pre></td></tr></table></figure>

<p><strong>查看所支持的校对列表</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW COLLATION;</span><br><span class="line">&#x2F;&#x2F;显示所有可用的校对，以及它们适用的字符集</span><br></pre></td></tr></table></figure>

<p><strong>查看数据库所用的字符集与校对</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &#39;character%&#39;;</span><br><span class="line">SHOW VARIABLES LIKE &#39;collation%&#39;;</span><br></pre></td></tr></table></figure>

<p><strong>设置字符集与校对</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.创建表时指定字符集与校对</span><br><span class="line">CREATE TABLE mytable</span><br><span class="line">(</span><br><span class="line">	column1 INT,</span><br><span class="line">	column2 VERCHAR(10)</span><br><span class="line">)DEFAULT CHARACTER SET hebrew</span><br><span class="line"> COLLATE hebrew_qeneral_ci;</span><br><span class="line"> </span><br><span class="line">2.给列指定字符集与校对</span><br><span class="line">CREATE TABLE mytable</span><br><span class="line">(</span><br><span class="line">	column1 INT,</span><br><span class="line">	column2 VERCHAR(10) CHARACTER SET latin1 COLLATE latin1_general_ci</span><br><span class="line">)DEFAULT CHARACTER SET hebrew</span><br><span class="line"> COLLATE hebrew_qeneral_ci;</span><br><span class="line"></span><br><span class="line">3.在 SELECT 语句中临时指定校对顺序</span><br><span class="line">SELECT * FROM customers</span><br><span class="line">ORDER BY lastname,firstname COLLATE latin_general_cs;</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<p>同一字符集可具有不止一种校对；</p>
<p>有的校对区分大小写，故其会出现两次(<code>_cs</code>区分，<code>_ci</code>不区分);</p>
<p>不同的校对顺序会影响排序也会影响搜索；</p>
<p>MySQL服务器安装时会定义一个默认的字符集和校对;</p>
<p>COLLATE 可用于 ORDER BY、GROUP BY 、 HAVING 、聚集函数、别名等。</p>
<p>串可以在字符集之间进行转换(Cast() 或 Convert ()函数)</p>
<h2 id="十一、安全管理"><a href="#十一、安全管理" class="headerlink" title="十一、安全管理"></a>十一、安全管理</h2><h3 id="11-1-访问控制"><a href="#11-1-访问控制" class="headerlink" title="11.1    访问控制"></a>11.1    访问控制</h3><p>MySQL服务器的安全基础：用户应该对他们需要的数据具有适当的访问权，既不能多也不能少。</p>
<p>访问控制：给用户提供他们所需的访问权，且仅提供他们所需的访问权。</p>
<p>通过创建和管理不同的用户账号实现访问控制，确保数据库服务器中关键数据的安全和完整。</p>
<p>常见的用户账号情况：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">多数用户只需读写表，少数用户需要创建和删除表；</span><br><span class="line">某些用户需要读表但不需要更新表；</span><br><span class="line">某些用户需要处理账号的权限，但大多数不需要；</span><br><span class="line">允许某些用户添加数据但不能删除数据；</span><br><span class="line">允许某些用户通过存储过程访问数据但不能直接访问；</span><br><span class="line">根据用户的登录地点来限制对某些功能的访问。</span><br></pre></td></tr></table></figure>

<h3 id="11-2-用户管理"><a href="#11-2-用户管理" class="headerlink" title="11.2    用户管理"></a>11.2    用户管理</h3><p>MySQL用户账号的信息存储在名为 mysql 的数据库中</p>
<p>获取所有用户账号列表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">USE</span> mysql</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">user</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line">//一般不直接访问 mysql 数据库，对该数据库的破坏会严重影响 MySQL 服务器。</span><br></pre></td></tr></table></figure>

<p><strong>1.使用 <code>CREATE USER</code> 语句</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">最简单清晰的方法</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> joey INDENTIFIED <span class="keyword">BY</span> <span class="string">'joey'</span>;</span><br><span class="line"></span><br><span class="line">//<span class="keyword">CREATE</span> <span class="keyword">USER</span> 指定账号名，INDENTIFIED <span class="keyword">BY</span> 给出纯文本口令，MySQL会自动进行加密再保存。</span><br><span class="line">//创建账号时可以暂时不指定口令</span><br></pre></td></tr></table></figure>

<p><strong>2.使用 <code>GRANT</code> 语句</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">//赋予权限同时创建用户</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">USAGE</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'user01'</span>@<span class="string">'localhost'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'123456'</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> joey.* <span class="keyword">to</span> <span class="string">'joey'</span>@<span class="string">'localhost'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'joey'</span>;</span><br></pre></td></tr></table></figure>

<p><strong>3.使用 <code>INSERT</code> 语句</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">//直接插入行到 user 表中，不推荐</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> </span><br><span class="line">          (host, <span class="keyword">user</span>, authentication_string, </span><br><span class="line">           select_priv, insert_priv, update_priv) </span><br><span class="line">           <span class="keyword">VALUES</span> (<span class="string">'localhost'</span>, <span class="string">'guest'</span>, </span><br><span class="line">           <span class="keyword">PASSWORD</span>(<span class="string">'guest123'</span>), <span class="string">'Y'</span>, <span class="string">'Y'</span>, <span class="string">'Y'</span>);</span><br><span class="line">报错：ERROR 1364 (HY000): Field 'ssl_cipher' doesn't have a default value	//mysql用户表的中某些字段不能为空.</span><br><span class="line">分析：my-default.ini中指定严格模式，为了安全，禁止通过 <span class="keyword">insert</span> 直接修改 mysql 库中的 <span class="keyword">user</span> 表。</span><br><span class="line">解决：修改my.ini中	<span class="keyword">sql</span>-<span class="keyword">mode</span>=NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br></pre></td></tr></table></figure>

<h4 id="11-2-3-重命名用户账号"><a href="#11-2-3-重命名用户账号" class="headerlink" title="11.2.3    重命名用户账号"></a>11.2.3    重命名用户账号</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RENAME</span> <span class="keyword">USER</span> joey <span class="keyword">TO</span> ben;</span><br><span class="line">//MySQL 5 之前通过 <span class="keyword">UPDATE</span> 直接更新 <span class="keyword">user</span> 表</span><br></pre></td></tr></table></figure>

<h4 id="11-2-4-设置账号访问权限"><a href="#11-2-4-设置账号访问权限" class="headerlink" title="11.2.4     设置账号访问权限"></a>11.2.4     设置账号访问权限</h4><p><strong>查看用户权限</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GRANTS</span>;	//查看当前用户的权限</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> ben;	//查看特定用户的权限</span><br><span class="line">//USAGE ON *.* 表示没有权限，即只能登录MySQL但不能看到数据也无法执行操作</span><br><span class="line">//MySQL的权限通过用户名和主机名结合定义，如'ben'@'%'（%为默认主机名）</span><br></pre></td></tr></table></figure>

<p><strong>用户权限类型</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALL				除GRANT OPTION外 的 所 有 权 限</span><br><span class="line">ALTER			使用ALTER TABLE</span><br><span class="line">ALTER ROUTINE	 使用ALTER PROCEDURE和DROP PROCEDURE</span><br><span class="line">CREATE			使用CREATE TABLE</span><br><span class="line">CREATE ROUTINE	 使用CREATE PROCEDURE</span><br><span class="line">CREATE TEMPORARY 使用CREATE TEMPORARY TABLE TABLES</span><br><span class="line">CREATE USER		使用CREATE USER、DROP USER、RENAME USER 和 REVOKE ALL PRIVILEGES</span><br><span class="line">CREATE VIEW		使用CREATE VIEW</span><br><span class="line">DELETE			使用DELETE</span><br><span class="line">DROP			使用DROP TABLE</span><br><span class="line">EXECUTE			使用CALL和存储过程</span><br><span class="line">FILE			使用SELECT INTO OUTFILE和LOAD DATA INFILE</span><br><span class="line">GRANT OPTION	使用 GRANT 和 REVOKE</span><br><span class="line">INDEX			使用CREATE INDEX 和 DROP INDEX</span><br><span class="line">INSERT			使用INSERT</span><br><span class="line">LOCK TABLES		 使用 LOCK TABLES</span><br><span class="line">PROCESS			使用SHOW FULL PROCESSLIST</span><br><span class="line">RELOAD			使用FLUSH</span><br><span class="line">REPLICATION CLIENT服 务 器 位 置 的 访 问</span><br><span class="line">REPLICATION SLAVE 由 复 制 从 属 使 用</span><br><span class="line">SELECT			使用SELECT</span><br><span class="line">SHOW DATABASES	使用SHOW DATABASES</span><br><span class="line">SHOW VIEW		使用SHOW CREATE VIEW</span><br><span class="line">SHUTDOWN		使用mysqladmin shutdown (用来关闭MySQL)</span><br><span class="line">SUPER			使用CHANGE MASTER、KILL、LOGS、PURGE、MASTER 和SET GLOBAL。还允许mysqladmin调试登录</span><br><span class="line">UPDATE			 使用UUPDATE		</span><br><span class="line">USAGE			无访问权限</span><br></pre></td></tr></table></figure>

<p><strong>赋予用户权限</strong></p>
<p>使用 GRANT 语句赋予用户权限，指定要授予的权限、被授予访问权限的数据库或表、用户名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>,<span class="keyword">INSERT</span> <span class="keyword">ON</span> order.* <span class="keyword">TO</span> ben;</span><br><span class="line">//可授予暂未存在的数据库的访问权限</span><br></pre></td></tr></table></figure>

<p><strong>撤回用户权限</strong></p>
<p>使用 REVOKE 语句撤回用户权限，权限若不存在会报错</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> order.* <span class="keyword">FROM</span> ben</span><br></pre></td></tr></table></figure>

<p>GRANT 和 REVOKE 可在以下层次上控制访问权限：</p>
<ul>
<li>整个服务器：GRANT ALL 或 REVOKE ALL</li>
<li>整个数据库：ON database.*</li>
<li>特定的表：ON database.table</li>
<li>特定的列</li>
<li>特定的存储过程</li>
</ul>
<blockquote>
<p>FLUSH PRIVILEGES;  //修改权限后要刷权限才能生效</p>
</blockquote>
<h4 id="11-2-4-删除用户账户"><a href="#11-2-4-删除用户账户" class="headerlink" title="11.2.4    删除用户账户"></a>11.2.4    删除用户账户</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> ben;</span><br><span class="line">//默认删除 'ben'@'%',不是默认主机名则需指定其主机名</span><br><span class="line">//删除用户账号以及所有相关权限</span><br><span class="line">//mySQL 5 之前要先撤回(<span class="keyword">REVOKE</span>)与账号相关的权限</span><br></pre></td></tr></table></figure>

<h4 id="11-2-5-更改用户口令"><a href="#11-2-5-更改用户口令" class="headerlink" title="11.2.5    更改用户口令"></a>11.2.5    更改用户口令</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> <span class="keyword">FOR</span> ben = <span class="keyword">Password</span>(<span class="string">'CD0226'</span>);</span><br><span class="line">//Password()函数进行加密</span><br><span class="line">//不使用FOR表示更改当前登录用户的口令</span><br></pre></td></tr></table></figure>

<p><strong>修改root用户口令</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、打开 my.cnf 配置文件，找到 [mysqld] ，添加参数： skip-grant-tables</span><br><span class="line">2、重启 MySQL 服务</span><br><span class="line">	service mysql restart</span><br><span class="line">3、使用root登录MySQL，直接回车</span><br><span class="line">	mysql -u root -p</span><br><span class="line">4.更改 root 密码 为 123456</span><br><span class="line">	mysql&gt; use mysql;</span><br><span class="line">	mysql&gt;  update user set authentication_string&#x3D;password(&quot;123456&quot;) where user&#x3D;&#39;root&#39;;</span><br><span class="line">	mysql&gt; flush privileges;  # 刷新权限</span><br><span class="line">5、注释掉 my.cnf 中的 skip-grant-tables 参数，并重启 MySQL 服务</span><br></pre></td></tr></table></figure>

<h2 id="十二、数据库维护"><a href="#十二、数据库维护" class="headerlink" title="十二、数据库维护"></a>十二、数据库维护</h2><h3 id="12-1-数据备份"><a href="#12-1-数据备份" class="headerlink" title="12.1    数据备份"></a>12.1    数据备份</h3><p>1.MySQL数据库是基于磁盘的文件，可简单通过复制备份MySQL的数据。</p>
<p>2.使用命令行实用程序 <strong>mysqldump</strong> 可转储所有数据库内容到某个外部文件。</p>
<p>3.使用命令行实用程序 <strong>mysqlhotcopy</strong> 从一个数据库复制所有数据</p>
<p>（4）使用 <strong>BACKUP TABLE</strong> 或 <strong>SELECT INTO OUTFILE</strong> 语句转储所有数据到某个外部文件</p>
<p>在进行备份前使用 <strong>FLUSH TABLES</strong> 语句刷新未写数据，可通过 <strong>RESTORETABLE</strong> 复原数据</p>
<h3 id="12-2-数据库检查"><a href="#12-2-数据库检查" class="headerlink" title="12.2    数据库检查"></a>12.2    数据库检查</h3><p>（1）ANALYZE TABLE  用来检查表键是否正确</p>
<p>（2）CHECK TABLE 用来针对索引等问题对表进行检查并修复问题</p>
<p>（3）CHANGED 检查自最后一次检查以来改动过的表</p>
<p>（4）EXTENDED 执行最彻底的检查</p>
<p>（5） FAST 只检查未正常关闭的表</p>
<p>（6）MEDIUM 检查所有被删除的链接并进行键检验</p>
<p>（7）QUICK 只进行快速扫描</p>
<p>（8）REPAIR TABLE 用来修复数据不一致的表</p>
<p>（9）OPTIMIZE TABLE 收回被删除数据所用的空间</p>
<h3 id="12-3-诊断启动问题"><a href="#12-3-诊断启动问题" class="headerlink" title="12.3    诊断启动问题"></a>12.3    诊断启动问题</h3><p>当对MySQL配置或服务器本身进行更改时有时会出现服务器启动问题；排除系统本身问题后手动启动服务器再查找具体原因。</p>
<p>常用帮助命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--help 显示帮助——一个选项列表；</span><br><span class="line">--safe-mode 装载减去某些最佳配置的服务器；</span><br><span class="line">--verbose 显示全文本消息（为获得更详细的帮助消息与 --help联合使用）；</span><br><span class="line">--version 显示版本信息然后退出</span><br></pre></td></tr></table></figure>

<h3 id="12-4-查看日志文件"><a href="#12-4-查看日志文件" class="headerlink" title="12.4    查看日志文件"></a>12.4    查看日志文件</h3><p>日志文件一般位于data目录中，可用 FLUSH LOGS 语句刷新和重新开始所有日志文件</p>
<p><strong>日志文件分类：</strong></p>
<p>(1)错误日志</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">包含启动和关闭问题以及任意关键错误的细节，默认名为 hostname.err ，可用--log-error 命令行选项更改</span><br></pre></td></tr></table></figure>

<p>(2)查询日志</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">记录所有MySQL活动，常用于诊断问题，默认名为 hostname.log ，可以用--log 命令行选项更改</span><br></pre></td></tr></table></figure>

<p>(3)二进制日志</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">记录更新过数据（或者可能更新过数据）的所有</span><br><span class="line">语句，默认名为 hostname-bin ，可用 --log-bin 命令行选项更改</span><br></pre></td></tr></table></figure>

<p>(4)缓慢查询日志</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">记录执行缓慢的任何查询，常用于确定数据库何处需要优化，默认名为hostname-slow.log ，可用 --log-slow-queries 命令行选项更改</span><br></pre></td></tr></table></figure>

<h3 id="12-5-性能优化"><a href="#12-5-性能优化" class="headerlink" title="12.5    性能优化"></a>12.5    性能优化</h3><p>当应用出现滞缓现象和性能问题时，往往是数据库优化不佳造成的。在优化性能时要记住：每条规则在某些条件下都会被打破。</p>
<p><strong>优化建议：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">商业服务器的数据库要遵循特定的硬件建议；</span><br><span class="line"></span><br><span class="line">MySQL是一开始的默认配置是良好的，但随时间推移往往需要再次调整内存分配、缓冲区大小等配置；</span><br><span class="line"></span><br><span class="line">MySQL是一个多用户多线程的DBMS，一个任务的执行会影响其它请求；</span><br><span class="line"></span><br><span class="line">同一条 SELECT 语句可用不同方法编写，应使用最佳的；</span><br><span class="line"></span><br><span class="line">OR 条件或 UNION 语句会影响性能</span><br><span class="line"></span><br><span class="line">存储过程执行得比一条一条地执行其中的各条MySQL</span><br><span class="line">语句快</span><br><span class="line"></span><br><span class="line">必须索引数据库表以改善数据检索的性能(正确确定索引对象)</span><br><span class="line"></span><br><span class="line">索引改善数据检索的性能，但损害数据插入、删除和更新的性能</span><br><span class="line"></span><br><span class="line">决不要检索比需求还要多的数据</span><br><span class="line"></span><br><span class="line">应该总是使用正确的数据类型</span><br><span class="line"></span><br><span class="line">最好是使用 FULLTEXT 而不是 LIKE (慢)</span><br><span class="line"></span><br><span class="line">在导入数据时，应该关闭自动提交</span><br></pre></td></tr></table></figure>

<p><strong>常用命令：</strong></p>
<p>查看当前配置的命令为：<code>SHOW VARIABLES; 或 SHOW
STATUS;</code></p>
<p>显示所有活动进程：<code>SHOW PROCESSLIST</code></p>
<p>终结某个特定的进程：<code>KILL</code></p>
<p>显示MySQL如何执行一条 SELECT 语句： EXPLAIN 语句</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
</search>
